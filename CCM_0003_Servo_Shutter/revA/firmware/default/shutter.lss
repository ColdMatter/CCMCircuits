
shutter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000156  00000000  00000000  00000117  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000195  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e5  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000005e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	2b c0       	rjmp	.+86     	; 0x84 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#define SERVO_MOVED 8400

int main()
{
	// set up the digital input and output
	SERVO_OUT_DDR |= _BV(SERVO_OUT_LINE);
  30:	d6 9a       	sbi	0x1a, 6	; 26
	TTL_IN_DDR &= ~_BV(TTL_IN_LINE);
  32:	b8 98       	cbi	0x17, 0	; 23
	// activate the input pull-up
	TTL_IN_PORT |= _BV(TTL_IN_LINE);
  34:	c0 9a       	sbi	0x18, 0	; 24
	// set up the timer to generate the servo output
	// we use 16-bit counter timer 1 in phase and frequency
	// correct PWM mode. The TOP value of the counter is defined
	// by ICR1, and the PWM duty cycle by OCR1A
	// The clock runs at the system clock rate (8MHz).
	TCCR1A = _BV(COM1A1);
  36:	80 e8       	ldi	r24, 0x80	; 128
  38:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM13) | _BV(CS10);
  3a:	81 e1       	ldi	r24, 0x11	; 17
  3c:	8e bd       	out	0x2e, r24	; 46
	// this sets the pulse repetition rate sent to the servo, in units of system clocks.
	// 0xffff is equivalent to 8.2ms (this is pretty fast for a servo - they usually run
	// at 40Hz ish, but the fast digital ones can usually take faster.)
	ICR1 = 0x8fff;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	9f e8       	ldi	r25, 0x8F	; 143
  42:	95 bd       	out	0x25, r25	; 37
  44:	84 bd       	out	0x24, r24	; 36
	// start with an initial pulse period of 1.5ms (servo centred)
	OCR1A = SERVO_NEUTRAL;
  46:	80 e4       	ldi	r24, 0x40	; 64
  48:	9f e1       	ldi	r25, 0x1F	; 31
  4a:	9b bd       	out	0x2b, r25	; 43
  4c:	8a bd       	out	0x2a, r24	; 42
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4e:	28 ec       	ldi	r18, 0xC8	; 200
  50:	30 e0       	ldi	r19, 0x00	; 0
//		else SERVO_OUT_PORT |= _BV(SERVO_OUT_LINE);

		if ( bit_is_set(TTL_IN_DATA, TTL_IN_LINE) )
		{
			_delay_ms(100);
			OCR1A = SERVO_NEUTRAL;
  52:	60 e4       	ldi	r22, 0x40	; 64
  54:	7f e1       	ldi	r23, 0x1F	; 31
			_delay_ms(100);
			OCR1A = SERVO_MOVED;
  56:	40 ed       	ldi	r20, 0xD0	; 208
  58:	50 e2       	ldi	r21, 0x20	; 32
//		if ( bit_is_set(TTL_IN_DATA, TTL_IN_LINE) ) OCR1A = SERVO_MOVED;
//		else OCR1A = SERVO_NEUTRAL;
//		if ( bit_is_set(TTL_IN_DATA, TTL_IN_LINE) ) SERVO_OUT_PORT &= ~_BV(SERVO_OUT_LINE);
//		else SERVO_OUT_PORT |= _BV(SERVO_OUT_LINE);

		if ( bit_is_set(TTL_IN_DATA, TTL_IN_LINE) )
  5a:	b0 9b       	sbis	0x16, 0	; 22
  5c:	fe cf       	rjmp	.-4      	; 0x5a <__SREG__+0x1b>
  5e:	88 ee       	ldi	r24, 0xE8	; 232
  60:	93 e0       	ldi	r25, 0x03	; 3
  62:	f9 01       	movw	r30, r18
  64:	31 97       	sbiw	r30, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <__SREG__+0x25>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6a:	d9 f7       	brne	.-10     	; 0x62 <__SREG__+0x23>
		{
			_delay_ms(100);
			OCR1A = SERVO_NEUTRAL;
  6c:	7b bd       	out	0x2b, r23	; 43
  6e:	6a bd       	out	0x2a, r22	; 42
  70:	88 ee       	ldi	r24, 0xE8	; 232
  72:	93 e0       	ldi	r25, 0x03	; 3
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <__SREG__+0x35>
			_delay_ms(100);
			OCR1A = SERVO_MOVED;
  7e:	5b bd       	out	0x2b, r21	; 43
  80:	4a bd       	out	0x2a, r20	; 42
  82:	eb cf       	rjmp	.-42     	; 0x5a <__SREG__+0x1b>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
