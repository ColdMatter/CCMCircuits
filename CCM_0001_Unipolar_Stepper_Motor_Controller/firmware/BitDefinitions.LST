MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ; PICBASIC PRO(TM) Compiler 3.0.7.4, (c) 1998, 2013 microEngineering Labs, Inc. All Rights Reserved. 
  00000001            00003 MPASMX_USED                     EQU     1
                      00004 
                      00005 #define PBP_PATH        C:\PROGRAM FILES (X86)\PBP3\
                      00006 
                      00007 
                      00008 
                      00009 
                      00016         LIST
                      00017         LIST p = 18F46K80, r = dec, w = -311, f = inhx32
                      00018         INCLUDE "P18F46K80.INC" ; MPASM  Header
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Feb 13 2015
                      00005 ;  MPASM PIC18F46K80 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      05438         LIST
                      00021         LIST
  00000001            00022 GO_DONE        EQU  H'0001'     ;named GO_NOT_DONE in the MPASM header file
  00F00000            00023 EEPROM_START   EQU      0F00000h
  00000040            00024 BLOCK_SIZE     EQU      64
                      00025 
                      00026 
                      00027     #define HPWM_OVERRIDE 1
                      00028 PBP_HARDWAREDEF  macro
                      00029     #include PBP_PATH\HPWM_K80_1.HWLIB
                      00030   endm
                      00031 
                      00032 
1C 13 7F 27 89 91 0F C00033     CONFIG  RETEN = ON            ; Ultra low-power regulator is Enabled (Controlled by SRETEN bit)
       0 0F E0 0F 40 
                      00034     CONFIG  INTOSCSEL = HIGH      ; LF-INTOSC in High-power mode during Sleep
                      00035     CONFIG  SOSCSEL = HIGH        ; High Power SOSC circuit selected
                      00036     CONFIG  XINST = OFF           ; Disabled
                      00037     CONFIG  FOSC = HS1            ; HS oscillator (Medium power, 4 MHz - 16 MHz)
                      00038     CONFIG  PLLCFG = ON           ; Enabled
                      00039     CONFIG  FCMEN = OFF           ; Disabled
                      00040     CONFIG  IESO = OFF            ; Disabled
                      00041     CONFIG  PWRTEN = OFF          ; Disabled
                      00042     CONFIG  BOREN = SBORDIS       ; Enabled in hardware, SBOREN disabled
                      00043     CONFIG  BORV = 3              ; 1.8V
                      00044     CONFIG  BORPWR = ZPBORMV      ; ZPBORMV instead of BORMV is selected
                      00045     CONFIG  WDTEN = SWDTDIS       ; WDT enabled in hardware; SWDTEN bit disabled
                      00046     CONFIG  WDTPS = 512           ; 1:512
                      00047     CONFIG  CANMX = PORTB         ; ECAN TX and RX pins are located on RB2 and RB3, respectively
                      00048     CONFIG  MSSPMSK = MSK7        ; 7 Bit address masking mode
                      00049     CONFIG  MCLRE = ON            ; MCLR Enabled, RE3 Disabled
                      00050     CONFIG  STVREN = ON           ; Enabled
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051     CONFIG  BBSIZ = BB2K          ; 2K word Boot Block size
                      00052     CONFIG  CP0 = OFF             ; Disabled
                      00053     CONFIG  CP1 = OFF             ; Disabled
                      00054     CONFIG  CP2 = OFF             ; Disabled
                      00055     CONFIG  CP3 = OFF             ; Disabled
                      00056     CONFIG  CPB = OFF             ; Disabled
                      00057     CONFIG  CPD = OFF             ; Disabled
                      00058     CONFIG  WRT0 = OFF            ; Disabled
                      00059     CONFIG  WRT1 = OFF            ; Disabled
                      00060     CONFIG  WRT2 = OFF            ; Disabled
                      00061     CONFIG  WRT3 = OFF            ; Disabled
                      00062     CONFIG  WRTC = OFF            ; Disabled
                      00063     CONFIG  WRTB = OFF            ; Disabled
                      00064     CONFIG  WRTD = OFF            ; Disabled
                      00065     CONFIG  EBTR0 = OFF           ; Disabled
                      00066     CONFIG  EBTR1 = OFF           ; Disabled
                      00067     CONFIG  EBTR2 = OFF           ; Disabled
                      00068     CONFIG  EBTR3 = OFF           ; Disabled
                      00069     CONFIG  EBTRB = OFF           ; Disabled
                      00070 
                      00071 
                      00072 
                      00073 ; Define statements.
                      00074 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00610   DEFINE  ADC_CHANNELS 1
                      00075 #define         ADC_CHANNELS             1
                      00076 
  00000000            00077 RAM_START                       EQU     00000h
  00000E40            00078 RAM_END                         EQU     00E40h
  0000000F            00079 RAM_BANKS                       EQU     0000Fh
  00000060            00080 BANK0_START                     EQU     00060h
  000000FF            00081 BANK0_END                       EQU     000FFh
  00000100            00082 BANK1_START                     EQU     00100h
  000001FF            00083 BANK1_END                       EQU     001FFh
  00000200            00084 BANK2_START                     EQU     00200h
  000002FF            00085 BANK2_END                       EQU     002FFh
  00000300            00086 BANK3_START                     EQU     00300h
  000003FF            00087 BANK3_END                       EQU     003FFh
  00000400            00088 BANK4_START                     EQU     00400h
  000004FF            00089 BANK4_END                       EQU     004FFh
  00000500            00090 BANK5_START                     EQU     00500h
  000005FF            00091 BANK5_END                       EQU     005FFh
  00000600            00092 BANK6_START                     EQU     00600h
  000006FF            00093 BANK6_END                       EQU     006FFh
  00000700            00094 BANK7_START                     EQU     00700h
  000007FF            00095 BANK7_END                       EQU     007FFh
  00000800            00096 BANK8_START                     EQU     00800h
  000008FF            00097 BANK8_END                       EQU     008FFh
  00000900            00098 BANK9_START                     EQU     00900h
  000009FF            00099 BANK9_END                       EQU     009FFh
  00000A00            00100 BANK10_START                    EQU     00A00h
  00000AFF            00101 BANK10_END                      EQU     00AFFh
  00000B00            00102 BANK11_START                    EQU     00B00h
  00000BFF            00103 BANK11_END                      EQU     00BFFh
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000C00            00104 BANK12_START                    EQU     00C00h
  00000CFF            00105 BANK12_END                      EQU     00CFFh
  00000D00            00106 BANK13_START                    EQU     00D00h
  00000DFF            00107 BANK13_END                      EQU     00DFFh
  00000E00            00108 BANK14_START                    EQU     00E00h
  00000E40            00109 BANK14_END                      EQU     00E40h
  00000000            00110 BANKA_START                     EQU     00000h
  0000005F            00111 BANKA_END                       EQU     0005Fh
                      00112 
                      00113 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00028   A00000  FLAGS   VAR     BYTE BANKA SYSTEM       
                            ' Static flags
  00000000            00114 FLAGS                           EQU     RAM_START + 000h
                      00115 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00027   A00001  GOP     VAR     BYTE BANKA SYSTEM       
                            ' Gen Op Parameter
  00000001            00116 GOP                             EQU     RAM_START + 001h
                      00117 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00016   A00002  R4      VAR     WORD BANKA SYSTEM       
                            ' System Register
  00000002            00118 R4                              EQU     RAM_START + 002h
                      00119 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00017   A00004  R5      VAR     WORD BANKA SYSTEM       
                            ' System Register
  00000004            00120 R5                              EQU     RAM_START + 004h
                      00121 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00018   A00006  R6      VAR     WORD BANKA SYSTEM       
                            ' System Register
  00000006            00122 R6                              EQU     RAM_START + 006h
                      00123 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00019   A00008  R7      VAR     WORD BANKA SYSTEM       
                            ' System Register
  00000008            00124 R7                              EQU     RAM_START + 008h
                      00125 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00020   A0000A  R8      VAR     WORD BANKA SYSTEM       
                            ' System Register
  0000000A            00126 R8                              EQU     RAM_START + 00Ah
                      00127 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00023   A0000C  RM1     VAR     BYTE BANKA SYSTEM       
                            ' Pin 1 Mask
  0000000C            00128 RM1                             EQU     RAM_START + 00Ch
                      00129 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00026   A0000D  RM2     VAR     BYTE BANKA SYSTEM       
                            ' Pin 2 Mask
  0000000D            00130 RM2                             EQU     RAM_START + 00Dh
                      00131 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00021   A0000E  RR1     VAR     BYTE BANKA SYSTEM       
                            ' Pin 1 Register
  0000000E            00132 RR1                             EQU     RAM_START + 00Eh
                      00133 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00024   A0000F  RR2     VAR     BYTE BANKA SYSTEM       
                            ' Pin 2 Register
  0000000F            00134 RR2                             EQU     RAM_START + 00Fh
                      00135 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00022   A00010  RS1     VAR     BYTE BANKA SYSTEM       
                            ' Pin 1 Bank
  00000010            00136 RS1                             EQU     RAM_START + 010h
                      00137 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00025   A00011  RS2     VAR     BYTE BANKA SYSTEM       
                            ' Pin 2 Bank
  00000011            00138 RS2                             EQU     RAM_START + 011h
                      00139 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00012   A00012  R0      VAR     LONG BANKA SYSTEM       
                            ' System Register
  00000012            00140 R0                              EQU     RAM_START + 012h
                      00141 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00013   A00016  R1      VAR     LONG BANKA SYSTEM       
                            ' System Register
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000016            00142 R1                              EQU     RAM_START + 016h
                      00143 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00014   A0001A  R2      VAR     LONG BANKA SYSTEM       
                            ' System Register
  0000001A            00144 R2                              EQU     RAM_START + 01Ah
                      00145 ; C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.RAM      00015   A0001E  R3      VAR     LONG BANKA SYSTEM       
                            ' System Register
  0000001E            00146 R3                              EQU     RAM_START + 01Eh
                      00147 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00611   PORTL   VAR     PORTB
  00000F81            00148 _PORTL                          EQU      PORTB
                      00149 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00612   PORTH   VAR     PORTC
  00000F82            00150 _PORTH                          EQU      PORTC
                      00151 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00613   TRISL   VAR     TRISB
  00000F93            00152 _TRISL                          EQU      TRISB
                      00153 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00614   TRISH   VAR     TRISC
  00000F94            00154 _TRISH                          EQU      TRISC
                      00155 #define _GIE                    _INTCON??7
                      00156 #define _PEIE                   _INTCON??6
                      00157 #define _TMR0IE                 _INTCON??5
                      00158 #define _INT0IE                 _INTCON??4
                      00159 #define _TMR0IF                 _INTCON??2
                      00160 #define _INT0IF                 _INTCON??1
                      00161 #define _IPEN                   _RCON??7
                      00162 #define _RBPU_                  _INTCON2??7
                      00163 #define _INT1IE                 _INTCON3??3
                      00164 #define _INT2IE                 _INTCON3??4
                      00165 #define _INT3IE                 _INTCON3??5
                      00166 #define _INTEDG0                _INTCON2??6
                      00167 #define _INTEDG1                _INTCON2??5
                      00168 #define _INTEDG2                _INTCON2??4
                      00169 #define _INTEDG3                _INTCON2??3
                      00170 #define _INT1IF                 _INTCON3??0
                      00171 #define _INT2IF                 _INTCON3??1
                      00172 #define _INT3IF                 _INTCON3??2
                      00173 #define _RC1IE                  _PIE1??5
                      00174 #define _RC1IF                  _PIR1??5
                      00175 #define _RC2IE                  _PIE3??5
                      00176 #define _RC2IF                  _PIR3??5
                      00177 #define _ADCgo                  _ADCON0??1
                      00178 #define _OERR1                  _RCSTA1??1
                      00179 #define _OERR2                  _RCSTA2??1
                      00180 #define _FERR1                  _RCSTA1??2
                      00181 #define _FERR2                  _RCSTA2??2
                      00182 #define _CREN1                  _RCSTA1??4
                      00183 #define _CREN2                  _RCSTA2??4
                      00184 #define _TMR0ON                 _T0CON??7
                      00185 #define _T08BIT                 _T0CON??6
                      00186 #define _T0CS                   _T0CON??5
                      00187 #define _T0SE                   _T0CON??4
                      00188 #define _PSA                    _T0CON??3
                      00189 #define _TOPS2                  _T0CON??2
                      00190 #define _TOPS1                  _T0CON??1
                      00191 #define _TOPS0                  _T0CON??0
                      00192 #define _TMR0MD                 _PMD1??0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00193 #define _TMR1CS1                _T1CON??7
                      00194 #define _TMR1CS0                _T1CON??6
                      00195 #define _T1CKPS1                _T1CON??5
                      00196 #define _T1CKPS0                _T1CON??4
                      00197 #define _T1SOSCEN               _T1CON??3
                      00198 #define _T1SYNC_                _T1CON??2
                      00199 #define _T1RD16                 _T1CON??1
                      00200 #define _TMR1ON                 _T1CON??0
                      00201 #define _TMR1GE                 _T1GCON??7
                      00202 #define _T1GPOL                 _T1GCON??6
                      00203 #define _T1GTM                  _T1GCON??5
                      00204 #define _T1GSPM                 _T1GCON??4
                      00205 #define _T1GGO                  _T1GCON??3
                      00206 #define _T1GVAL                 _T1GCON??2
                      00207 #define _T1GSS1                 _T1GCON??1
                      00208 #define _T1GSS0                 _T1GCON??0
                      00209 #define _TMR3CS1                _T3CON??7
                      00210 #define _TMR3CS0                _T3CON??6
                      00211 #define _T3CKPS1                _T3CON??5
                      00212 #define _T3CKPS0                _T3CON??4
                      00213 #define _T3SOSCEN               _T3CON??3
                      00214 #define _T3SYNC_                _T3CON??2
                      00215 #define _T3RD16                 _T3CON??1
                      00216 #define _TMR3ON                 _T3CON??0
                      00217 #define _TMR3GE                 _T3GCON??7
                      00218 #define _T3GPOL                 _T3GCON??6
                      00219 #define _T3GTM                  _T3GCON??5
                      00220 #define _T3GSPM                 _T3GCON??4
                      00221 #define _T3GGO                  _T3GCON??3
                      00222 #define _T3GVAL                 _T3GCON??2
                      00223 #define _T3GSS1                 _T3GCON??1
                      00224 #define _T3GSS0                 _T3GCON??0
                      00225 #define _INTCON??7               INTCON, 007h
                      00226 #define _INTCON??6               INTCON, 006h
                      00227 #define _INTCON??5               INTCON, 005h
                      00228 #define _INTCON??4               INTCON, 004h
                      00229 #define _INTCON??2               INTCON, 002h
                      00230 #define _INTCON??1               INTCON, 001h
                      00231 #define _RCON??7                 RCON, 007h
                      00232 #define _INTCON2??7              INTCON2, 007h
                      00233 #define _INTCON3??3              INTCON3, 003h
                      00234 #define _INTCON3??4              INTCON3, 004h
                      00235 #define _INTCON3??5              INTCON3, 005h
                      00236 #define _INTCON2??6              INTCON2, 006h
                      00237 #define _INTCON2??5              INTCON2, 005h
                      00238 #define _INTCON2??4              INTCON2, 004h
                      00239 #define _INTCON2??3              INTCON2, 003h
                      00240 #define _INTCON3??0              INTCON3, 000h
                      00241 #define _INTCON3??1              INTCON3, 001h
                      00242 #define _INTCON3??2              INTCON3, 002h
                      00243 #define _PIE1??5                 PIE1, 005h
                      00244 #define _PIR1??5                 PIR1, 005h
                      00245 #define _PIE3??5                 PIE3, 005h
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00246 #define _PIR3??5                 PIR3, 005h
                      00247 #define _ADCON0??1               ADCON0, 001h
                      00248 #define _RCSTA1??1               RCSTA1, 001h
                      00249 #define _RCSTA2??1               RCSTA2, 001h
                      00250 #define _RCSTA1??2               RCSTA1, 002h
                      00251 #define _RCSTA2??2               RCSTA2, 002h
                      00252 #define _RCSTA1??4               RCSTA1, 004h
                      00253 #define _RCSTA2??4               RCSTA2, 004h
                      00254 #define _T0CON??7                T0CON, 007h
                      00255 #define _T0CON??6                T0CON, 006h
                      00256 #define _T0CON??5                T0CON, 005h
                      00257 #define _T0CON??4                T0CON, 004h
                      00258 #define _T0CON??3                T0CON, 003h
                      00259 #define _T0CON??2                T0CON, 002h
                      00260 #define _T0CON??1                T0CON, 001h
                      00261 #define _T0CON??0                T0CON, 000h
                      00262 #define _PMD1??0                 PMD1, 000h
                      00263 #define _T1CON??7                T1CON, 007h
                      00264 #define _T1CON??6                T1CON, 006h
                      00265 #define _T1CON??5                T1CON, 005h
                      00266 #define _T1CON??4                T1CON, 004h
                      00267 #define _T1CON??3                T1CON, 003h
                      00268 #define _T1CON??2                T1CON, 002h
                      00269 #define _T1CON??1                T1CON, 001h
                      00270 #define _T1CON??0                T1CON, 000h
                      00271 #define _T1GCON??7               T1GCON, 007h
                      00272 #define _T1GCON??6               T1GCON, 006h
                      00273 #define _T1GCON??5               T1GCON, 005h
                      00274 #define _T1GCON??4               T1GCON, 004h
                      00275 #define _T1GCON??3               T1GCON, 003h
                      00276 #define _T1GCON??2               T1GCON, 002h
                      00277 #define _T1GCON??1               T1GCON, 001h
                      00278 #define _T1GCON??0               T1GCON, 000h
                      00279 #define _T3CON??7                T3CON, 007h
                      00280 #define _T3CON??6                T3CON, 006h
                      00281 #define _T3CON??5                T3CON, 005h
                      00282 #define _T3CON??4                T3CON, 004h
                      00283 #define _T3CON??3                T3CON, 003h
                      00284 #define _T3CON??2                T3CON, 002h
                      00285 #define _T3CON??1                T3CON, 001h
                      00286 #define _T3CON??0                T3CON, 000h
                      00287 #define _T3GCON??7               T3GCON, 007h
                      00288 #define _T3GCON??6               T3GCON, 006h
                      00289 #define _T3GCON??5               T3GCON, 005h
                      00290 #define _T3GCON??4               T3GCON, 004h
                      00291 #define _T3GCON??3               T3GCON, 003h
                      00292 #define _T3GCON??2               T3GCON, 002h
                      00293 #define _T3GCON??1               T3GCON, 001h
                      00294 #define _T3GCON??0               T3GCON, 000h
                      00295 
                      00296 ; EEPROM data.
                      00297 
                      00298 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00299         INCLUDE "BITDEFINITIONS.MAC"
                      00001 
                      00006         LIST
                      00300         INCLUDE "C:\PROGRAM FILES (X86)\PBP3\PBPPI18L.LIB"
                      00001 ;******************************************************************
                      00002 ;*  PBPPI18L.LIB                                                  *
                      00003 ;*                                                                *
                      00004 ;*  By        : Leonard Zerman, Jeff Schmoyer, Darrel Taylor      *
                      00005 ;*              Charles Leo
                      00006 ;*  Notice    : Copyright (c) 2012 microEngineering Labs, Inc.    *
                      00007 ;*              All Rights Reserved                               *
                      00008 ;*  Date      : 05/03/2012                                        *
                      00009 ;*  Version   : 3.?.?                                             *
                      00010 ;*  Notes     : Longs                                             *
                      00011 ;******************************************************************
                      00063   LIST
                      00064 ; Oscillator is 4MHz
                      01493   LIST
000000                01494     ORG RESET_ORG               ; Reset vector at 0
                      01503   LIST
000000 EF02 F000      01504         goto    INIT            ; Finish initialization
                          M   list
                          M 
                          M ;******************************************************************
                          M ;*  HPWM_K80_1.HWLIB                                              *
                          M ;*                                                                *
                          M ;*  Notice    : Copyright (c) 2012 microEngineering Labs, Inc.    *
                          M ;*              All Rights Reserved                               *
                          M ;*  Date      : 05/03/12                                          *
                          M ;*  Version   : 3.?.?.?                                           *
                          M ;*  Notes     : HPWM for PIC18FxxK80 and similar CCP              *
                          M ;******************************************************************
                          M 
                          M 
                          M     ifdef HPWM_USED
                          M ;****************************************************************
                          M ;* Default Hpwm values                                          *
                          M ;****************************************************************
                          M 
                          M     ifndef CCP1_REG             ; CCP1 pin port
                          M CCP1_REG EQU PORTD
                          M     endif
                          M     ifndef CCP1_BIT             ; CCP1 pin bit
                          M CCP1_BIT EQU 4
                          M     endif
                          M     ifdef CCP2CON
                          M       ifndef CCP2_REG           ; CCP2 pin port
                          M CCP2_REG EQU PORTC
                          M       endif
                          M       ifndef CCP2_BIT           ; CCP2 pin bit
                          M CCP2_BIT EQU 2
                          M       endif
                          M     endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     ifdef CCP3CON
                          M       ifndef CCP3_REG           ; CCP3 pin port
                          M CCP3_REG EQU PORTC
                          M       endif
                          M       ifndef CCP3_BIT           ; CCP3 pin bit
                          M CCP3_BIT EQU 6
                          M       endif
                          M     endif
                          M     ifdef CCP4CON
                          M       ifndef CCP4_REG           ; CCP4 pin port
                          M CCP4_REG EQU PORTC
                          M       endif
                          M       ifndef CCP4_BIT           ; CCP4 pin bit
                          M CCP4_BIT EQU 7
                          M       endif
                          M     endif
                          M     ifdef CCP5CON
                          M       ifndef CCP5_REG           ; CCP5 pin port
                          M CCP5_REG EQU PORTB
                          M       endif
                          M       ifndef CCP5_BIT           ; CCP5 pin bit
                          M CCP5_BIT EQU 5
                          M       endif
                          M     endif
                          M   endif
                          M 
                          M ;****************************************************************
                          M ;* HPWM       : Output a pulse width modulated wave in hardware *
                          M ;*                                                              *
                          M ;* Input      : W = channel 1 - 5                               *
                          M ;*            : R1 = frequency                                  *
                          M ;*            : R4 = duty cycle                                 *
                          M ;* Output     : None                                            *
                          M ;*                                                              *
                          M ;* Notes      :                                                 *
                          M ;****************************************************************
                          M 
                          M     ifdef HPWM_USED
                          M   LIST
                          M HPWM    movlb   15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                          M         movwf   R4 + 1          ; Save channel
                          M 
                          M         ; PS = (FOSC / 1024) / freq
                          M         ; PR2 = ((FOSC / 4 / PS) / freq) - 1
                          M         movlw   low ((OSC) * 1000000 / 4)
                          M         movwf   R0
                          M         movlw   low (((OSC) * 1000000 / 4) >> 8)
                          M         movwf   R0 + 1
                          M         movlw   ((OSC) * 1000000 / 4) >> 16
                          M       if R1 - R0 == 4          ; If PBPL used
                          M         movwf   R0 + 2
                          M         clrf    R0 + 3
                          M         call    DIV             ; (FOSC / 4) / freq
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       else                     ; If PBPW used
                          M         movwf   R2
                          M         clrf    R2 + 1
                          M         call    DIV32DIV        ; (FOSC / 4) / freq
                          M       endif
                          M         clrf    R5              ; Start prescaler storage, R5, at PS = 1
                          M         movf    R0 + 1, W       ; Get PS info to W
                          M         bz      hpwmpsok        ; PS = 1 is good
                          M         bsf     R5, T2CKPS0     ; Not 0 so set PS = 4
                          M         rcall   hpwmdiv4        ; PR2 / 4 (PS = 4 or 16)
                          M         addlw   -4              ; Check for R0 + 1 >= 4
                          M         bnc     hpwmpsok
                          M         bsf     R5, T2CKPS1     ; >= 4 so set PS = 16
                          M         rcall   hpwmdiv4        ; PR2 / 4 (PS = 16)
                          M hpwmpsok decf   R0, F           ; - 1, R0 will be PR2 or PR4
                          M 
                          M         ; CCP = ((PR2 + 1) * 4) */ duty cycle (10 bit result)
                          M         ; Result works out to be ((PR2 + 1) * duty cycle) / 64
                          M         incfsz  R4, W           ; Check for duty cycle = 255
                          M         bra     hpwmmul         ; Not 255
                          M         setf    PRODH           ; Make it on all the time
                          M         setf    PRODL
                          M         bra     hpwmch1
                          M hpwmmul movf    R4, W           ; Preset for PRODHL = 256 * duty cycle (same as shift up 8)
                          M         movwf   PRODH
                          M         clrf    PRODL
                          M         incfsz  R0, W           ; W = PR2 + 1
                          M         mulwf   R4              ; PRODHL = (PR2 + 1) * duty cycle
                          M 
                          M         ; Find correct routine for selected channel
                          M hpwmch1 movlb   0fh             ; Select bank 15 for registers outside of access bank
                          M         decfsz  R4 + 1, F
                          M         bra     hpwmch2         ; Check next channel
                          M         movf    CCP1CON, W      ; Get ready to set CCPCON
                          M         andlw   0cfh            ; Clear bottom 2 CCP bits
                          M         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                          M         bsf     WREG, 5
                          M         btfsc   PRODL, 6
                          M         bsf     WREG, 4
                          M         iorlw   0ch             ; Set PWM mode
                          M         movff   PRODH, CCPR1L   ; Set top 8 CCP bits
                          M         movwf   CCP1CON         ; Finally set CCPCON
                          M         bcf     (CCP1_REG) + 12h, CCP1_BIT      ; Set CCP to output
                          M         clrf    R5 + 1          ; Clear timer selector bits
                          M         btfsc   CCPTMRS, C1TSEL
                          M         bsf     R5 + 1, 0
                          M         bra     hpwmtmr
                          M hpwmch2
                          M       ifdef CCP2CON
                          M         decfsz  R4 + 1, F
                          M         bra     hpwmch3         ; Check next channel
                          M         movf    CCP2CON, W      ; Get ready to set CCPCON
                          M         andlw   0cfh            ; Clear bottom 2 CCP bits
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                          M         bsf     WREG, 5
                          M         btfsc   PRODL, 6
                          M         bsf     WREG, 4
                          M         iorlw   0ch             ; Set PWM mode
                          M         movff   PRODH, CCPR2L   ; Set top 8 CCP bits
                          M         movwf   CCP2CON         ; Finally set CCPCON
                          M         bcf     (CCP2_REG) + 12h, CCP2_BIT      ; Set CCP to output
                          M         clrf    R5 + 1          ; Clear timer selector bits
                          M         btfsc   CCPTMRS, C2TSEL
                          M         bsf     R5 + 1, 0
                          M         bra     hpwmtmr
                          M hpwmch3
                          M       endif
                          M       ifdef CCP3CON
                          M         decfsz  R4 + 1, F
                          M         bra     hpwmch4         ; Check next channel
                          M         movf    CCP3CON, W      ; Get ready to set CCPCON
                          M         andlw   0cfh            ; Clear bottom 2 CCP bits
                          M         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                          M         bsf     WREG, 5
                          M         btfsc   PRODL, 6
                          M         bsf     WREG, 4
                          M         iorlw   0ch             ; Set PWM mode
                          M         movff   PRODH, CCPR3L   ; Set top 8 CCP bits
                          M         movwf   CCP3CON         ; Finally set CCPCON
                          M         bcf     (CCP3_REG) + 12h, CCP3_BIT      ; Set CCP to output
                          M         clrf    R5 + 1          ; Clear timer selector bits
                          M         btfsc   CCPTMRS, C3TSEL
                          M         bsf     R5 + 1, 0
                          M         bra     hpwmtmr
                          M hpwmch4
                          M       endif
                          M       ifdef CCP4CON
                          M         decfsz  R4 + 1, F
                          M         bra     hpwmch5         ; Check next channel
                          M         movf    CCP4CON, W      ; Get ready to set CCPCON
                          M         andlw   0cfh            ; Clear bottom 2 CCP bits
                          M         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                          M         bsf     WREG, 5
                          M         btfsc   PRODL, 6
                          M         bsf     WREG, 4
                          M         iorlw   0ch             ; Set PWM mode
                          M         movff   PRODH, CCPR4L   ; Set top 8 CCP bits
                          M         movwf   CCP4CON         ; Finally set CCPCON
                          M         bcf     (CCP4_REG) + 12h, CCP4_BIT      ; Set CCP to output
                          M         clrf    R5 + 1          ; Clear timer selector bits
                          M         btfsc   CCPTMRS, C4TSEL
                          M         bsf     R5 + 1, 0
                          M         bra     hpwmtmr
                          M hpwmch5
                          M       endif
                          M       ifdef CCP5CON
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         decfsz  R4 + 1, F
                          M         bra     hpwmdone        ; Must be invalid channel
                          M         movf    CCP5CON, W      ; Get ready to set CCPCON
                          M         andlw   0cfh            ; Clear bottom 2 CCP bits
                          M         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                          M         bsf     WREG, 5
                          M         btfsc   PRODL, 6
                          M         bsf     WREG, 4
                          M         iorlw   0ch             ; Set PWM mode
                          M         movff   PRODH, CCPR5L   ; Set top 8 CCP bits
                          M         movwf   CCP5CON         ; Finally set CCPCON
                          M         bcf     (CCP5_REG) + 12h, CCP5_BIT      ; Set CCP to output
                          M         clrf    R5 + 1          ; Clear timer selector bits
                          M         btfsc   CCPTMRS, C5TSEL
                          M         bsf     R5 + 1, 0
                          M       else
                          M         bra     hpwmdone        ; Invalid channel
                          M       endif
                          M 
                          M hpwmtmr incf    R5 + 1, F       ; Bump up for timer selection
                          M hpwmtmr2 decfsz R5 + 1, F
                          M         bra     hpwmtmr4        ; Check next timer
                          M         movf    T2CON, W        ; Get ready to set T2CON
                          M         andlw   0fch            ; Clear current PS bits
                          M         iorwf   R5, W           ; Put in new PS bits
                          M         bsf     WREG, TMR2ON    ; Start the timer
                          M         movff   R0, PR2         ; Set PR2
                          M         movwf   T2CON           ; Finally set T2CON
                          M hpwmdone goto   DUNN
                          M hpwmtmr4
                          M         decfsz  R5 + 1, F
                          M         bra     hpwmdone        ; Invalid timer
                          M         movf    T4CON, W        ; Get ready to set T4CON
                          M         andlw   0fch            ; Clear current PS bits
                          M         iorwf   R5, W           ; Put in new PS bits
                          M         bsf     WREG, TMR4ON    ; Start the timer
                          M         movff   R0, PR4         ; Set PR4
                          M         movwf   T4CON           ; Finally set T4CON
                          M         bra     hpwmdone
                          M 
                          M hpwmdiv4 rrcf   R0 + 1, F       ; Divide by 4
                          M         rrcf    R0, F
                          M         rrcf    R0 + 1, F
                          M         rrcf    R0, F           ; Only the low byte is ultimately used
                          M         return
                          M   NOLIST
                          M DIV_USED = 1
                          M DUNN_USED = 1
                          M     endif
                          M   list
                          M   
                          M ;******************************************************************
                          M ;*  HPWM_K80_1.HWLIB  end of file                                 *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;******************************************************************  
                      01551 
                      01552 
                      01553 ;****************************************************************
                      01554 ;* SIN/COS routines - Must be in first 32K.                     *
                      01555 ;****************************************************************
                      01556 
                      01557 ;****************************************************************
                      01558 ;* COS        : Cosine function                                 *
                      01559 ;*                                                              *
                      01560 ;* Input      : W                                               *
                      01561 ;* Output     : W                                               *
                      01562 ;*                                                              *
                      01563 ;* Notes      :                                                 *
                      01564 ;****************************************************************
                      01565 
                      01566     ifdef COS_USED
                      01567   LIST
                      01568 COS     addlw   64              ; Cosine leads sine by 1/4 wave
                      01569 ;       bra     SIN             ; Fall through
                      01570   NOLIST
                      01571 SIN_USED = 1
                      01572     endif
                      01573 
                      01574     ifdef DTMFOUT_USED
                      01575 SIN_USED = 1
                      01576     endif
                      01577     ifdef FREQOUT_USED
                      01578 SIN_USED = 1
                      01579     endif
                      01580 
                      01581 ;****************************************************************
                      01582 ;* SIN        : Sine function                                   *
                      01583 ;*                                                              *
                      01584 ;* Input      : W                                               *
                      01585 ;* Output     : W                                               *
                      01586 ;*                                                              *
                      01587 ;* Notes      : Needs to be time consistent for FREQOUT.        *
                      01588 ;*            : At front of library to be in first 32K.         *
                      01589 ;****************************************************************
                      01590 
                      01591     ifdef SIN_USED
                      01592   LIST
                      01593 SIN     movwf   R0              ; 1 (19) Save original value for tests
                      01594         andlw   7fh             ; 1 Isolate lower 7 bits
                      01595         btfsc   R0, 6           ; 1 / 2 Check quadrant
                      01596         sublw   80h             ; 1 / 0 Flip to next quadrant
                      01597         addlw   low (sintable)  ; 1 Point to table
                      01598         movwf   TBLPTRL         ; 1 Set up table pointer low
                      01599         clrf    TBLPTRH         ; 1 Zero table pointer high
                      01600         movlw   high (sintable) ; 1 Get high address of sin table
                      01601         addwfc  TBLPTRH, F      ; 1 Set table pointer high
                      01602         clrf    TBLPTRU         ; 1 In first 32K words
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01603         tblrd   *               ; 2 Get the sine
                      01604         movf    TABLAT, W       ; 1 Move it to W
                      01605         btfsc   R0, 7           ; 1 / 2 Check sign
                      01606         sublw   0               ; 1 / 0 Make negative
                      01607         return                  ; 2 + 2
                      01608 
                      01609 sintable db     0,3,6,9,12,16,19,22
                      01610         db      25,28,31,34,37,40,43,46
                      01611         db      49,51,54,57,60,63,65,68
                      01612         db      71,73,76,78,81,83,85,88
                      01613         db      90,92,94,96,98,100,102,104
                      01614         db      106,107,109,111,112,113,115,116
                      01615         db      117,118,120,121,122,122,123,124
                      01616         db      125,125,126,126,126,127,127,127
                      01617         db      127
                      01618   NOLIST
                      01619     endif
                      01620 
                      01621 
                      01622 ;****************************************************************
                      01623 ;* Array routines                                               *
                      01624 ;****************************************************************
                      01625 
                      01626 ;****************************************************************
                      01627 ;* ARRAYBIT   : Translate array to FSR and bit                  *
                      01628 ;*                                                              *
                      01629 ;* Input      : FSR0 = register                                 *
                      01630 ;*            : Carry, W = bit index (0 - 262)                  *
                      01631 ;* Output     : FSR0 = register                                 *
                      01632 ;*            : R4 = bit mask                                   *
                      01633 ;*            : Z = bit state                                   *
                      01634 ;*                                                              *
                      01635 ;* Notes      :                                                 *
                      01636 ;****************************************************************
                      01637 
                      01638     ifdef ARRAYBIT_USED
                      01639   LIST
                      01640 ARRAYBIT movwf  R4              ; Save bit index
                      01641         andlw   0f8h            ; Clear bottom 3 bits
                      01642         rrcf    WREG, W         ; / 8 (roll C into top)
                      01643         rrcf    WREG, W
                      01644         rrcf    WREG, W
                      01645         addwf   FSR0L, F        ; Add /8 to register
                      01646         btfsc   STATUS, C
                      01647         incf    FSR0H, F
                      01648         call    CONVBIT         ; Change bit number in R4 to mask
                      01649         movwf   R4              ; Save it
                      01650         andwf   INDF0, W        ; Bit to Z while we're here
                      01651         goto    DUNN
                      01652   NOLIST
                      01653 CONVBIT_USED = 1
                      01654 DUNN_USED = 1
                      01655     endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01656 
                      01657 ;****************************************************************
                      01658 ;* CARRY2FB   : Move Carry to FSR and bit                       *
                      01659 ;*                                                              *
                      01660 ;* Input      : FSR0 = register                                 *
                      01661 ;*            : R4 = bit mask                                   *
                      01662 ;*            : Carry = bit state                               *
                      01663 ;* Output     :                                                 *
                      01664 ;*                                                              *
                      01665 ;* Notes      :                                                 *
                      01666 ;****************************************************************
                      01667 
                      01668     ifdef CARRY2FB_USED
                      01669   LIST
                      01670 CARRY2FB movf   R4, W           ; Get bit mask
                      01671         btfss   STATUS, C       ; Skip if bit should be on
                      01672         clrf    WREG            ; Else clear mask
                      01673         xorwf   INDF0, W        ; Get array data into the mix
                      01674         andwf   R4, W           ; Isolate bit
                      01675         xorwf   INDF0, F        ; Set array bit state
                      01676         goto    DUNN
                      01677   NOLIST
                      01678 DUNN_USED = 1
                      01679     endif
                      01680 
                      01681 ;****************************************************************
                      01682 ;* ARRAYREAD  : Read char from array                            *
                      01683 ;*                                                              *
                      01684 ;* Input      : R5 = pointer to next char in array              *
                      01685 ;*            : R6 = number of chars left in array (timeout)    *
                      01686 ;* Output     : W                                               *
                      01687 ;*                                                              *
                      01688 ;* Notes      : C clear if timed out.                           *
                      01689 ;****************************************************************
                      01690 
                      01691     ifdef ARRAYREADTO_USED
                      01692   LIST
                      01693 ARRAYREADTO movf R6, F          ; Check for no chars left in array
                      01694         bcf     STATUS, C       ; Preset for timed out (C clear)
                      01695         bz      arrayreaddone   ; No chars left
                      01696         decf    R6, F           ; Count down the characters left and fall through to ARRAYREAD
                      01697   NOLIST
                      01698 ARRAYREAD_USED = 1
                      01699     endif
                      01700 
                      01701     ifdef ARRAYREAD_USED
                      01702   LIST
                      01703 ARRAYREAD movff R5, FSR0L       ; Put the array pointer into FSR0
                      01704         movff   R5 + 1, FSR0H
                      01705         movf    POSTINC0, W     ; Get char from the array and bump up the address
                      01706         movff   FSR0L, R5       ; Save new pointer
                      01707         movff   FSR0H, R5 + 1
                      01708         bsf     STATUS, C       ; Indicate not timed out (C set)
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01709 arrayreaddone goto DUNN         ; That's it
                      01710   NOLIST
                      01711 DUNN_USED = 1
                      01712     endif
                      01713 
                      01714 ;****************************************************************
                      01715 ;* ARRAYWRITE : Write char to array                             *
                      01716 ;*                                                              *
                      01717 ;* Input      : W = char                                        *
                      01718 ;*            : R5 = pointer to next char in array              *
                      01719 ;*            : R6 = number of chars left in array (timeout)    *
                      01720 ;* Output     : None                                            *
                      01721 ;*                                                              *
                      01722 ;* Notes      :                                                 *
                      01723 ;****************************************************************
                      01724 
                      01725     ifdef ARRAYWRITETOJ_USED
                      01726   LIST
                      01727 ARRAYWRITETOJ movf FSR0L, W     ; Jumpman entry
                      01728   NOLIST
                      01729 ARRAYWRITETO_USED = 1
                      01730     endif
                      01731 
                      01732     ifdef ARRAYWRITETO_USED
                      01733   LIST
                      01734 ARRAYWRITETO movf R6, F         ; Check for no space left in array
                      01735         bcf     STATUS, C       ; Preset for timed out (C clear)
                      01736         bz      arraywritedone  ; No space left
                      01737         decf    R6, F           ; Count down the characters left
                      01738         bra     ARRAYWRITE
                      01739   NOLIST
                      01740 ARRAYWRITE_USED = 1
                      01741     endif
                      01742 
                      01743     ifdef ARRAYWRITEJ_USED
                      01744   LIST
                      01745 ARRAYWRITEJ movf FSR0L, W       ; Jumpman entry
                      01746   NOLIST
                      01747 ARRAYWRITE_USED = 1
                      01748     endif
                      01749 
                      01750     ifdef ARRAYWRITE_USED
                      01751   LIST
                      01752 ARRAYWRITE movff R5, FSR0L      ; Put the array pointer into FSR0
                      01753         movff   R5 + 1, FSR0H
                      01754         movwf   POSTINC0        ; Put the char into the array and bump up the address
                      01755         movff   FSR0L, R5       ; Save new pointer
                      01756         movff   FSR0H, R5 + 1
                      01757         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      01758 arraywritedone goto DUNN        ; That's it
                      01759   NOLIST
                      01760 DUNN_USED = 1
                      01761     endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01762 
                      01763 ;****************************************************************
                      01764 ;* Pin routines                                                 *
                      01765 ;****************************************************************
                      01766 
                      01767 ;****************************************************************
                      01768 ;* BUTTON     : Read, debounce, auto-repeat button              *
                      01769 ;*                                                              *
                      01770 ;* Input      : W = workspace                                   *
                      01771 ;*            : RS1, RR1 = port                                 *
                      01772 ;*            : RM1 = bit mask                                  *
                      01773 ;*            : R5 = delay                                      *
                      01774 ;*            : R5 + 1 = rate                                   *
                      01775 ;*            : R6 = pressed state                              *
                      01776 ;*            : R6 + 1 = target state                           *
                      01777 ;* Output     : W = workspace                                   *
                      01778 ;*            : Carry = branch state                            *
                      01779 ;*                                                              *
                      01780 ;* Notes      :                                                 *
                      01781 ;****************************************************************
                      01782 
                      01783     ifdef BUTTON_USED
                      01784   LIST
                      01785 BUTTON  movwf   R2              ; Save workspace
                      01786         movff   RS1, FSR0H      ; Point to TRIS
                      01787         movf    RR1, W
                      01788         addlw   12h
                      01789         movwf   FSR0L
                      01790         movf    RM1, W          ; Get bit mask
                      01791         iorwf   INDF0, F        ; Set pin to input
                      01792         movff   RR1, FSR0L      ; Point back to port
                      01793         andwf   INDF0, W        ; Get pin state
                      01794         btfss   R6, 0           ; Compare to pressed state
                      01795         xorwf   RM1, W          ; Flip state
                      01796         bz      buttonup        ; No - Workspace set to zero
                      01797         tstfsz  R2              ; Zero?
                      01798         bra     buttonrepeat    ; No
                      01799         decf    R5, W           ; Debounce?
                      01800         bnc     buttondown      ; No - Workspace set to no auto-repeat (255)
                      01801         movlw   BUTTON_PAUSE    ; Get debounce time
                      01802         call    PAUSEB          ; Wait to debounce
                      01803         movf    R5, W           ; Set workspace to delay value
                      01804         bra     buttondown
                      01805 
                      01806 buttonrepeat incf R2, W         ; Check for 255
                      01807         setf    WREG            ; Preset for 255 exit
                      01808         bz      buttonup        ; 255 - don't repeat
                      01809         decfsz  R2, W           ; Count down workspace
                      01810         bra     buttonup        ; Nothing to do but exit
                      01811         movf    R5 + 1, W       ; Set workspace to rate value
                      01812         bra     buttondown      ; Exit
                      01813 
                      01814 buttonup comf   R6 + 1, F       ; Reverse target state for not down
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01815 buttondown rrcf R6 + 1, F       ; Set carry to target state
                      01816         goto    DUNN
                      01817   NOLIST
                      01818 DUNN_USED = 1
                      01819 PAUSE_USED = 1
                      01820     endif
                      01821 
                      01822 ;****************************************************************
                      01823 ;* COUNT      : Count pulses on a pin                           *
                      01824 ;*                                                              *
                      01825 ;* Input      : RM1, W = bit mask or W = pin                    *
                      01826 ;*            : RS1, RR1 = port                                 *
                      01827 ;*            : R1 = period                                     *
                      01828 ;* Output     : R1, W = count                                   *
                      01829 ;*                                                              *
                      01830 ;* Notes      :                                                 *
                      01831 ;****************************************************************
                      01832 
                      01833     ifdef COUNT_USED
                      01834   LIST
                      01835 COUNT   call    PINR1           ; Convert pin to FSR and bit mask
                      01836   NOLIST
                      01837 PINR1_USED = 1
                      01838 COUNTT_USED = 1
                      01839     endif
                      01840 
                      01841     ifdef COUNTT_USED
                      01842       if (OSC == 3)
                      01843 COUNT_DELAY = 45
                      01844       else
                      01845 COUNT_DELAY = (50 * (OSC)) / 4
                      01846       endif
                      01847   LIST
                      01848 COUNTT  movff   RS1, FSR0H      ; Point to TRIS
                      01849         movf    RR1, W
                      01850         addlw   12h
                      01851         movwf   FSR0L
                      01852         movf    RM1, W          ; Get bit mask
                      01853         iorwf   INDF0, F        ; Set pin to input
                      01854         movff   RR1, FSR0L      ; Point back to port
                      01855         movlw   low (COUNT_DELAY)       ; Calculate count time based on OSC
                      01856         movwf   R3
                      01857         movlw   (COUNT_DELAY) >> 8
                      01858         movwf   R3 + 1
                      01859         clrf    R3 + 2
                      01860         clrf    R3 + 3
                      01861         call    MUL             ; Time is R0 + 1, R0, R2 + 3, R2 + 2, R2 + 1, R2 (hi to lo)
                      01862         clrf    R1              ; Zero count
                      01863         clrf    R1 + 1
                      01864         clrf    R1 + 2
                      01865         clrf    R1 + 3
                      01866         movf    INDF0, W        ; Read pin
                      01867         andwf   RM1, W          ; Isolate it
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01868         movwf   R3              ; Save starting state as last
                      01869 countloop CLRWDT?NOP            ; 1 (20) Keep Watchdog happy
                      01870         movf    INDF0, W        ; 1 Read pin
                      01871         andwf   RM1, W          ; 1 Isolate it
                      01872         xorwf   R3, F           ; 1 Compare with last time (counts both transitions)
                      01873         movwf   R3              ; 1 Save new last state
                      01874         bcf     STATUS, C       ; 1 Clear carry for later adds in case incf is skipped
                      01875         btfss   STATUS, Z       ; 1 / 2
                      01876         incf    R1, F           ; 1 / 0 Count edge
                      01877         clrf    WREG            ; 1
                      01878         addwfc  R1 + 1, F       ; 1
                      01879         addwfc  R1 + 2, F       ; 1
                      01880         addwfc  R1 + 3, F       ; 1
                      01881         decf    R2, F           ; 1 Count time
                      01882         subwfb  R2 + 1, F       ; 1
                      01883         subwfb  R2 + 2, F       ; 1
                      01884         subwfb  R2 + 3, F       ; 1
                      01885         subwfb  R0, F           ; 1
                      01886         subwfb  R0 + 1, F       ; 1
                      01887         bc      countloop       ; 2
                      01888         rrcf    R1 + 3, F       ; Divide edges by 2 to get pulse count (carry clear)
                      01889         rrcf    R1 + 2, F
                      01890         rrcf    R1 + 1, F
                      01891         rrcf    R1, W           ; Result to W
                      01892         goto    DUNN
                      01893   NOLIST
                      01894 DUNN_USED = 1
                      01895 MUL_USED = 1
                      01896     endif
                      01897 
                      01898 ;****************************************************************
                      01899 ;* DEBUGDEC   : Send decimal to DEBUG                           *
                      01900 ;*                                                              *
                      01901 ;* Input      : R2 = value                                      *
                      01902 ;* Output     : None                                            *
                      01903 ;*                                                              *
                      01904 ;* Notes      : 16 bits                                         *
                      01905 ;****************************************************************
                      01906 
                      01907     ifdef DEBUGDECB_USED
                      01908   LIST
                      01909 DEBUGDECB clrf  R2 + 1          ; Zero high value
                      01910   NOLIST
                      01911 DEBUGDEC_USED = 1
                      01912     endif
                      01913 
                      01914     ifdef DEBUGDEC_USED
                      01915   LIST
                      01916 DEBUGDEC movwf  R2              ; Save low value
                      01917         bsf     GOP, 7          ; Set blanking on
                      01918         movlw   high 10000      ; Find 10,000s
                      01919         movwf   R1 + 1
                      01920         movlw   low 10000
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01921         rcall   debugdig        ; Do the work
                      01922         movlw   high 1000       ; Find 1,000s
                      01923         movwf   R1 + 1
                      01924         movlw   low 1000
                      01925         rcall   debugdig        ; Do the work
                      01926         clrf    R1 + 1          ; Find 100s
                      01927         movlw   100
                      01928         rcall   debugdig        ; Do the work
                      01929         clrf    R1 + 1          ; Find 10s
                      01930         movlw   10
                      01931         rcall   debugdig        ; Do the work
                      01932         movf    R2, W           ; Get the 1s
                      01933         bra     debuga          ; Send the 1s
                      01934 
                      01935 debugdig movwf  R1              ; Save last piece
                      01936         movf    R2 + 1, W       ; Move remainder to dividend
                      01937         movwf   R0 + 1
                      01938         movf    R2, W
                      01939         movwf   R0
                      01940         clrf    R0 + 2          ; Zero top locations
                      01941         clrf    R0 + 3
                      01942         clrf    R1 + 2
                      01943         clrf    R1 + 3
                      01944         call    DIV             ; Do the math
                      01945         tstfsz  WREG            ; If zero, goto blank check
                      01946         bcf     GOP, 7          ; Not zero so clear blank
                      01947         btfsc   GOP, 7          ; If blanking on, don't send
                      01948         return
                      01949 debuga  addlw   '0'             ; Add ASCII offset
                      01950   NOLIST
                      01951         ifdef DEBUGJ_USED
                      01952   LIST
                      01953         bra     DEBUG
                      01954   NOLIST
                      01955       endif
                      01956 DIV_USED = 1
                      01957 DEBUG_USED = 1
                      01958     endif
                      01959 
                      01960 ;****************************************************************
                      01961 ;* DEBUG      : Debug to fixed pin at fixed baud rate           *
                      01962 ;*                                                              *
                      01963 ;* Input      : W = char                                        *
                      01964 ;* Output     : None                                            *
                      01965 ;*                                                              *
                      01966 ;* Notes      :                                                 *
                      01967 ;****************************************************************
                      01968 
                      01969     ifdef DEBUGJ_USED
                      01970   LIST
                      01971 DEBUGJ  movf    FSR0L, W        ; Jumpman entry
                      01972   NOLIST
                      01973 DEBUG_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01974     endif
                      01975 
                      01976     ifdef DEBUG_USED
                      01977   LIST
                      01978 DEBUG   movwf   R1              ; Save data to send
                      01979         bcf     (DEBUG_REG) + 12h, DEBUG_BIT    ; Set pin to output
                      01980         movlw   9               ; 1 start bit + 8 data bits
                      01981         movwf   R1 + 1
                      01982         bcf     STATUS, C       ; Start bit low
                      01983 debugloop rcall debugbit        ; 9 (13) Send the bit
                      01984         rrcf    R1, F           ; 1 Move to next bit
                      01985         decfsz  R1 + 1, F       ; 1 / 2 Do next bit, if any
                      01986         bra     debugloop       ; 2 / 0
                      01987         bsf     STATUS, C       ; 1 Stop bit high
                      01988         rcall   debugbit        ; 9 Send stop bit
                      01989       ifdef DEBUG_PACING
                      01990         movlw   (DEBUG_PACING) >> 8
                      01991         movwf   R0 + 1
                      01992         movlw   low (DEBUG_PACING)
                      01993         call    PAUSEUS         ; Delay for character pacing
                      01994       endif
                      01995         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      01996         goto    DUNN
                      01997 
                      01998 debugbit btfsc  STATUS, C       ; 1 / 2 (7) Bit on or off?
                      01999         bra     debugbh         ; 2
                      02000         nop                     ; 1 Nominalize time
                      02001       if (DEBUG_MODE == 1)
                      02002         bsf     DEBUG_REG, DEBUG_BIT    ; 1 Set inverted low bit
                      02003       else
                      02004         bcf     DEBUG_REG, DEBUG_BIT    ; 1 Set true low bit
                      02005       endif
                      02006         bra     debugdelay      ; 3 Delay rest of bit time
                      02007 debugbh
                      02008       if (DEBUG_MODE == 1)
                      02009         bcf     DEBUG_REG, DEBUG_BIT    ; 1 Set inverted high bit
                      02010       else
                      02011         bsf     DEBUG_REG, DEBUG_BIT    ; 1 Set true high bit
                      02012       endif
                      02013         bra     debugdelay      ; 3 Delay rest of bit time
                      02014   NOLIST
                      02015 DEBUGDELAY_USED = 1
                      02016 DUNN_USED = 1
                      02017 PAUSEUS_USED = 1
                      02018     endif
                      02019 
                      02020 ;****************************************************************
                      02021 ;* DEBUGIN    : Debug input from fixed pin at fixed baud rate   *
                      02022 ;*                                                              *
                      02023 ;* Input      : R6 = timeout                                    *
                      02024 ;* Output     : W = char                                        *
                      02025 ;*                                                              *
                      02026 ;* Notes      : C clear if timed out.                           *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02027 ;****************************************************************
                      02028 
                      02029 ; DEBUG_DELAY = us/bit - ((cycles used in routine * 4) / OSC)
                      02030       if (OSC == 3)
                      02031 DEBUG_DELAY = (1000000 / (DEBUG_BAUD)) - 14
                      02032       else
  00000193            02033 DEBUG_DELAY = (1000000 / (DEBUG_BAUD)) - (52 / (OSC))
                      02034       endif
                      02035 
                      02036     ifdef DEBUGINTO_USED
                      02037       if (OSC == 3)
                      02038 DEBUGINTO_DELAY = 111
                      02039       else
                      02040 DEBUGINTO_DELAY = ((125 * (OSC)) / 4) - 1
                      02041       endif
                      02042   LIST
                      02043 DEBUGINTO bsf   (DEBUGIN_REG) + 12h, DEBUGIN_BIT        ; Set pin to input
                      02044         movf    R6, W           ; Move timeout so it doesn't get wrecked
                      02045         movwf   R0
                      02046         movf    R6 + 1, W
                      02047         movwf   R0 + 1
                      02048         clrf    R1              ; Start off inner loop counter at zero
                      02049         clrf    R1 + 1
                      02050 debugintoloop CLRWDT?NOP        ; 1 (8, 16) Keep Watchdog timer clear
                      02051       if (DEBUGIN_MODE == 1)
                      02052         btfsc   DEBUGIN_REG, DEBUGIN_BIT        ; 2 Check for inverted start bit
                      02053       else
                      02054         btfss   DEBUGIN_REG, DEBUGIN_BIT        ; 2 Check for true start bit
                      02055       endif
                      02056         bra     debuginstart    ; We're started
                      02057         clrf    WREG            ; 1 For subtracts
                      02058         decf    R1, F           ; 1
                      02059         subwfb  R1 + 1, F       ; 1
                      02060         bc      debugintoloop   ; 2 / 1 End of inner loop
                      02061         decf    R0, F           ; 1
                      02062         subwfb  R0 + 1, F       ; 1
                      02063         bnc     debugindone     ; 1 Timed out (C clear)
                      02064         movlw   low (DEBUGINTO_DELAY)   ; 1 Reset inside loop counter
                      02065         movwf   R1              ; 1
                      02066         movlw   low ((DEBUGINTO_DELAY) >> 8)    ; 1
                      02067         movwf   R1 + 1          ; 1
                      02068         bra     debugintoloop   ; 2 End of outer loop
                      02069   NOLIST
                      02070 DEBUGINX_USED = 1
                      02071     endif
                      02072 
                      02073     ifdef DEBUGIN_USED
                      02074   LIST
                      02075 DEBUGIN
                      02076         bsf     (DEBUGIN_REG) + 12h, DEBUGIN_BIT        ; Set pin to input
                      02077 debuginsloop CLRWDT?            ; Keep Watchdog timer clear
                      02078       if (DEBUGIN_MODE == 1)
                      02079         btfss   DEBUGIN_REG, DEBUGIN_BIT        ; Wait for inverted start bit
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02080       else
                      02081         btfsc   DEBUGIN_REG, DEBUGIN_BIT        ; Wait for true start bit
                      02082       endif
                      02083         bra     debuginsloop
                      02084   NOLIST
                      02085 DEBUGINX_USED = 1
                      02086     endif
                      02087 
                      02088     ifdef DEBUGINX_USED
                      02089   LIST
                      02090 debuginstart movlw (DEBUG_DELAY) >> 10  ; Wait 1/4 bit time
                      02091         movwf   R0 + 1
                      02092         movlw   low ((DEBUG_DELAY) >> 2)
                      02093         call    PAUSEUS
                      02094         movlw   8               ; 8 bits to a byte
                      02095         movwf   R1 + 1          ; Bit counter
                      02096 debuginloop rcall debugdelay    ; 3 (13) Wait bit time
                      02097         bcf     STATUS, C       ; 1 Start with C clear
                      02098       if (DEBUGIN_MODE == 1)
                      02099         btfss   DEBUGIN_REG, DEBUGIN_BIT        ; 1 / 2 Get an inverted bit
                      02100       else
                      02101         btfsc   DEBUGIN_REG, DEBUGIN_BIT        ; 1 / 2 Get a true bit
                      02102       endif
                      02103         bsf     STATUS, C       ; 1 / 0 Set C for bit
                      02104         rrcf    R1, F           ; 1 Move bit into byte
                      02105         nop                     ; 1 Burn some time
                      02106         bra     $ + 2           ; 2 Burn more time
                      02107         decfsz  R1 + 1, F       ; 1 / 2 More bits?
                      02108         bra     debuginloop     ; 2 / 0 Yes
                      02109         rcall   debugdelay      ; Delay to stop bit
                      02110         bsf     STATUS, C       ; Indicate not timed out (C set)
                      02111         movf    R1, W           ; Get char to W
                      02112 debugindone goto DUNN
                      02113   NOLIST
                      02114 DEBUGDELAY_USED = 1
                      02115 DUNN_USED = 1
                      02116     endif
                      02117 
                      02118     ifdef DEBUGDELAY_USED
                      02119   LIST
                      02120 debugdelay movlw (DEBUG_DELAY) >> 8     ; 1 (1) Delay rest of bit time
                      02121         movwf   R0 + 1          ; 1
                      02122         movlw   low (DEBUG_DELAY)       ; 1
                      02123         goto    PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      02124   NOLIST
                      02125 PAUSEUS_USED = 1
                      02126     endif
                      02127 
                      02128 ;****************************************************************
                      02129 ;* DTMFOUT    : Send DTMF tone                                  *
                      02130 ;*                                                              *
                      02131 ;* Input      : W = tone number                                 *
                      02132 ;*            : RS1, RR1 = port                                 *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02133 ;*            : RM1 = bit mask                                  *
                      02134 ;*            : RR2, RM2 = on time                              *
                      02135 ;*            : R5 = off time                                   *
                      02136 ;* Output     : None                                            *
                      02137 ;*                                                              *
                      02138 ;* Notes      : Works best with 20MHz oscillator.               *
                      02139 ;****************************************************************
                      02140 
                      02141     ifdef DTMFOUT_USED
                      02142   LIST
                      02143 DTMFOUT andlw   0fh             ; Isolate lower 4 bits of tone number
                      02144         addlw   low (dtmfxlattbl)       ; Plus table address
                      02145         movwf   TBLPTRL         ; That's table pointer low
                      02146         clrf    TBLPTRH         ; Start table pointer high at zero
                      02147         movlw   high (dtmfxlattbl)      ; Get high address of jump table
                      02148         addwfc  TBLPTRH, F      ; Set table pointer high
                      02149         clrf    TBLPTRU         ; In first 32K words (since Sin has to be)
                      02150         tblrd   *               ; Read the location
                      02151         movf    TABLAT, W       ; Result to W
                      02152         movwf   R0              ; Save it for second get
                      02153         rcall   dtmfgetfreq     ; Get freq 2
                      02154         movwf   R3 + 1          ; Save high byte of freq 2
                      02155         movf    TABLAT, W       ; Get low byte of freq 2
                      02156         movwf   R3              ; Save it
                      02157         swapf   R0, W           ; Point to other freq
                      02158         rcall   dtmfgetfreq     ; Get freq 1
                      02159         movwf   R2 + 1          ; Save high byte of freq 1
                      02160         movf    TABLAT, W       ; Get low byte of freq 1
                      02161         rcall   FREQOUT         ; Play the tones
                      02162         movf    R5 + 1, W       ; Get off time
                      02163         movwf   R1 + 1
                      02164         movf    R5, W
                      02165         goto    PAUSEW          ; Exit waiting off time
                      02166 
                      02167 dtmfxlattbl db  0a6h, 080h      ; 0 7, 1 0
                      02168         db      0a0h, 0c0h      ; 2 4, 3 8
                      02169         db      082h, 0a2h      ; 4 1, 5 5
                      02170         db      0c2h, 084h      ; 6 9, 7 2
                      02171         db      0a4h, 0c4h      ; 8 6, 9 10
                      02172         db      086h, 0c6h      ; * 3, # 11
                      02173         db      0e0h, 0e2h      ; A 12, B 13
                      02174         db      0e4h, 0e6h      ; C 14, D 15
                      02175 
                      02176 dtmfgetfreq andlw 0fh           ; Isolate lower 4 bits of frequency number
                      02177         addlw   low (dtmffreqtbl)       ; Plus table address
                      02178         movwf   TBLPTRL         ; That's table pointer low
                      02179         clrf    TBLPTRH         ; Start table pointer high at zero
                      02180         movlw   high (dtmffreqtbl)      ; Get high address of jump table
                      02181         addwfc  TBLPTRH, F      ; Set table pointer high
                      02182         clrf    TBLPTRU         ; In first 32K words (since Sin has to be)
                      02183         tblrd   *+              ; Read the location and bump to next
                      02184         movf    TABLAT, W       ; Result to W
                      02185         tblrd   *               ; Read next location to TABLAT
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02186         return
                      02187 
                      02188 dtmffreqtbl db  high 697, low 697
                      02189         db      high 770, low 770
                      02190         db      high 852, low 852
                      02191         db      high 941, low 941
                      02192         db      high 1209, low 1209
                      02193         db      high 1336, low 1336
                      02194         db      high 1477, low 1477
                      02195         db      high 1633, low 1633
                      02196   NOLIST
                      02197 FREQOUT_USED = 1
                      02198 PAUSE_USED = 1
                      02199     endif
                      02200 
                      02201 ;****************************************************************
                      02202 ;* FREQOUT    : Synthesize frequency(s)                         *
                      02203 ;*                                                              *
                      02204 ;* Input      : W = frequency 1 low                             *
                      02205 ;*            : RS1, RR1 = port                                 *
                      02206 ;*            : RM1 = bit mask                                  *
                      02207 ;*            : RR2, RM2 = on time                              *
                      02208 ;*            : R2 = frequency 1                                *
                      02209 ;*            : R3 = frequency 2                                *
                      02210 ;* Output     : None                                            *
                      02211 ;*                                                              *
                      02212 ;* Notes      : Works best with 20MHz oscillator.               *
                      02213 ;****************************************************************
                      02214 
                      02215     ifdef FREQOUT_USED
                      02216       if (OSC == 3)
                      02217 FREQ_DELAY = 12
                      02218       else
                      02219 FREQ_DELAY = (250 * (OSC)) / 76
                      02220       endif
                      02221   LIST
                      02222 FREQOUT movwf   R2              ; Save bottom of frequency 1
                      02223         movf    R2 + 1, W       ; Remove .4% from frequency 1
                      02224         subwf   R2, F
                      02225         btfss   STATUS, C
                      02226         decf    R2 + 1, F
                      02227         movf    R3 + 1, W       ; Remove .4% from frequency 2
                      02228         subwf   R3, F
                      02229         btfss   STATUS, C
                      02230         decf    R3 + 1, F
                      02231       if ((OSC == 4) | (OSC == 8))
                      02232         movlw   5               ; For 4MHz: Frequency * 5
                      02233         mulwf   R2              ; For 8MHz: Frequency * 5 / 2 (below)
                      02234         movff   PRODL, R2
                      02235         movff   PRODH, R0
                      02236         mulwf   R2 + 1  
                      02237         movf    PRODL, W
                      02238         addwf   R0, W
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02239         movwf   R2 + 1
                      02240         movlw   5               ; Do second frequency
                      02241         mulwf   R3
                      02242         movff   PRODL, R3
                      02243         movff   PRODH, R0
                      02244         mulwf   R3 + 1  
                      02245         movf    PRODL, W
                      02246         addwf   R0, W
                      02247         movwf   R3 + 1
                      02248       endif
                      02249       if ((OSC == 40) | (OSC == 8))
                      02250         bcf     STATUS, C       ; For 40MHz: Frequency / 2
                      02251         rrcf    R2 + 1, F       ; For 8MHz: Frequency * 5 (above) / 2
                      02252         rrcf    R2, F
                      02253         bcf     STATUS, C
                      02254         rrcf    R3 + 1, F
                      02255         rrcf    R3, F
                      02256       endif
                      02257       if (OSC == 10)
                      02258         bcf     STATUS, C       ; For 10MHz: Frequency * 2
                      02259         rlcf    R2, F
                      02260         rlcf    R2 + 1, F
                      02261         rlcf    R3, F
                      02262         rlcf    R3 + 1, F
                      02263       endif
                      02264         movf    RR2, W          ; Move on time to R1
                      02265         movwf   R1
                      02266         movf    RM2, W
                      02267         movwf   R1 + 1
                      02268         clrf    R4 + 1          ; Start low counter at 0
                      02269         clrf    R6              ; Zero counter1
                      02270         clrf    R6 + 1
                      02271         clrf    R7              ; Zero counter2
                      02272         clrf    R7 + 1
                      02273         clrf    R4              ; Zero PWM accumulator
                      02274         movff   RS1, FSR0H      ; Point to TRIS
                      02275         movf    RR1, W
                      02276         addlw   12h
                      02277         movwf   FSR0L
                      02278         comf    RM1, W          ; Get inverted bit mask
                      02279         andwf   INDF0, F        ; Set pin to output
                      02280 freqoutloop CLRWDT?NOP          ; 1 (76)
                      02281         bra     $ + 2           ; 2 Waste some time
                      02282         bra     $ + 2           ; 2
                      02283         nop                     ; 1
                      02284         movf    R2, W           ; 1 Add freq1 to counter1
                      02285         addwf   R6, F           ; 1
                      02286         movf    R2 + 1, W       ; 1
                      02287         addwfc  R6 + 1, F       ; 1
                      02288         movf    R3, W           ; 1 Add freq2 to counter2
                      02289         addwf   R7, F           ; 1
                      02290         movf    R3 + 1, W       ; 1
                      02291         addwfc  R7 + 1, F       ; 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02292         movf    R6 + 1, W       ; 1 Get sine of counter1
                      02293         call    SIN             ; 19
                      02294         addlw   80h             ; 1 Offset around 128
                      02295         movwf   R0 + 1          ; 1 Save it for a moment
                      02296         movf    R7 + 1, W       ; 1 Get sine of counter2
                      02297         call    SIN             ; 19
                      02298         addlw   80h             ; 1 offset around 128
                      02299         addwf   R0 + 1, W       ; 1 Add sines together
                      02300         rrcf    WREG, W         ; 1 Divide by 2 with carry
                      02301         addwf   R4, F           ; 1 Add to PWM accumulator
                      02302         movff   RR1, FSR0L      ; 2 Point back to port
                      02303         movf    INDF0, W        ; 1 Grab the port
                      02304         iorwf   RM1, W          ; 1 Put in the bit
                      02305         btfss   STATUS, C       ; 1 / 2 Accumulator overflow?
                      02306         xorwf   RM1, W          ; 1 / 0 No, take out the bit
                      02307         movwf   INDF0           ; 1 Put out new data
                      02308         decf    R4 + 1, W       ; 1 Count time
                      02309         btfss   STATUS, C       ; 1 / 2
                      02310         movlw   FREQ_DELAY      ; 1 / 0 Reset low counter
                      02311         movwf   R4 + 1          ; 1
                      02312         clrf    WREG            ; 1
                      02313         subwfb  R1, F           ; 1
                      02314         subwfb  R1 + 1, F       ; 1
                      02315         bc      freqoutloop     ; 2
                      02316         goto    DUNN
                      02317   NOLIST
                      02318 DUNN_USED = 1
                      02319 ;SIN_USED = 1
                      02320     endif
                      02321 
                      02322 ;****************************************************************
                      02323 ;* HPWM       : Output a pulse width modulated wave in hardware *
                      02324 ;*                                                              *
                      02325 ;* Input      : W = channel 1 - 5                               *
                      02326 ;*            : R1 = frequency                                  *
                      02327 ;*            : R4 = duty cycle                                 *
                      02328 ;* Output     : None                                            *
                      02329 ;*                                                              *
                      02330 ;* Notes      :                                                 *
                      02331 ;****************************************************************
                      02332   ifndef HPWM_OVERRIDE       ; Override defined in PBPINC file
                      02333     ifdef HPWM_USED
                      02334   LIST
                      02335 HPWM    movlb   15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02336         movwf   R4 + 1          ; Save channel
                      02337 
                      02338         ; PS = (FOSC / 1024) / freq
                      02339         ; PR2 = ((FOSC / 4 / PS) / freq) - 1
                      02340         movlw   low ((OSC) * 1000000 / 4)
                      02341         movwf   R0
                      02342         movlw   low (((OSC) * 1000000 / 4) >> 8)
                      02343         movwf   R0 + 1
                      02344         movlw   ((OSC) * 1000000 / 4) >> 16
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02345         movwf   R0 + 2
                      02346         clrf    R0 + 3
                      02347         call    DIV             ; (FOSC / 4) / freq
                      02348         clrf    R5              ; Start prescaler storage, R5, at PS = 1
                      02349         movf    R0 + 1, W       ; Get PS info to W
                      02350         bz      hpwmpsok        ; PS = 1 is good
                      02351         bsf     R5, T2CKPS0     ; Not 0 so set PS = 4
                      02352         rcall   hpwmdiv4        ; PR2 / 4 (PS = 4 or 16)
                      02353         addlw   -4              ; Check for R0 + 1 >= 4
                      02354         bnc     hpwmpsok
                      02355         bsf     R5, T2CKPS1     ; >= 4 so set PS = 16
                      02356         rcall   hpwmdiv4        ; PR2 / 4 (PS = 16)
                      02357 hpwmpsok decf   R0, F           ; - 1, R0 will be PR2 or PR4
                      02358 
                      02359         ; CCP = ((PR2 + 1) * 4) */ duty cycle (10 bit result)
                      02360         ; Result works out to be ((PR2 + 1) * duty cycle) / 64
                      02361         incfsz  R4, W           ; Check for duty cycle = 255
                      02362         bra     hpwmmul         ; Not 255
                      02363         setf    PRODH           ; Make it on all the time
                      02364         setf    PRODL
                      02365         bra     hpwmch1
                      02366 hpwmmul movf    R4, W           ; Preset for PRODHL = 256 * duty cycle (same as shift up 8)
                      02367         movwf   PRODH
                      02368         clrf    PRODL
                      02369         incfsz  R0, W           ; W = PR2 + 1
                      02370         mulwf   R4              ; PRODHL = (PR2 + 1) * duty cycle
                      02371 
                      02372         ; Find correct routine for selected channel
                      02373 hpwmch1 movlb   0fh             ; Select bank 15 for registers outside of access bank
                      02374         decfsz  R4 + 1, F
                      02375         bra     hpwmch2         ; Check next channel
                      02376         movf    CCP1CON, W      ; Get ready to set CCPCON
                      02377         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02378         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02379         bsf     WREG, 5
                      02380         btfsc   PRODL, 6
                      02381         bsf     WREG, 4
                      02382         iorlw   0ch             ; Set PWM mode
                      02383         movff   PRODH, CCPR1L   ; Set top 8 CCP bits
                      02384         movwf   CCP1CON         ; Finally set CCPCON
                      02385         bcf     (CCP1_REG) + 12h, CCP1_BIT      ; Set CCP to output
                      02386         clrf    R5 + 1          ; Clear timer selector bits
                      02387           ifdef CCPTMRS0
                      02388         btfsc   CCPTMRS0, C1TSEL0
                      02389         bsf     R5 + 1, 0
                      02390         btfsc   CCPTMRS0, C1TSEL0 + 1
                      02391         bsf     R5 + 1, 1
                      02392         btfsc   CCPTMRS0, C1TSEL0 + 2
                      02393         bsf     R5 + 1, 2
                      02394           else
                      02395             ifdef T4CON
                      02396         btfsc   T3CON, T3CCP1   ; Both bits set selects TMR4, otherwise TMR2
                      02397         bsf     R5 + 1, 0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02398         btfss   T3CON, T3CCP2
                      02399         bcf     R5 + 1, 0
                      02400             endif
                      02401           endif
                      02402         bra     hpwmtmr
                      02403 hpwmch2
                      02404       ifdef CCP2CON
                      02405         decfsz  R4 + 1, F
                      02406         bra     hpwmch3         ; Check next channel
                      02407         movf    CCP2CON, W      ; Get ready to set CCPCON
                      02408         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02409         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02410         bsf     WREG, 5
                      02411         btfsc   PRODL, 6
                      02412         bsf     WREG, 4
                      02413         iorlw   0ch             ; Set PWM mode
                      02414         movff   PRODH, CCPR2L   ; Set top 8 CCP bits
                      02415         movwf   CCP2CON         ; Finally set CCPCON
                      02416         bcf     (CCP2_REG) + 12h, CCP2_BIT      ; Set CCP to output
                      02417         clrf    R5 + 1          ; Clear timer selector bits
                      02418           ifdef CCPTMRS0
                      02419         btfsc   CCPTMRS0, C2TSEL0
                      02420         bsf     R5 + 1, 0
                      02421         btfsc   CCPTMRS0, C2TSEL0 + 1
                      02422         bsf     R5 + 1, 1
                      02423         btfsc   CCPTMRS0, C2TSEL0 + 2
                      02424         bsf     R5 + 1, 2
                      02425           else
                      02426             ifdef T4CON
                      02427         btfsc   T3CON, T3CCP1   ; Low bit set selects TMR4, otherwise TMR2
                      02428         bsf     R5 + 1, 0
                      02429             endif
                      02430           endif
                      02431         bra     hpwmtmr
                      02432 hpwmch3
                      02433       endif
                      02434       ifdef CCP3CON
                      02435         decfsz  R4 + 1, F
                      02436         bra     hpwmch4         ; Check next channel
                      02437         movf    CCP3CON, W      ; Get ready to set CCPCON
                      02438         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02439         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02440         bsf     WREG, 5
                      02441         btfsc   PRODL, 6
                      02442         bsf     WREG, 4
                      02443         iorlw   0ch             ; Set PWM mode
                      02444         movff   PRODH, CCPR3L   ; Set top 8 CCP bits
                      02445         movwf   CCP3CON         ; Finally set CCPCON
                      02446         bcf     (CCP3_REG) + 12h, CCP3_BIT      ; Set CCP to output
                      02447         clrf    R5 + 1          ; Clear timer selector bits
                      02448           ifdef CCPTMRS0
                      02449         btfsc   CCPTMRS0, C3TSEL0
                      02450         bsf     R5 + 1, 0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02451         btfsc   CCPTMRS0, C3TSEL0 + 1
                      02452         bsf     R5 + 1, 1
                      02453           else
                      02454             ifdef T4CON
                      02455         btfsc   T3CON, T3CCP1   ; Either bit set selects TMR4, otherwise TMR2
                      02456         bsf     R5 + 1, 0
                      02457         btfsc   T3CON, T3CCP2
                      02458         bsf     R5 + 1, 0
                      02459             endif
                      02460           endif
                      02461         bra     hpwmtmr
                      02462 hpwmch4
                      02463       endif
                      02464       ifdef CCP4CON
                      02465         decfsz  R4 + 1, F
                      02466         bra     hpwmch5         ; Check next channel
                      02467         movf    CCP4CON, W      ; Get ready to set CCPCON
                      02468         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02469         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02470         bsf     WREG, 5
                      02471         btfsc   PRODL, 6
                      02472         bsf     WREG, 4
                      02473         iorlw   0ch             ; Set PWM mode
                      02474         movff   PRODH, CCPR4L   ; Set top 8 CCP bits
                      02475         movwf   CCP4CON         ; Finally set CCPCON
                      02476         bcf     (CCP4_REG) + 12h, CCP4_BIT      ; Set CCP to output
                      02477         clrf    R5 + 1          ; Clear timer selector bits
                      02478           ifdef CCPTMRS1
                      02479         btfsc   CCPTMRS1, C4TSEL0
                      02480         bsf     R5 + 1, 0
                      02481         btfsc   CCPTMRS1, C4TSEL0 + 1
                      02482         bsf     R5 + 1, 1
                      02483           else
                      02484             ifdef T4CON
                      02485         btfsc   T3CON, T3CCP1   ; Either bit set selects TMR4, otherwise TMR2
                      02486         bsf     R5 + 1, 0
                      02487         btfsc   T3CON, T3CCP2
                      02488         bsf     R5 + 1, 0
                      02489             endif
                      02490           endif
                      02491         bra     hpwmtmr
                      02492 hpwmch5
                      02493       endif
                      02494       ifdef CCP5CON
                      02495         decfsz  R4 + 1, F
                      02496         bra     hpwmch6         ; Check next channel
                      02497         movf    CCP5CON, W      ; Get ready to set CCPCON
                      02498         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02499         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02500         bsf     WREG, 5
                      02501         btfsc   PRODL, 6
                      02502         bsf     WREG, 4
                      02503         iorlw   0ch             ; Set PWM mode
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02504         movff   PRODH, CCPR5L   ; Set top 8 CCP bits
                      02505         movwf   CCP5CON         ; Finally set CCPCON
                      02506         bcf     (CCP5_REG) + 12h, CCP5_BIT      ; Set CCP to output
                      02507         clrf    R5 + 1          ; Clear timer selector bits
                      02508           ifdef CCPTMRS1
                      02509         btfsc   CCPTMRS1, C5TSEL0
                      02510         bsf     R5 + 1, 0
                      02511         btfsc   CCPTMRS1, C5TSEL0 + 1
                      02512         bsf     R5 + 1, 1
                      02513           else
                      02514             ifdef T4CON
                      02515         btfsc   T3CON, T3CCP1   ; Either bit set selects TMR4, otherwise TMR2
                      02516         bsf     R5 + 1, 0
                      02517         btfsc   T3CON, T3CCP2
                      02518         bsf     R5 + 1, 0
                      02519             endif
                      02520           endif
                      02521         bra     hpwmtmr
                      02522 hpwmch6
                      02523       endif
                      02524       ifdef CCP6CON
                      02525         decfsz  R4 + 1, F
                      02526         bra     hpwmch7         ; Check next channel
                      02527         movf    CCP6CON, W      ; Get ready to set CCPCON
                      02528         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02529         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02530         bsf     WREG, 5
                      02531         btfsc   PRODL, 6
                      02532         bsf     WREG, 4
                      02533         iorlw   0ch             ; Set PWM mode
                      02534         movff   PRODH, CCPR6L   ; Set top 8 CCP bits
                      02535         movwf   CCP6CON         ; Finally set CCPCON
                      02536         bcf     (CCP6_REG) + 12h, CCP6_BIT      ; Set CCP to output
                      02537         clrf    R5 + 1          ; Clear timer selector bits
                      02538 ;       btfsc   CCPTMRS1, C6TSEL0
                      02539 ;       bsf     R5 + 1, 0
                      02540 ;       btfsc   CCPTMRS1, C6TSEL0 + 1
                      02541 ;       bsf     R5 + 1, 1
                      02542         bra     hpwmtmr
                      02543 hpwmch7
                      02544       endif
                      02545       ifdef CCP7CON
                      02546         decfsz  R4 + 1, F
                      02547         bra     hpwmch8         ; Check next channel
                      02548         movf    CCP7CON, W      ; Get ready to set CCPCON
                      02549         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02550         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02551         bsf     WREG, 5
                      02552         btfsc   PRODL, 6
                      02553         bsf     WREG, 4
                      02554         iorlw   0ch             ; Set PWM mode
                      02555         movff   PRODH, CCPR7L   ; Set top 8 CCP bits
                      02556         movwf   CCP7CON         ; Finally set CCPCON
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02557         bcf     (CCP7_REG) + 12h, CCP7_BIT      ; Set CCP to output
                      02558         clrf    R5 + 1          ; Clear timer selector bits
                      02559         btfsc   CCPTMRS1, C7TSEL0
                      02560         bsf     R5 + 1, 0
                      02561         btfsc   CCPTMRS1, C7TSEL0 + 1
                      02562         bsf     R5 + 1, 1
                      02563         bra     hpwmtmr
                      02564 hpwmch8
                      02565       endif
                      02566       ifdef CCP8CON
                      02567         decfsz  R4 + 1, F
                      02568         bra     hpwmch9         ; Check next channel
                      02569         movf    CCP8CON, W      ; Get ready to set CCPCON
                      02570         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02571         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02572         bsf     WREG, 5
                      02573         btfsc   PRODL, 6
                      02574         bsf     WREG, 4
                      02575         iorlw   0ch             ; Set PWM mode
                      02576         movff   PRODH, CCPR8L   ; Set top 8 CCP bits
                      02577         movwf   CCP8CON         ; Finally set CCPCON
                      02578         bcf     (CCP8_REG) + 12h, CCP8_BIT      ; Set CCP to output
                      02579         clrf    R5 + 1          ; Clear timer selector bits
                      02580         btfsc   CCPTMRS2, C8TSEL0
                      02581         bsf     R5 + 1, 0
                      02582         btfsc   CCPTMRS2, C8TSEL0 + 1
                      02583         bsf     R5 + 1, 1
                      02584         bra     hpwmtmr
                      02585 hpwmch9
                      02586       endif
                      02587       ifdef CCP9CON
                      02588         decfsz  R4 + 1, F
                      02589         bra     hpwmch10        ; Check next channel
                      02590         movf    CCP9CON, W      ; Get ready to set CCPCON
                      02591         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02592         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02593         bsf     WREG, 5
                      02594         btfsc   PRODL, 6
                      02595         bsf     WREG, 4
                      02596         iorlw   0ch             ; Set PWM mode
                      02597         movff   PRODH, CCPR9L   ; Set top 8 CCP bits
                      02598         movwf   CCP9CON         ; Finally set CCPCON
                      02599         bcf     (CCP9_REG) + 12h, CCP9_BIT      ; Set CCP to output
                      02600         clrf    R5 + 1          ; Clear timer selector bits
                      02601         btfsc   CCPTMRS2, C9TSEL0
                      02602         bsf     R5 + 1, 0
                      02603         btfsc   CCPTMRS2, C9TSEL0 + 1
                      02604         bsf     R5 + 1, 1
                      02605         bra     hpwmtmr
                      02606 hpwmch10
                      02607       endif
                      02608       ifdef CCP10CON
                      02609         decfsz  R4 + 1, F
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02610         bra     hpwmdone        ; Must be invalid channel
                      02611         movf    CCP10CON, W     ; Get ready to set CCPCON
                      02612         andlw   0cfh            ; Clear bottom 2 CCP bits
                      02613         btfsc   PRODL, 7        ; Set bottom 2 CCP bits
                      02614         bsf     WREG, 5
                      02615         btfsc   PRODL, 6
                      02616         bsf     WREG, 4
                      02617         iorlw   0ch             ; Set PWM mode
                      02618         movff   PRODH, CCPR10L  ; Set top 8 CCP bits
                      02619         movwf   CCP10CON                ; Finally set CCPCON
                      02620         bcf     (CCP10_REG) + 12h, CCP10_BIT    ; Set CCP to output
                      02621         clrf    R5 + 1          ; Clear timer selector bits
                      02622 ;       btfsc   CCPTMRS2, C10TSEL0
                      02623 ;       bsf     R5 + 1, 0
                      02624 ;       btfsc   CCPTMRS2, C10TSEL0 + 1
                      02625 ;       bsf     R5 + 1, 1
                      02626         bra     hpwmtmr
                      02627       else
                      02628         bra     hpwmdone        ; Invalid channel
                      02629       endif
                      02630 
                      02631 hpwmtmr incf    R5 + 1, F       ; Bump up for timer selection
                      02632 hpwmtmr2 decfsz R5 + 1, F
                      02633         bra     hpwmtmr4        ; Check next timer
                      02634         movf    T2CON, W        ; Get ready to set T2CON
                      02635         andlw   0fch            ; Clear current PS bits
                      02636         iorwf   R5, W           ; Put in new PS bits
                      02637         bsf     WREG, TMR2ON    ; Start the timer
                      02638         movff   R0, PR2         ; Set PR2
                      02639         movwf   T2CON           ; Finally set T2CON
                      02640 hpwmdone goto   DUNN
                      02641 hpwmtmr4
                      02642     ifdef T4CON
                      02643         decfsz  R5 + 1, F
                      02644         bra     hpwmtmr6        ; Check next timer
                      02645         movf    T4CON, W        ; Get ready to set T4CON
                      02646         andlw   0fch            ; Clear current PS bits
                      02647         iorwf   R5, W           ; Put in new PS bits
                      02648         bsf     WREG, TMR4ON    ; Start the timer
                      02649         movff   R0, PR4         ; Set PR4
                      02650         movwf   T4CON           ; Finally set T4CON
                      02651         bra     hpwmdone
                      02652 hpwmtmr6
                      02653     endif
                      02654     ifdef T6CON
                      02655         decfsz  R5 + 1, F
                      02656         bra     hpwmtmr8        ; Check next timer
                      02657         movf    T6CON, W        ; Get ready to set T6CON
                      02658         andlw   0fch            ; Clear current PS bits
                      02659         iorwf   R5, W           ; Put in new PS bits
                      02660         bsf     WREG, TMR6ON    ; Start the timer
                      02661         movff   R0, PR6         ; Set PR6
                      02662         movwf   T6CON           ; Finally set T6CON
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02663         bra     hpwmdone
                      02664 hpwmtmr8
                      02665     endif
                      02666     ifdef T8CON
                      02667         decfsz  R5 + 1, F
                      02668         bra     hpwmtmr10       ; Check next timer
                      02669         movf    T8CON, W        ; Get ready to set T8CON
                      02670         andlw   0fch            ; Clear current PS bits
                      02671         iorwf   R5, W           ; Put in new PS bits
                      02672         bsf     WREG, TMR8ON    ; Start the timer
                      02673         movff   R0, PR8         ; Set PR8
                      02674         movwf   T8CON           ; Finally set T8CON
                      02675         bra     hpwmdone
                      02676 hpwmtmr10
                      02677     endif
                      02678     ifdef T10CON
                      02679         decfsz  R5 + 1, F
                      02680         bra     hpwmtmr12       ; Check next timer
                      02681         movf    T10CON, W       ; Get ready to set T10CON
                      02682         andlw   0fch            ; Clear current PS bits
                      02683         iorwf   R5, W           ; Put in new PS bits
                      02684         bsf     WREG, TMR10ON   ; Start the timer
                      02685         movff   R0, PR10        ; Set PR10
                      02686         movwf   T10CON          ; Finally set T10CON
                      02687         bra     hpwmdone
                      02688 hpwmtmr12
                      02689     endif
                      02690     ifdef T12CON
                      02691         decfsz  R5 + 1, F
                      02692         bra     hpwmdone        ; Invalid timer
                      02693         movf    T12CON, W       ; Get ready to set T12CON
                      02694         andlw   0fch            ; Clear current PS bits
                      02695         iorwf   R5, W           ; Put in new PS bits
                      02696         bsf     WREG, TMR12ON   ; Start the timer
                      02697         movff   R0, PR12        ; Set PR12
                      02698         movwf   T12CON          ; Finally set T12CON
                      02699         bra     hpwmdone
                      02700     else
                      02701         bra     hpwmdone        ; Invalid timer
                      02702     endif
                      02703 
                      02704 hpwmdiv4 rrcf   R0 + 1, F       ; Divide by 4
                      02705         rrcf    R0, F
                      02706         rrcf    R0 + 1, F
                      02707         rrcf    R0, F           ; Only the low byte is ultimately used
                      02708         return
                      02709   NOLIST
                      02710 DIV_USED = 1
                      02711 DUNN_USED = 1
                      02712     endif
                      02713   endif
                      02714 
                      02715 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02716 ;* HSERIN     : Hardware serial in                              *
                      02717 ;*                                                              *
                      02718 ;* Input      : R6 = timeout                                    *
                      02719 ;* Output     : W                                               *
                      02720 ;*            : R4.0 = parity                                   *
                      02721 ;*                                                              *
                      02722 ;* Notes      : C clear if timed out.                           *
                      02723 ;****************************************************************
                      02724 
                      02725     ifdef HSERINTO_USED
                      02726       if (OSC == 3)
                      02727 HSERINTO_DELAY = 111
                      02728       else
                      02729 HSERINTO_DELAY = ((125 * (OSC)) / 4) - 1
                      02730       endif
                      02731   LIST
                      02732 HSERINTO movlb  15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02733       ifdef HSER_CLROERR
                      02734         btfsc   RCSTA, OERR     ; Check for overflow error
                      02735         bcf     RCSTA, CREN     ; Toggle continuous receive to clear error
                      02736         bsf     RCSTA, CREN
                      02737       endif
                      02738         movf    R6, W           ; Move timeout so it doesn't get wrecked
                      02739         movwf   R0
                      02740         movf    R6 + 1, W
                      02741         movwf   R0 + 1
                      02742         clrf    R1              ; Start off inner loop counter at zero
                      02743         clrf    R1 + 1
                      02744 hserintoloop CLRWDT?NOP         ; 1 (8, 16) Keep Watchdog timer clear
                      02745         btfsc   PIR, RCIF       ; 2 Check for char
                      02746         bra     HSERINX         ; We're started
                      02747         clrf    WREG            ; 1 For subtracts
                      02748         decf    R1, F           ; 1
                      02749         subwfb  R1 + 1, F       ; 1
                      02750         bc      hserintoloop    ; 2 / 1 End of inner loop
                      02751         decf    R0, F           ; 1
                      02752         subwfb  R0 + 1, F       ; 1
                      02753         bnc     hserindone      ; 1 Timed out (C clear)
                      02754         movlw   low (HSERINTO_DELAY)    ; 1 Reset inside loop counter
                      02755         movwf   R1              ; 1
                      02756         movlw   low ((HSERINTO_DELAY) >> 8)     ; 1
                      02757         movwf   R1 + 1          ; 1
                      02758         bra     hserintoloop    ; 2 End of outer loop
                      02759   NOLIST
                      02760 HSERINX_USED = 1
                      02761     endif
                      02762 
                      02763     ifdef HSERIN_USED
                      02764   LIST
                      02765 HSERIN  movlb   15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02766       ifdef HSER_CLROERR
                      02767         btfsc   RCSTA, OERR     ; Check for overflow error
                      02768         bcf     RCSTA, CREN     ; Toggle continuous receive to clear error
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02769         bsf     RCSTA, CREN
                      02770       endif
                      02771 hserinloop CLRWDT?NOP           ; Keep Watchdog timer clear
                      02772         btfss   PIR, RCIF       ; Check for char
                      02773         bra     hserinloop      ; Loop till char
                      02774   NOLIST
                      02775 HSERINX_USED = 1
                      02776     endif
                      02777 
                      02778     ifdef HSERINX_USED
                      02779   LIST
                      02780 HSERINX
                      02781       ifdef HSERPARITY_USED
                      02782           if ((HSER_BITS) == 9)
                      02783         rrcf    RCSTA, W        ; Shuffle 9th bit to R4.0
                      02784         rlcf    R4, F           ; (Ends up in R4.1)
                      02785           endif
                      02786       endif
                      02787 
                      02788         movf    RCREG, W        ; Get the char
                      02789 
                      02790       ifdef HSERPARITY_USED
                      02791         rcall   HSERPARITY      ; Calculate the parity
                      02792         rrcf    GOP, F          ; Shuffle parity bit from GOP.0 to R4.0
                      02793         rlcf    R4, F
                      02794           if ((HSER_BITS) != 9)
                      02795         andlw   7fh             ; Get rid of the parity bit
                      02796           else
                      02797         btfsc   R4, 1           ; Add in 9th bit, saved earlier
                      02798         incf    R4, F
                      02799           endif
                      02800           ifdef HSER_ODD
                      02801         incf    R4, F
                      02802           endif
                      02803       endif
                      02804 
                      02805         bsf     STATUS, C       ; Indicate not timed out (C set)
                      02806 hserindone goto DUNN            ; That's it
                      02807   NOLIST
                      02808 DUNN_USED = 1
                      02809 HSERINIT_USED = 1
                      02810     endif
                      02811 
                      02812 ;****************************************************************
                      02813 ;* HSEROUTDEC : Send decimal hardware serial output             *
                      02814 ;*                                                              *
                      02815 ;* Input      : R2 = value                                      *
                      02816 ;* Output     : None                                            *
                      02817 ;*                                                              *
                      02818 ;* Notes      : 16 bits                                         *
                      02819 ;****************************************************************
                      02820 
                      02821     ifdef HSEROUTDECB_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02822   LIST
                      02823 HSEROUTDECB clrf R2 + 1         ; Zero high value
                      02824   NOLIST
                      02825 HSEROUTDEC_USED = 1
                      02826     endif
                      02827 
                      02828     ifdef HSEROUTDEC_USED
                      02829   LIST
                      02830 HSEROUTDEC movwf R2             ; Save low value
                      02831         bsf     GOP, 7          ; Set blanking on
                      02832         movlw   high 10000      ; Find 10,000s
                      02833         movwf   R1 + 1
                      02834         movlw   low 10000
                      02835         rcall   hseroutdig      ; Do the work
                      02836         movlw   high 1000       ; Find 1,000s
                      02837         movwf   R1 + 1
                      02838         movlw   low 1000
                      02839         rcall   hseroutdig      ; Do the work
                      02840         clrf    R1 + 1          ; Find 100s
                      02841         movlw   100
                      02842         rcall   hseroutdig      ; Do the work
                      02843         clrf    R1 + 1          ; Find 10s
                      02844         movlw   10
                      02845         rcall   hseroutdig      ; Do the work
                      02846         movf    R2, W           ; Get the 1s
                      02847         bra     hserouta        ; Send the 1s
                      02848 
                      02849 hseroutdig movwf  R1            ; Save last piece
                      02850         movf    R2 + 1, W       ; Move remainder to dividend
                      02851         movwf   R0 + 1
                      02852         movf    R2, W
                      02853         movwf   R0
                      02854         clrf    R0 + 2          ; Zero top locations
                      02855         clrf    R0 + 3
                      02856         clrf    R1 + 2
                      02857         clrf    R1 + 3
                      02858         call    DIV             ; Do the math
                      02859         tstfsz  WREG            ; If zero, goto blank check
                      02860         bcf     GOP, 7          ; Not zero so clear blank
                      02861         btfsc   GOP, 7          ; If blanking on, don't send
                      02862         return
                      02863 hserouta addlw  '0'             ; Add ASCII offset
                      02864   NOLIST
                      02865         ifdef HSEROUTJ_USED
                      02866   LIST
                      02867         bra     HSEROUT
                      02868   NOLIST
                      02869       endif
                      02870 DIV_USED = 1
                      02871 HSEROUT_USED = 1
                      02872     endif
                      02873 
                      02874 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02875 ;* HSEROUT    : Hardware serial out                             *
                      02876 ;*                                                              *
                      02877 ;* Input      : W = char                                        *
                      02878 ;* Output     : None                                            *
                      02879 ;*                                                              *
                      02880 ;* Notes      :                                                 *
                      02881 ;****************************************************************
                      02882 
                      02883     ifdef HSEROUTJ_USED
                      02884   LIST
                      02885 HSEROUTJ movf   FSR0L, W        ; Jumpman entry
                      02886   NOLIST
                      02887 HSEROUT_USED = 1
                      02888     endif
                      02889 
                      02890     ifdef HSEROUT_USED
                      02891   LIST
                      02892 HSEROUT movlb   15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02893 hseroutloop CLRWDT?             ; Keep Watchdog clear
                      02894         btfss   PIR, TXIF       ; Wait till ready
                      02895         bra     hseroutloop
                      02896 
                      02897       ifdef HSERPARITY_USED
                      02898           if (HSER_BITS != 9)
                      02899         andlw   7fh             ; Clear top bit
                      02900         rcall   HSERPARITY      ; Calculate the parity
                      02901             ifdef HSER_ODD
                      02902         btfss   GOP, 0
                      02903             else
                      02904         btfsc   GOP, 0
                      02905             endif
                      02906         iorlw   80h             ; Set parity
                      02907           else
                      02908         rcall   HSERPARITY      ; Calculate the parity
                      02909         bcf     TXSTA, TX9D     ; Start parity at 0
                      02910             ifdef HSER_ODD
                      02911         btfss   GOP, 0
                      02912             else
                      02913         btfsc   GOP, 0
                      02914             endif
                      02915         bsf     TXSTA, TX9D     ; Set parity in 9th bit
                      02916           endif
                      02917       endif
                      02918 
                      02919         movwf   TXREG           ; Send the char
                      02920         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      02921         goto    DUNN            ; That's it
                      02922   NOLIST
                      02923 DUNN_USED = 1
                      02924 HSERINIT_USED = 1
                      02925     endif
                      02926 
                      02927     ifdef HSERPARITY_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02928   LIST
                      02929 HSERPARITY movwf R0             ; Save char for bit count
                      02930         movlw   8               ; 8 bits to count
                      02931         movwf   R0 + 1
                      02932         movlw   80h             ; Zero parity accumulator (preserve blanking)
                      02933         andwf   GOP, F
                      02934         movf    R0, W           ; Get data back to W for later
                      02935 hserploop rrcf  R0, F
                      02936         btfsc   STATUS, C
                      02937         incf    GOP, F          ; Count a bit
                      02938         decfsz  R0 + 1, F
                      02939         bra     hserploop
                      02940         return
                      02941   NOLIST
                      02942     endif
                      02943 
                      02944 ;****************************************************************
                      02945 ;* HSERIN2    : Hardware serial in 2                            *
                      02946 ;*                                                              *
                      02947 ;* Input      : R6 = timeout                                    *
                      02948 ;* Output     : W                                               *
                      02949 ;*            : R4.0 = parity                                   *
                      02950 ;*                                                              *
                      02951 ;* Notes      : C clear if timed out.                           *
                      02952 ;****************************************************************
                      02953 
                      02954     ifdef HSERIN2TO_USED
                      02955       if (OSC == 3)
                      02956 HSERIN2TO_DELAY = 111
                      02957       else
                      02958 HSERIN2TO_DELAY = ((125 * (OSC)) / 4) - 1
                      02959       endif
                      02960   LIST
                      02961 HSERIN2TO movlb 15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02962       ifdef HSER2_CLROERR
                      02963         btfsc   RCSTA2, OERR    ; Check for overflow error
                      02964         bcf     RCSTA2, CREN    ; Toggle continuous receive to clear error
                      02965         bsf     RCSTA2, CREN
                      02966       endif
                      02967         movf    R6, W           ; Move timeout so it doesn't get wrecked
                      02968         movwf   R0
                      02969         movf    R6 + 1, W
                      02970         movwf   R0 + 1
                      02971         clrf    R1              ; Start off inner loop counter at zero
                      02972         clrf    R1 + 1
                      02973 hserin2toloop CLRWDT?NOP        ; 1 (8, 16) Keep Watchdog timer clear
                      02974         btfsc   PIR3, RC2IF     ; 2 Check for char
                      02975         bra     HSERIN2X        ; We have one
                      02976         clrf    WREG            ; 1 For subtracts
                      02977         decf    R1, F           ; 1
                      02978         subwfb  R1 + 1, F       ; 1
                      02979         bc      hserin2toloop   ; 2 / 1 End of inner loop
                      02980         decf    R0, F           ; 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02981         subwfb  R0 + 1, F       ; 1
                      02982         bnc     hserin2done     ; 1 Timed out (C clear)
                      02983         movlw   low (HSERIN2TO_DELAY)   ; 1 Reset inside loop counter
                      02984         movwf   R1              ; 1
                      02985         movlw   low ((HSERIN2TO_DELAY) >> 8)    ; 1
                      02986         movwf   R1 + 1          ; 1
                      02987         bra     hserin2toloop   ; 2 End of outer loop
                      02988   NOLIST
                      02989 HSERIN2X_USED = 1
                      02990     endif
                      02991 
                      02992     ifdef HSERIN2_USED
                      02993   LIST
                      02994 HSERIN2 movlb   15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      02995       ifdef HSER2_CLROERR
                      02996         btfsc   RCSTA2, OERR    ; Check for overflow error
                      02997         bcf     RCSTA2, CREN    ; Toggle continuous receive to clear error
                      02998         bsf     RCSTA2, CREN
                      02999       endif
                      03000 hserin2loop CLRWDT?NOP          ; Keep Watchdog timer clear
                      03001         btfss   PIR3, RC2IF     ; Check for char
                      03002         bra     hserin2loop     ; Loop till char
                      03003   NOLIST
                      03004 HSERIN2X_USED = 1
                      03005     endif
                      03006 
                      03007     ifdef HSERIN2X_USED
                      03008   LIST
                      03009 HSERIN2X
                      03010       ifdef HSER2PARITY_USED
                      03011           if ((HSER2_BITS) == 9)
                      03012         rrcf    RCSTA2, W       ; Shuffle 9th bit to R4.0
                      03013         rlcf    R4, F           ; (Ends up in R4.1)
                      03014           endif
                      03015       endif
                      03016 
                      03017         movf    RCREG2, W        ; Get the char
                      03018 
                      03019       ifdef HSER2PARITY_USED
                      03020         rcall   HSER2PARITY     ; Calculate the parity
                      03021         rrcf    GOP, F          ; Shuffle parity bit from GOP.0 to R4.0
                      03022         rlcf    R4, F
                      03023           if ((HSER2_BITS) != 9)
                      03024         andlw   7fh             ; Get rid of the parity bit
                      03025           else
                      03026         btfsc   R4, 1           ; Add in 9th bit, saved earlier
                      03027         incf    R4, F
                      03028           endif
                      03029           ifdef HSER2_ODD
                      03030         incf    R4, F
                      03031           endif
                      03032       endif
                      03033 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03034         bsf     STATUS, C       ; Indicate not timed out (C set)
                      03035 hserin2done goto DUNN           ; That's it
                      03036   NOLIST
                      03037 DUNN_USED = 1
                      03038 HSER2INIT_USED = 1
                      03039     endif
                      03040 
                      03041 ;****************************************************************
                      03042 ;* HSEROUT2DEC : Send decimal hardware serial output 2          *
                      03043 ;*                                                              *
                      03044 ;* Input      : R2 = value                                      *
                      03045 ;* Output     : None                                            *
                      03046 ;*                                                              *
                      03047 ;* Notes      : 16 bits                                         *
                      03048 ;****************************************************************
                      03049 
                      03050     ifdef HSEROUT2DECB_USED
                      03051   LIST
                      03052 HSEROUT2DECB clrf R2 + 1        ; Zero high value
                      03053   NOLIST
                      03054 HSEROUT2DEC_USED = 1
                      03055     endif
                      03056 
                      03057     ifdef HSEROUT2DEC_USED
                      03058   LIST
                      03059 HSEROUT2DEC movwf R2            ; Save low value
                      03060         bsf     GOP, 7          ; Set blanking on
                      03061         movlw   high 10000      ; Find 10,000s
                      03062         movwf   R1 + 1
                      03063         movlw   low 10000
                      03064         rcall   hserout2dig     ; Do the work
                      03065         movlw   high 1000       ; Find 1,000s
                      03066         movwf   R1 + 1
                      03067         movlw   low 1000
                      03068         rcall   hserout2dig     ; Do the work
                      03069         clrf    R1 + 1          ; Find 100s
                      03070         movlw   100
                      03071         rcall   hserout2dig     ; Do the work
                      03072         clrf    R1 + 1          ; Find 10s
                      03073         movlw   10
                      03074         rcall   hserout2dig     ; Do the work
                      03075         movf    R2, W           ; Get the 1s
                      03076         bra     hserout2a       ; Send the 1s
                      03077 
                      03078 hserout2dig movwf  R1           ; Save last piece
                      03079         movf    R2 + 1, W       ; Move remainder to dividend
                      03080         movwf   R0 + 1
                      03081         movf    R2, W
                      03082         movwf   R0
                      03083         clrf    R0 + 2          ; Zero top locations
                      03084         clrf    R0 + 3
                      03085         clrf    R1 + 2
                      03086         clrf    R1 + 3
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03087         call    DIV             ; Do the math
                      03088         tstfsz  WREG            ; If zero, goto blank check
                      03089         bcf     GOP, 7          ; Not zero so clear blank
                      03090         btfsc   GOP, 7          ; If blanking on, don't send
                      03091         return
                      03092 hserout2a addlw  '0'            ; Add ASCII offset
                      03093   NOLIST
                      03094         ifdef HSEROUT2J_USED
                      03095   LIST
                      03096         bra     HSEROUT2
                      03097   NOLIST
                      03098       endif
                      03099 DIV_USED = 1
                      03100 HSEROUT2_USED = 1
                      03101     endif
                      03102 
                      03103 ;****************************************************************
                      03104 ;* HSEROUT2   : Hardware serial out 2                           *
                      03105 ;*                                                              *
                      03106 ;* Input      : W = char                                        *
                      03107 ;* Output     : None                                            *
                      03108 ;*                                                              *
                      03109 ;* Notes      :                                                 *
                      03110 ;****************************************************************
                      03111 
                      03112     ifdef HSEROUT2J_USED
                      03113   LIST
                      03114 HSEROUT2J movf  FSR0L, W        ; Jumpman entry
                      03115   NOLIST
                      03116 HSEROUT2_USED = 1
                      03117     endif
                      03118 
                      03119     ifdef HSEROUT2_USED
                      03120   LIST
                      03121 HSEROUT2 movlb  15              ; Set bank select to 15 to pick up any SFRs not in Access bank
                      03122 hserout2loop CLRWDT?            ; Keep Watchdog clear
                      03123         btfss   PIR3, TX2IF     ; Wait till ready
                      03124         bra     hserout2loop
                      03125 
                      03126       ifdef HSER2PARITY_USED
                      03127           if (HSER2_BITS != 9)
                      03128         andlw   7fh             ; Clear top bit
                      03129         rcall   HSER2PARITY     ; Calculate the parity
                      03130             ifdef HSER2_ODD
                      03131         btfss   GOP, 0
                      03132             else
                      03133         btfsc   GOP, 0
                      03134             endif
                      03135         iorlw   80h             ; Set parity
                      03136           else
                      03137         rcall   HSER2PARITY     ; Calculate the parity
                      03138         bcf     TXSTA2, TX9D    ; Start parity at 0
                      03139             ifdef HSER2_ODD
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03140         btfss   GOP, 0
                      03141             else
                      03142         btfsc   GOP, 0
                      03143             endif
                      03144         bsf     TXSTA2, TX9D    ; Set parity in 9th bit
                      03145           endif
                      03146       endif
                      03147 
                      03148         movwf   TXREG2          ; Send the char
                      03149         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      03150         goto    DUNN            ; That's it
                      03151   NOLIST
                      03152 DUNN_USED = 1
                      03153 HSER2INIT_USED = 1
                      03154     endif
                      03155 
                      03156     ifdef HSER2PARITY_USED
                      03157   LIST
                      03158 HSER2PARITY movwf R0            ; Save char for bit count
                      03159         movlw   8               ; 8 bits to count
                      03160         movwf   R0 + 1
                      03161         movlw   80h             ; Zero parity accumulator (preserve blanking)
                      03162         andwf   GOP, F
                      03163         movf    R0, W           ; Get data back to W for later
                      03164 hser2ploop rrcf R0, F
                      03165         btfsc   STATUS, C
                      03166         incf    GOP, F          ; Count a bit
                      03167         decfsz  R0 + 1, F
                      03168         bra     hser2ploop
                      03169         return
                      03170   NOLIST
                      03171     endif
                      03172 
                      03173 ;****************************************************************
                      03174 ;* I2CREAD    : Get I2C input                                   *
                      03175 ;*                                                              *
                      03176 ;* Input      : RS1, RR1 = data port                            *
                      03177 ;*            : RM1 = data bit mask                             *
                      03178 ;*            : RS2, RR2 = clock port                           *
                      03179 ;*            : RM2 = clock bit mask                            *
                      03180 ;*            : GOP = command                                   *
                      03181 ;* Output     : W                                               *
                      03182 ;*                                                              *
                      03183 ;* Notes      :                                                 *
                      03184 ;****************************************************************
                      03185 
                      03186     ifdef I2CREADSTRL_USED
                      03187   LIST
                      03188 I2CREADSTRLS bcf STATUS, C      ; Clear carry
                      03189         rlcf    R4 + 1, F       ; Quadruple the byte count for long
                      03190         bra     I2CREADSTRWS    ; Stop after string
                      03191 
                      03192 I2CREADSTRL bcf STATUS, C       ; Clear carry
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03193         rlcf    R4 + 1, F       ; Quadruple the byte count for long
                      03194                                 ; Fall through to don't stop after string
                      03195   NOLIST
                      03196 I2CREADSTRW_USED = 1
                      03197     endif
                      03198 
                      03199     ifdef I2CREADSTRW_USED
                      03200   LIST
                      03201 I2CREADSTRW bcf STATUS, C       ; Clear carry
                      03202         rlcf    R4 + 1, F       ; Double the byte count for word
                      03203         bra     I2CREADSTR      ; Don't stop after string
                      03204 
                      03205 I2CREADSTRWS bcf STATUS, C      ; Clear carry
                      03206         rlcf    R4 + 1, F       ; Double the byte count for word
                      03207                                 ; Fall through to stop after string
                      03208   NOLIST
                      03209 I2CREADSTR_USED = 1
                      03210     endif
                      03211 
                      03212     ifdef I2CREADSTR_USED
                      03213   LIST
                      03214 I2CREADSTRS bsf I2CSTOPSTRFLAG  ; Indicate Stop after this string
                      03215         btfss   I2CSTOPSTRFLAG  ; Skip next always
                      03216 I2CREADSTR bcf  I2CSTOPSTRFLAG  ; Don't Stop
                      03217         movwf   FSR2L           ; Save low byte pointer
                      03218 i2creadstrloop movf R4 + 1, W   ; Get count
                      03219         bcf     STATUS, C       ; Clear carry for OK return
                      03220         bz      i2creaddone     ; Nothing more to do
                      03221         decfsz  R4 + 1, F       ; Count down
                      03222         bra     i2crsread       ; Not last byte
                      03223         btfsc   I2CSTOPSTRFLAG  ; Check for stop after last byte
                      03224         rcall   I2CREADS        ; Get last byte and stop
                      03225         btfss   I2CSTOPSTRFLAG  ; Check for stop after last byte
                      03226 i2crsread rcall I2CREAD         ; Get a byte and don't stop
                      03227         bc      i2creaddone     ; No acknowledge
                      03228         movwf   POSTINC2        ; Store the byte and move up the FSR
                      03229         bra     i2creadstrloop
                      03230   NOLIST
                      03231 I2CREAD_USED = 1
                      03232     endif
                      03233 
                      03234     ifdef I2CREAD_USED
                      03235   LIST
                      03236 I2CREADS bsf    I2CSTOPFLAG     ; Indicate Stop after this byte
                      03237         btfss   I2CSTOPFLAG     ; Skip next always
                      03238 I2CREAD bcf     I2CSTOPFLAG     ; Don't Stop
                      03239         btfsc   I2CREADFLAG     ; Already reading?
                      03240         bra     i2creadip       ; Yes
                      03241         bsf     I2CREADFLAG     ; Indicate read
                      03242         rcall   i2cstart        ; Send Start condition and command
                      03243         bc      i2cstop         ; No acknowledge
                      03244 
                      03245 i2creadip movlw 8               ; 8 bits to a byte
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03246         movwf   R1 + 1          ; Bit counter
                      03247 i2creadloop rcall i2cgetbit     ; Get a bit
                      03248         rlcf    R1, F           ; Put bit away
                      03249         decfsz  R1 + 1, F       ; Do next, if any
                      03250         bra     i2creadloop
                      03251         btfss   I2CSTOPFLAG     ; Send stop?
                      03252         rcall   i2cdal          ; No, send acknowledge
                      03253         rcall   i2cckh          ; Toggle clock in any case
                      03254         rcall   i2cckl
                      03255         btfsc   I2CSTOPFLAG     ; Send stop?
                      03256         rcall   i2cstop         ; Yes, send Stop condition
                      03257         rcall   i2cdah          ; Make sure data ends up as input
                      03258         movf    R1, W           ; Get result to W
                      03259         bcf     STATUS, C       ; Clear carry for OK return
                      03260 i2creaddone goto DUNN
                      03261   NOLIST
                      03262 DUNN_USED = 1
                      03263 I2CWRITE_USED = 1
                      03264     endif
                      03265 
                      03266 ;****************************************************************
                      03267 ;* I2CWRITE   : Send I2C output                                 *
                      03268 ;*                                                              *
                      03269 ;* Input      : W = data or command                             *
                      03270 ;*            : RS1, RR1 = data port                            *
                      03271 ;*            : RM1 = data bit mask                             *
                      03272 ;*            : RS2, RR2 = clock port                           *
                      03273 ;*            : RM2 = clock bit mask                            *
                      03274 ;*            : GOP = command                                   *
                      03275 ;* Output     : None                                            *
                      03276 ;*                                                              *
                      03277 ;* Notes      :                                                 *
                      03278 ;****************************************************************
                      03279 
                      03280     ifdef I2CWRITESTRL_USED
                      03281   LIST
                      03282 I2CWRITESTRLS bcf STATUS, C     ; Clear carry
                      03283         rlcf    R4 + 1, F       ; Quadruple the byte count for long
                      03284         bra     I2CWRITESTRWS   ; Stop after string
                      03285 
                      03286 I2CWRITESTRL bcf STATUS, C      ; Clear carry
                      03287         rlcf    R4 + 1, F       ; Quadruple the byte count for long
                      03288                                 ; Fall through to don't stop after string
                      03289   NOLIST
                      03290 I2CWRITESTRW_USED = 1
                      03291     endif
                      03292 
                      03293     ifdef I2CWRITESTRW_USED
                      03294   LIST
                      03295 I2CWRITESTRW bcf STATUS, C      ; Clear carry
                      03296         rlcf    R4 + 1, F       ; Double the byte count for word
                      03297         bra     I2CWRITESTR     ; Don't stop after string
                      03298 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03299 I2CWRITESTRWS bcf STATUS, C     ; Clear carry
                      03300         rlcf    R4 + 1, F       ; Double the byte count for word
                      03301                                 ; Fall through to stop after string
                      03302   NOLIST
                      03303 I2CWRITESTR_USED = 1
                      03304     endif
                      03305 
                      03306     ifdef I2CWRITESTR_USED
                      03307   LIST
                      03308 I2CWRITESTRS bsf I2CSTOPSTRFLAG ; Indicate Stop after this string
                      03309         btfss   I2CSTOPSTRFLAG  ; Skip next always
                      03310 I2CWRITESTR bcf I2CSTOPSTRFLAG  ; Don't Stop
                      03311         movwf   FSR2L           ; Save low byte pointer
                      03312 i2cwritestrloop decf R4 + 1, F  ; Count down
                      03313         bc      i2cwswrite      ; More left
                      03314         btfsc   I2CSTOPSTRFLAG  ; Stop after last charater?
                      03315         bra     i2cstop         ; Yes
                      03316         bra     i2cwritedone    ; Nothing more to do
                      03317 i2cwswrite movf POSTINC2, W     ; Get a byte
                      03318         rcall   I2CWRITE        ; Send the byte
                      03319         bc      i2cwritedone    ; No acknowledge
                      03320         bra     i2cwritestrloop
                      03321   NOLIST
                      03322 I2CWRITE_USED = 1
                      03323     endif
                      03324 
                      03325     ifdef I2CWRITE_USED
                      03326   LIST
                      03327 I2CWRITES bsf   I2CSTOPFLAG     ; Indicate Stop after this byte
                      03328         btfss   I2CSTOPFLAG     ; Skip next always
                      03329 I2CWRITE bcf    I2CSTOPFLAG     ; Don't Stop
                      03330         btfsc   I2CFIRSTFLAG    ; Check for first I2C char (command)
                      03331         bra     i2cwrite2       ; No
                      03332         andlw   0feh            ; Make sure r/w bit clear
                      03333         movwf   GOP             ; Save command
                      03334         bsf     I2CFIRSTFLAG    ; Indicate not first anymore
                      03335         bcf     STATUS, C       ; Clear carry for OK return
                      03336         bra     i2cwritedone    ; That's it for now
                      03337 
                      03338 i2cwrite2 btfsc I2CWRITEFLAG    ; Already writing?
                      03339         bra     i2cwriteip      ; Yes
                      03340         movwf   R3              ; Save char
                      03341         bsf     I2CWRITEFLAG    ; Indicate write
                      03342         rcall   i2cstart        ; Send Start condition and command
                      03343         bc      i2cstop         ; No acknowledge
                      03344         movf    R3, W           ; Get char back
                      03345 i2cwriteip rcall i2cwritec      ; Write character
                      03346         bc      i2cstop         ; No acknowledge
                      03347         btfss   I2CSTOPFLAG     ; Send stop bit?
                      03348 i2cwritedone goto DUNN          ; No
                      03349 
                      03350 i2cstop rcall   i2cdal          ; 12 Start data low
                      03351         rcall   i2cckh          ; 15 Set clock high (input)
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03352         bcf     I2CFIRSTFLAG    ; 1 Reset first char flag
                      03353         bcf     I2CWRITEFLAG    ; 1 No longer writing
                      03354         bcf     I2CREADFLAG     ; 1 No longer reading either
                      03355         rcall   i2cdah          ; Set data high (input)
                      03356         bra     i2cwritedone
                      03357 
                      03358 i2cdah  movff   RS1, FSR0H      ; 2 (11) Get pointer to data pin
                      03359         incfsz  RR1, W          ; 1 Point to TRIS (never skip, doesn't change flags)
                      03360         movwf   FSR0L           ; 1
                      03361         bsf     FSR0L, 4        ; 1
                      03362         movf    RM1, W          ; 1
                      03363 i2chigh iorwf   PREINC0, F      ; 1 Set high (input)
                      03364         bra     i2chl           ; 2
                      03365 
                      03366 i2cdal  movff   RS1, FSR0H      ; 2 (10) Get pointer to data pin
                      03367         movff   RR1, FSR0L      ; 2
                      03368         comf    RM1, W          ; 1
                      03369 i2clow  andwf   POSTINC0, F     ; 1 Set low, start pointing to TRIS
                      03370         bsf     FSR0L, 4        ; 1
                      03371         andwf   PREINC0, F      ; 1 Set to output
                      03372 i2chl
                      03373       ifndef I2C_SLOW
                      03374         return                  ; 2
                      03375       else
                      03376           if (OSC > 12)
                      03377         movlw   (OSC) / 4       ; 1 Pause ~5us to slow to 100kHz without wrecking C
                      03378         movwf   R0              ; 1
                      03379 i2cslowloop decfsz R0, F        ; 1
                      03380         bra     i2cslowloop     ; 2
                      03381         return                  ; 2
                      03382           else
                      03383         goto    DUNN            ; 6
                      03384           endif
                      03385       endif
                      03386 
                      03387 i2cstart rcall  i2cdah          ; 13 Make sure bus is idle
                      03388         rcall   i2cckh          ; 15
                      03389         rcall   i2cdal          ; 12 Send Start condition
                      03390         rcall   i2cckl          ; 14
                      03391         movf    GOP, W          ; 1 Get command
                      03392         btfsc   I2CREADFLAG     ; 1 / 2 Read?
                      03393         iorlw   1               ; 1 / 0 Yes, put in read bit
                      03394 
                      03395 i2cwritec movwf R1              ; 1 Save data
                      03396         movlw   8               ; 1 8 bits to send
                      03397         movwf   R1 + 1          ; 1 Bit counter
                      03398 i2cwriteloop rlcf R1, F         ; 1 Get a bit to send
                      03399         btfsc   STATUS, C       ; 1 / 2 Skip if no bit
                      03400         rcall   i2cdah          ; 13 / 0 Set bit high (input)
                      03401         btfss   STATUS, C       ; 1 / 2 Skip if bit
                      03402         rcall   i2cdal          ; 12 / 0 Set bit low
                      03403         rcall   i2cckh          ; 15 Set clock high (input)
                      03404         rcall   i2cckl          ; 14 Set clock low
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03405         decfsz  R1 + 1, F       ; 1 / 2 Do next bit, if any
                      03406         bra     i2cwriteloop    ; 2
                      03407         rcall   i2cdah          ; 13 Make sure data high (input)
                      03408 ;       bra     i2cgetbit       ; Get acknowledge (fall through)
                      03409 
                      03410 i2cgetbit rcall i2cckh          ; 15 (34) Set clock high
                      03411         movff   RS1, FSR0H      ; 2 Point to data pin
                      03412         movff   RR1, FSR0L      ; 2
                      03413         movf    RM1, W          ; 1
                      03414         andwf   INDF0, W        ; 1 Isolate pin
                      03415         addlw   -1              ; 1 Move bit to carry
                      03416 ;       bra     i2cckl          ; Set clock low (fall through)
                      03417 
                      03418 i2cckl  movff   RS2, FSR0H      ; 2 (12) Get pointer to clock pin
                      03419         movff   RR2, FSR0L      ; 2
                      03420         comf    RM2, W          ; 1
                      03421         bra     i2clow          ; 7 Finish it up
                      03422 
                      03423       ifndef I2C_SCLOUT
                      03424 i2cckh  movff   RS2, FSR0H      ; 2 (13) Get pointer to clock pin
                      03425 i2chold incfsz  RR2, W          ; 1 Point to TRIS (never skip)
                      03426         movwf   FSR0L           ; 1
                      03427         bsf     FSR0L, 4        ; 1
                      03428         movf    RM2, W          ; 1
                      03429           ifndef I2C_HOLD
                      03430         bra     i2chigh         ; 7 Finish it up
                      03431           else
                      03432         iorwf   PREINC0, F      ; 1 Set high (input)
                      03433         movff   RR2, FSR0L      ; 2 Point back to port
                      03434         andwf   INDF0, W        ; 1 Isolate pin
                      03435         bz      i2chold         ; 1 / 2 Check for still low
                      03436         bra     i2chl           ; 4
                      03437           endif
                      03438       else
                      03439 i2cckh  movff   RS2, FSR0H      ; 2 (13) Get pointer to clock pin
                      03440         movff   RR2, FSR0L      ; 2
                      03441         movf    RM2, W          ; 1
                      03442         iorwf   POSTINC0, F     ; 1 Set high, start pointing to TRIS
                      03443         bsf     FSR0L, 4        ; 1
                      03444         comf    RM2, W          ; 1 Get inverted mask
                      03445         andwf   PREINC0, F      ; 1 Set to output
                      03446         bra     i2chl           ; 4
                      03447       endif
                      03448   NOLIST
                      03449 DUNN_USED = 1
                      03450     endif
                      03451 
                      03452 ;****************************************************************
                      03453 ;* LCDIN      : Read char from LCD RAM                          *
                      03454 ;*                                                              *
                      03455 ;* Input      : None                                            *
                      03456 ;* Output     : W = char                                        *
                      03457 ;*                                                              *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03458 ;* Notes      :                                                 *
                      03459 ;****************************************************************
                      03460 
                      03461     ifdef LCDIN_USED
                      03462   LIST
                      03463 _LCDINCOM bsf   I2CSTOPSTRFLAG  ; Set for command (borrowed flag)
                      03464         btfss   I2CSTOPSTRFLAG  ; Skip next (borrowed flag)
                      03465 LCDIN   bcf     I2CSTOPSTRFLAG  ; Set for data (borrowed flag)
                      03466 
                      03467         movlw   0feh            ; For init if necessary (need do nothing char - LCDCDFLAG cleared on way
                             out)
                      03468         btfss   LCDINITFLAG     ; Has lcd been inititalized?
                      03469         rcall   LCDOUT          ; No, initialize
                      03470 
                      03471         bcf     LCD_EREG, LCD_EBIT      ; Set E low
                      03472         btfsc   I2CSTOPSTRFLAG  ; Command? (borrowed flag)
                      03473         bcf     LCD_RSREG, LCD_RSBIT    ; Set RS low (command)
                      03474         btfss   I2CSTOPSTRFLAG  ; Data? (borrowed flag)
                      03475         bsf     LCD_RSREG, LCD_RSBIT    ; Set RS high (data)
                      03476         bsf     LCD_RWREG, LCD_RWBIT    ; Set RW high (read)
                      03477 
                      03478         bcf     (LCD_EREG) + 12h, LCD_EBIT      ; Set E to output
                      03479         bcf     (LCD_RSREG) + 12h, LCD_RSBIT    ; Set RS to output
                      03480         bcf     (LCD_RWREG) + 12h, LCD_RWBIT    ; Set RW to output
                      03481     if ((LCD_BITS) == 8)
                      03482         setf    (LCD_DREG) + 12h        ; Set port to all input
                      03483     else
                      03484       if ((LCD_DBIT) == 0)
                      03485         movlw   0fh
                      03486       else
                      03487         movlw   0f0h
                      03488       endif
                      03489         iorwf   (LCD_DREG) + 12h, F     ; Set proper half of port to input
                      03490     endif
                      03491 
                      03492     if ((LCD_BITS) == 8)
                      03493         bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03494         nop                     ; Wait for read to setup (> ~320ns)
                      03495       if (OSC > 20)
                      03496         nop
                      03497       endif
                      03498       if (OSC > 32)
                      03499         nop
                      03500       endif
                      03501       if (OSC > 48)
                      03502         bra     $ + 2
                      03503       endif
                      03504         movf    LCD_DREG, W     ; Read the data
                      03505         movwf   R1              ; Save it for the moment
                      03506         bcf     LCD_EREG, LCD_EBIT      ; Not enabled
                      03507     else
                      03508         clrf    R1              ; Zero result
                      03509         bsf     LCDCDFLAG       ; Mark first time (high)
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03510         btfss   LCDCDFLAG       ; First time through only
                      03511 lcdinloop bcf   LCDCDFLAG       ; Indicate second (low) nibble
                      03512 
                      03513         bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03514       if (OSC > 20)
                      03515         nop                     ; Wait for read to setup (> ~320ns)
                      03516       endif
                      03517       if (OSC > 32)
                      03518         nop
                      03519       endif
                      03520       if (OSC > 48)
                      03521         bra     $ + 2
                      03522       endif
                      03523       if ((LCD_DBIT) == 0)
                      03524         movlw   0fh             ; Set mask for lower 4 bits
                      03525       else
                      03526         movlw   0f0h            ; Set mask for upper 4 bits
                      03527       endif
                      03528         andwf   LCD_DREG, W     ; Get data
                      03529         iorwf   R1, F           ; Store in result
                      03530         swapf   R1, F           ; Get to other nibble
                      03531 
                      03532         bcf     LCD_EREG, LCD_EBIT      ; Not enabled - that's four
                      03533 
                      03534         btfsc   LCDCDFLAG
                      03535         bra     lcdinloop       ; Get other 4 from lcd
                      03536 
                      03537       if ((LCD_DBIT) == 0)
                      03538         swapf   R1, F           ; Swap top and bottom nibbles
                      03539       endif
                      03540     endif
                      03541 
                      03542         movlw   LCD_DATAUS      ; Wait for operation to complete
                      03543         btfss   I2CSTOPSTRFLAG  ; If command we don't need to wait (borrowed flag)
                      03544         call    PAUSEUSB
                      03545         movf    R1, W           ; Get char to W
                      03546         goto    DUNN
                      03547   NOLIST
                      03548 DUNN_USED = 1
                      03549 LCDOUT_USED = 1
                      03550 PAUSEUS_USED = 1
                      03551     endif
                      03552 
                      03553 ;****************************************************************
                      03554 ;* LCDOUTDEC  : Send decimal to LCD                             *
                      03555 ;*                                                              *
                      03556 ;* Input      : R2 = value                                      *
                      03557 ;* Output     : None                                            *
                      03558 ;*                                                              *
                      03559 ;* Notes      : 16 bits                                         *
                      03560 ;****************************************************************
                      03561 
                      03562     ifdef LCDOUTDECB_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03563   LIST
                      03564 LCDOUTDECB clrf R2 + 1          ; Zero high value
                      03565   NOLIST
                      03566 LCDOUTDEC_USED = 1
                      03567     endif
                      03568 
                      03569     ifdef LCDOUTDEC_USED
                      03570   LIST
                      03571 LCDOUTDEC movwf R2              ; Save low value
                      03572         bsf     GOP, 7          ; Set blanking on
                      03573         movlw   high 10000      ; Find 10,000s
                      03574         movwf   R1 + 1
                      03575         movlw   low 10000
                      03576         rcall   lcdoutdig       ; Do the work
                      03577         movlw   high 1000       ; Find 1,000s
                      03578         movwf   R1 + 1
                      03579         movlw   low 1000
                      03580         rcall   lcdoutdig       ; Do the work
                      03581         clrf    R1 + 1          ; Find 100s
                      03582         movlw   100
                      03583         rcall   lcdoutdig       ; Do the work
                      03584         clrf    R1 + 1          ; Find 10s
                      03585         movlw   10
                      03586         rcall   lcdoutdig       ; Do the work
                      03587         movf    R2, W           ; Get the 1s
                      03588         bra     lcdouta         ; Send the 1s
                      03589 
                      03590 lcdoutdig movwf R1              ; Save last piece
                      03591         movf    R2 + 1, W       ; Move remainder to dividend
                      03592         movwf   R0 + 1
                      03593         movf    R2, W
                      03594         movwf   R0
                      03595         clrf    R0 + 2          ; Zero top locations
                      03596         clrf    R0 + 3
                      03597         clrf    R1 + 2
                      03598         clrf    R1 + 3
                      03599         call    DIV             ; Do the math
                      03600         tstfsz  WREG            ; If zero, goto blank check
                      03601         bcf     GOP, 7          ; Not zero so clear blank
                      03602         btfsc   GOP, 7          ; If blanking on, don't send
                      03603         return
                      03604 lcdouta addlw   '0'             ; Add ASCII offset
                      03605   NOLIST
                      03606       ifdef LCDOUTJ_USED
                      03607   LIST
                      03608         bra     LCDOUT
                      03609   NOLIST
                      03610       endif
                      03611 DIV_USED = 1
                      03612 LCDOUT_USED = 1
                      03613     endif
                      03614 
                      03615 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03616 ;* LCDOUT     : Send char to LCD                                *
                      03617 ;*                                                              *
                      03618 ;* Input      : W = char                                        *
                      03619 ;* Output     : None                                            *
                      03620 ;*                                                              *
                      03621 ;* Notes      :                                                 *
                      03622 ;****************************************************************
                      03623 
                      03624     ifdef LCDOUTJ_USED
                      03625   LIST
                      03626 LCDOUTJ movf    FSR0L, W        ; Jumpman entry
                      03627   NOLIST
                      03628 LCDOUT_USED = 1
                      03629     endif
                      03630 
                      03631     ifdef LCDOUT_USED
                      03632   LIST
                      03633 LCDOUT  movwf   R3 + 1          ; Save char
                      03634 
                      03635         bcf     LCD_EREG, LCD_EBIT      ; Set E low
                      03636         bcf     LCD_RSREG, LCD_RSBIT    ; Set command register select
                      03637         bcf     LCD_RWREG, LCD_RWBIT    ; Set RW low (write)
                      03638 
                      03639         bcf     (LCD_EREG) + 12h, LCD_EBIT      ; Set E to output
                      03640         bcf     (LCD_RSREG) + 12h, LCD_RSBIT    ; Set RS to output
                      03641         bcf     (LCD_RWREG) + 12h, LCD_RWBIT    ; Set RW to output
                      03642     if ((LCD_BITS) == 8)
                      03643         clrf    (LCD_DREG) + 12h        ; Set port to all output
                      03644     else
                      03645       if ((LCD_DBIT) == 0)
                      03646         movlw   0f0h
                      03647       else
                      03648         movlw   0fh
                      03649       endif
                      03650         andwf   (LCD_DREG) + 12h, F     ; Set proper half of port to output
                      03651         movf    R3 + 1, W       ; Get back char
                      03652     endif
                      03653 
                      03654         btfsc   LCDINITFLAG     ; Has lcd been inititalized?
                      03655         bra     lcdout1         ; Yes
                      03656 
                      03657         movlw   high 15100      ; Wait at least 15ms
                      03658         movwf   R0 + 1
                      03659         movlw   low 15100
                      03660         call    PAUSEUS
                      03661 
                      03662         movlw   33h             ; Init lcd
                      03663         movwf   R3              ; Save char
                      03664         rcall   lcdloop         ; Send init
                      03665 
                      03666         movlw   high 4200       ; Wait at least 4.1ms
                      03667         movwf   R0 + 1
                      03668         movlw   low 4200
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03669         call    PAUSEUS
                      03670 
                      03671         rcall   lcdloop         ; Send init (33) again
                      03672 
                      03673         movlw   100             ; Wait at least 100us
                      03674         call    PAUSEUSB
                      03675 
                      03676         rcall   lcdloop         ; Send init (33) more time
                      03677 
                      03678     if ((LCD_BITS) == 8)
                      03679       if ((LCD_LINES) == 1)
                      03680         movlw   30h             ; 8-bit mode, 1 line, 5x7 font
                      03681       else
                      03682         movlw   38h             ; 8-bit mode, 2+ lines, 5x7 font
                      03683       endif
                      03684     else
                      03685         movlw   22h             ; Send init to 4-bit mode
                      03686         movwf   R3              ; Save character
                      03687         rcall   lcdloop         ; Set interface to 4-bit mode
                      03688       if ((LCD_LINES) == 1)
                      03689         movlw   20h             ; 4-bit mode, 1 line, 5x7 font
                      03690       else
                      03691         movlw   28h             ; 4-bit mode, 2+ lines, 5x7 font
                      03692       endif
                      03693     endif
                      03694         rcall   lcdoutcom       ; Send function set
                      03695 
                      03696         movlw   0ch             ; Display on, no cursor, no blink
                      03697         rcall   lcdoutcom
                      03698 
                      03699         movlw   01h             ; Display clear
                      03700         rcall   lcdoutcom
                      03701 
                      03702         movlw   06h             ; Lcd entry mode set, increment, no shift
                      03703         rcall   lcdoutcom
                      03704 
                      03705         bsf     LCDINITFLAG     ; Set to initialized
                      03706 
                      03707         movf    R3 + 1, W       ; Get saved char back (again)
                      03708         bra     lcdout1
                      03709 
                      03710 lcdoutcom bsf   LCDCDFLAG       ; Set for command
                      03711 
                      03712 lcdout1 movwf   R3              ; Save char
                      03713         btfss   LCDCDFLAG       ; Command this time?
                      03714         bra     lcdchkcd        ; No
                      03715 
                      03716         bcf     LCD_RSREG, LCD_RSBIT    ; Set command register select
                      03717         sublw   3               ; Is it a slow command (clear screen or home)?
                      03718         bnc     lcdsend         ; Short delay
                      03719 
                      03720         rcall   lcdsend         ; Long delay (includes short delay)
                      03721         movlw   high LCD_COMMANDUS      ; Wait for command to complete
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03722         movwf   R0 + 1
                      03723         movlw   low LCD_COMMANDUS
                      03724         call    PAUSEUS
                      03725         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      03726         return
                      03727 
                      03728 lcdchkcd bsf    LCDCDFLAG       ; Indicate first nibble (or command next time)
                      03729         sublw   0feh            ; Command next time? (char still in W)
                      03730         btfsc   STATUS, Z
                      03731         goto    DUNN            ; Yes - nothing to do this time (C set for no timeout for Serout2mod)
                      03732 
                      03733         bsf     LCD_RSREG, LCD_RSBIT    ; Set data register select
                      03734         bra     $ + 2  ;
                      03735 
                      03736 lcdsend
                      03737     if ((LCD_BITS) == 8)
                      03738 lcdloop bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03739         movf    R3, W           ; Get char back
                      03740         movwf   LCD_DREG        ; Write char to the port
                      03741       if (OSC > 16)
                      03742         nop                     ; Minimum 1us enable time
                      03743       endif
                      03744       if (OSC > 20)
                      03745         nop
                      03746       endif
                      03747       if (OSC > 24)
                      03748         bra     $ + 2
                      03749       endif
                      03750       if (OSC > 32)
                      03751         bra     $ + 2
                      03752       endif
                      03753       if (OSC > 40)
                      03754         bra     $ + 2
                      03755       endif
                      03756       if (OSC > 48)
                      03757         bra     $ + 2
                      03758         bra     $ + 2
                      03759       endif
                      03760         bcf     LCDCDFLAG       ; Indicate data next time
                      03761         bcf     LCD_EREG, LCD_EBIT      ; Not enabled
                      03762     else
                      03763 
                      03764       if ((LCD_DBIT) == 0)
                      03765         swapf   R3, F           ; Swap top and bottom nibbles
                      03766       endif
                      03767 
                      03768         btfss   LCDCDFLAG       ; First time through only
                      03769 lcdloop bcf     LCDCDFLAG       ; Indicate second nibble (and data next time)
                      03770 
                      03771         bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03772 
                      03773       if ((LCD_DBIT) == 0)
                      03774         movlw   0f0h            ; Clear lcd data port
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03775       else
                      03776         movlw   0fh             ; Clear lcd data port
                      03777       endif
                      03778         andwf   LCD_DREG, F
                      03779 
                      03780         movf    R3, W           ; Isolate proper nibble of char
                      03781       if ((LCD_DBIT) == 0)
                      03782         andlw   0fh
                      03783       else
                      03784         andlw   0f0h
                      03785       endif
                      03786         iorwf   LCD_DREG, F     ; Write char to port
                      03787 
                      03788       if (OSC > 24)
                      03789         bra     $ + 2           ; Minimum 1us enable time
                      03790       endif
                      03791       if (OSC > 32)
                      03792         bra     $ + 2
                      03793       endif
                      03794       if (OSC > 40)
                      03795         bra     $ + 2
                      03796       endif
                      03797       if (OSC > 48)
                      03798         bra     $ + 2
                      03799         bra     $ + 2
                      03800       endif
                      03801 
                      03802         bcf     LCD_EREG, LCD_EBIT      ; Not enabled - that's four
                      03803         swapf   R3, F           ; Get to other nibble
                      03804 
                      03805       if (OSC > 24)
                      03806         bra     $ + 2           ; Minimum 1us not enabled time
                      03807       endif
                      03808       if (OSC > 32)
                      03809         bra     $ + 2
                      03810       endif
                      03811       if (OSC > 40)
                      03812         bra     $ + 2
                      03813       endif
                      03814       if (OSC > 48)
                      03815         bra     $ + 2
                      03816         bra     $ + 2
                      03817       endif
                      03818 
                      03819         btfsc   LCDCDFLAG       ; Need to send 4 more?
                      03820         bra     lcdloop         ; Send lower 4 to lcd
                      03821     endif
                      03822 
                      03823         movlw   LCD_DATAUS      ; Wait for data operation to complete
                      03824         call    PAUSEUSB
                      03825         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      03826         return
                      03827   NOLIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03828 DUNN_USED = 1
                      03829 PAUSEUS_USED = 1
                      03830     endif
                      03831 
                      03832 ;****************************************************************
                      03833 ;* LOOK2      : Get data from any register                      *
                      03834 ;*                                                              *
                      03835 ;* Input      : R0 address or constant                          *
                      03836 ;*            : W data type                                     *
                      03837 ;* Output     : R0 result                                       *
                      03838 ;*                                                              *
                      03839 ;* Notes      :                                                 *
                      03840 ;****************************************************************
                      03841 
                      03842     ifdef LOOK2_USED
                      03843   LIST
                      03844 LOOK2   iorlw   0               ; Check for constant
                      03845         bz      look2done       ; Constant so all set
                      03846         movwf   R4              ; Save type and data for CONVBIT
                      03847         movff   R0, FSR0L       ; Set FSR for translate
                      03848         movff   R0 + 1, FSR0H
                      03849         clrf    R0              ; Clear the result
                      03850         clrf    R0 + 1
                      03851 ;       clrf    R0 + 2          ; Already clear from macro
                      03852 ;       clrf    R0 + 3
                      03853         btfsc   R4, 7           ; Check type
                      03854         bra     look2bit        ; Bit type
                      03855         movf    POSTINC0, W     ; Get low byte of data and move up FSR
                      03856         movwf   R0              ; Store it
                      03857         dcfsnz  R4, W           ; Byte?
                      03858         bra     look2done       ; Byte
                      03859         movf    POSTINC0, W     ; Word or long - get high byte
                      03860         movwf   R0 + 1
                      03861         btfss   R4, 2           ; Word or long?
                      03862         bra     look2done       ; Word
                      03863         movf    POSTINC0, W     ; Long - get next byte
                      03864         movwf   R0 + 2
                      03865         movf    POSTINC0, W     ; Get last byte
                      03866         movwf   R0 + 3
                      03867         bra     look2done
                      03868 look2bit call   CONVBIT         ; Change bit to mask
                      03869         andwf   INDF0,W         ; Isolate bit
                      03870         btfss   STATUS, Z       ; Bit / no bit?
                      03871         incf    R0, F           ; Bit
                      03872 look2done goto  DUNN
                      03873   NOLIST
                      03874 CONVBIT_USED = 1
                      03875 DUNN_USED = 1
                      03876     endif
                      03877 
                      03878 ;****************************************************************
                      03879 ;* OWIN       : 1-Wire input                                    *
                      03880 ;*                                                              *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03881 ;* Input      : RS1, RR1 = port                                 *
                      03882 ;*            : RM1 = bit mask                                  *
                      03883 ;*            : GOP = mode                                      *
                      03884 ;* Output     : W = data                                        *
                      03885 ;*                                                              *
                      03886 ;* Notes      :                                                 *
                      03887 ;****************************************************************
                      03888 
                      03889     ifdef OWIN_USED
                      03890   LIST
                      03891 OWIN    movlw   8               ; 8 bits to a byte
                      03892         btfsc   GOP, 2          ; For real?
                      03893         movlw   1               ; No, only one data bit
                      03894         movwf   R1 + 1          ; Bit counter
                      03895         clrf    R1              ; Clear result in case of single data bit
                      03896         movff   RS1, FSR0H      ; Point to port
                      03897         movff   RR1, FSR0L
                      03898 owinloop comf   RM1, W          ; W = inverted bit mask
                      03899         andwf   INDF0, F        ; Set low
                      03900         bsf     FSR0L, 4        ; Point to TRIS
                      03901         incf    FSR0L, F
                      03902         andwf   PREINC0, F      ; Set bit to output low for ~7us
                      03903       if (OSC > 10)
                      03904         movlw   7               ; Delay 7us
                      03905         call    PAUSEUSB
                      03906       else
                      03907           if (OSC > 4)
                      03908         call    DUNN            ; 6 Delay to ~7us
                      03909         call    DUNN            ; 6
                      03910           else
                      03911         call    DUNN5           ; 5 Delay to ~7us
                      03912           endif
                      03913       endif
                      03914         movf    RM1, W          ; 1 W = bit mask
                      03915         iorwf   INDF0, F        ; 1 Set to input then wait ~7us
                      03916       if (OSC > 10)
                      03917         movlw   6               ; Delay 6us
                      03918         call    PAUSEUSB
                      03919         movf    RM1, W          ; 1 W = bit mask
                      03920       else
                      03921           if (OSC > 4)
                      03922         call    DUNN            ; 6 Delay to ~7us
                      03923         call    DUNN            ; 6
                      03924           else
                      03925         bra     $ + 2           ; 2 Delay to ~7us
                      03926         bra     $ + 2           ; 2
                      03927           endif
                      03928       endif
                      03929         movff   RR1, FSR0L      ; 2 Point back to port
                      03930         andwf   INDF0, W        ; 1 Get bit
                      03931         addlw   -1              ; Move bit to carry
                      03932         btfss   GOP, 2          ; Doing 8 bits?
                      03933         rrcf    R1, F           ; Yes, move bit into byte
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03934         btfsc   GOP, 2          ; Doing 1 bit?
                      03935         rlcf    R1, F           ; Yes, move in single bit
                      03936         movlw   50              ; Wait at least 60us
                      03937         call    PAUSEUSB
                      03938         decfsz  R1 + 1, F       ; More bits?
                      03939         bra     owinloop        ; Yes
                      03940         movf    R1, W           ; Get char to W
                      03941         bsf     STATUS, C       ; Set not timed out for Serin2mod
                      03942         goto    DUNN            ; That's it
                      03943   NOLIST
                      03944 DUNN_USED = 1
                      03945 PAUSEUS_USED = 1
                      03946     endif
                      03947 
                      03948 ;****************************************************************
                      03949 ;* OWOUT      : 1-Wire output                                   *
                      03950 ;*                                                              *
                      03951 ;* Input      : W = data                                        *
                      03952 ;*            : RS1, RR1 = port                                 *
                      03953 ;*            : RM1 = bit mask                                  *
                      03954 ;*            : GOP = mode                                      *
                      03955 ;* Output     : None                                            *
                      03956 ;*                                                              *
                      03957 ;* Notes      :                                                 *
                      03958 ;****************************************************************
                      03959 
                      03960     ifdef OWOUTJ_USED
                      03961   LIST
                      03962 OWOUTJ  movf    FSR0L, W        ; Jumpman entry
                      03963   NOLIST
                      03964 OWOUT_USED = 1
                      03965     endif
                      03966 
                      03967     ifdef OWOUT_USED
                      03968   LIST
                      03969 OWOUT   movwf   R1              ; Save data
                      03970         movlw   8               ; 8 bits to a byte
                      03971         btfsc   GOP, 2          ; For real?
                      03972         movlw   1               ; No, only one data bit
                      03973         movwf   R1 + 1          ; Bit counter
                      03974         movff   RS1, FSR0H      ; Point top to port
                      03975 owoutloop movff RR1, FSR0L      ; Point back to port
                      03976         comf    RM1, W          ; W = inverted bit mask
                      03977         andwf   INDF0, F        ; Set low
                      03978         bsf     FSR0L, 4        ; Point to TRIS
                      03979         incf    FSR0L, F
                      03980         andwf   PREINC0, F      ; Set bit to output low for ~7us
                      03981       if (OSC > 10)
                      03982         movlw   6               ; Delay 6us
                      03983         call    PAUSEUSB
                      03984       else
                      03985           if (OSC > 4)
                      03986         call    DUNN5           ; 5 Delay to ~7us
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03987         call    DUNN5           ; 5
                      03988           else
                      03989         bra     $ + 2           ; 2 Delay to ~7us
                      03990         nop                     ; 1
                      03991           endif
                      03992       endif
                      03993         movf    RM1, W          ; 1 W = bit mask
                      03994         rrcf    R1, F           ; 1 Get next bit
                      03995         btfsc   STATUS, C       ; 1/2 Should bit be low or high?
                      03996         iorwf   INDF0, F        ; 1/0 High (set to input)
                      03997         movlw   55              ; Wait at least 60us
                      03998         call    PAUSEUSB
                      03999         movf    RM1, W          ; Make sure it ends up as an input
                      04000         iorwf   INDF0, F        ; Set to input then wait ~10us for recovery
                      04001       if (OSC > 4)
                      04002         movlw   9               ; Delay 9us
                      04003         call    PAUSEUSB
                      04004       endif
                      04005         decfsz  R1 + 1, F       ; Do next bit, if any
                      04006         bra     owoutloop
                      04007         bsf     STATUS, C       ; Set no timeout for Serout2mod
                      04008         goto    DUNN
                      04009   NOLIST
                      04010 DUNN_USED = 1
                      04011 PAUSEUS_USED = 1
                      04012     endif
                      04013 
                      04014 ;****************************************************************
                      04015 ;* OWRESET    : 1-Wire reset                                    *
                      04016 ;*                                                              *
                      04017 ;* Input      : RS1, RR1 = port                                 *
                      04018 ;*            : RM1 = bit mask                                  *
                      04019 ;* Output     : None                                            *
                      04020 ;*                                                              *
                      04021 ;* Notes      : Optionally checks for presence.                 *
                      04022 ;****************************************************************
                      04023 
                      04024     ifdef OWRESETA_USED
                      04025   LIST
                      04026 OWRESETA btfss  GOP, 1          ; Check for reset after data
                      04027       ifndef OWPRESENT_USED
                      04028         goto    DUNN            ; No reset required
                      04029       else
                      04030         bra     owrdone         ; No reset required
                      04031       endif
                      04032         bra     OWRESET         ; Send reset
                      04033   NOLIST
                      04034 DUNN_USED = 1
                      04035 OWRESET_USED = 1
                      04036     endif
                      04037 
                      04038     ifdef OWRESETB_USED
                      04039   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04040 OWRESETB movwf  GOP             ; Save mode
                      04041         btfss   GOP, 0          ; Check for reset before data
                      04042       ifndef OWPRESENT_USED
                      04043         goto    DUNN            ; No reset required
                      04044       else
                      04045         bra     owrdone         ; No reset required
                      04046       endif
                      04047   NOLIST
                      04048 DUNN_USED = 1
                      04049 OWRESET_USED = 1
                      04050     endif
                      04051 
                      04052     ifdef OWRESET_USED
                      04053   LIST
                      04054 OWRESET movff   RS1, FSR0H      ; Point high to port
                      04055         movf    RR1, W          ; Point low to TRIS
                      04056         addlw   12h
                      04057         movwf   FSR0L
                      04058         movf    RM1, W          ; W = bit mask
                      04059         iorwf   INDF0, F        ; Need to start off high (input)
                      04060         movff   RR1, FSR0L      ; Point back to port
                      04061         comf    RM1, W          ; W = inverted bit mask
                      04062         andwf   INDF0, F        ; Now we can set to low for reset 
                      04063         bsf     FSR0L, 4        ; Point to TRIS
                      04064         incf    FSR0L, F
                      04065         andwf   PREINC0, F      ; Set to output low
                      04066         movlw   high 480        ; Reset pulse for > 480us
                      04067         movwf   R0 + 1
                      04068         movlw   low 480
                      04069         call    PAUSEUS
                      04070         movf    RM1, W          ; Set pin to input
                      04071         iorwf   INDF0, F
                      04072       ifndef OWPRESENT_USED
                      04073         movlw   high 480        ; Wait out rest of pulse ( > 480us)
                      04074         movwf   R0 + 1
                      04075         movlw   low 480
                      04076         goto    PAUSEUS
                      04077       else
                      04078         movlw   70              ; Wait at least 60us
                      04079         call    PAUSEUSB
                      04080         movff   RR1, FSR0L      ; Point back to port
                      04081         movf    RM1, W          ; Check for presence
                      04082         andwf   INDF0, W
                      04083         bcf     STATUS, C       ; Preset for not present
                      04084         bnz     owrndone        ; Not present
                      04085         movlw   high 410        ; Wait out rest of pulse
                      04086         movwf   R0 + 1
                      04087         movlw   low 410
                      04088         call    PAUSEUS
                      04089 owrdone bsf     STATUS, C       ; Set for present
                      04090 owrndone goto   DUNN
                      04091       endif
                      04092   NOLIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04093 DUNN_USED = 1
                      04094 PAUSEUS_USED = 1
                      04095     endif
                      04096 
                      04097 ;****************************************************************
                      04098 ;* POT        : Read a potentiometer                            *
                      04099 ;*                                                              *
                      04100 ;* Input      : RM1, W = bit mask or W = pin                    *
                      04101 ;*            : RS1, RR1 = port                                 *
                      04102 ;*            : low R2 = scale                                  *
                      04103 ;* Output     : W = result                                      *
                      04104 ;*                                                              *
                      04105 ;* Notes      : FSR0 is TRIS, FSR1 is port.                     *
                      04106 ;****************************************************************
                      04107 
                      04108     ifdef POT_USED
                      04109   LIST
                      04110 POT     call    PINR1           ; Convert pin to FSR and bit mask
                      04111   NOLIST
                      04112 PINR1_USED = 1
                      04113 POTT_USED = 1
                      04114     endif
                      04115 
                      04116     ifdef POTT_USED
                      04117   LIST
                      04118 POTT    movff   RS1, FSR0H      ; Point to port
                      04119         movff   RR1, FSR0L
                      04120         movf    RM1, W          ; Get bit mask
                      04121         call    HIGHT           ; Set pin high to charge cap (ends pointing to TRIS)
                      04122         movlw   10              ; Charge cap for 10ms
                      04123         call    PAUSEB
                      04124         movf    RM1, W          ; Get bit mask
                      04125         iorwf   INDF0, F        ; Set pin to input
                      04126         movff   RS1, FSR1H      ; Point to port
                      04127         movff   RR1, FSR1L
                      04128         xorwf   INDF1, F        ; Flip bit to low
                      04129         clrf    R0              ; Zero counter
                      04130         clrf    R0 + 1
                      04131 potloop movf    RM1, W          ; Get bit mask
                      04132         xorwf   INDF0, F        ; Set pin to output
                      04133         CLRWDT?NOP              ; Discharge a little (& clear Watchdog timer)
                      04134       if (OSC >= 8)
                      04135         bra     $ + 2
                      04136       endif
                      04137       if (OSC == 10)
                      04138         nop
                      04139       endif
                      04140       if (OSC >= 12)
                      04141         bra     $ + 2
                      04142       endif
                      04143       if (OSC >= 16)
                      04144         bra     $ + 2
                      04145       endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04146       if (OSC >= 20)
                      04147         bra     $ + 2
                      04148       endif
                      04149       if (OSC >= 25)
                      04150         bra     $ + 2
                      04151       endif
                      04152       if (OSC >= 32)
                      04153         bra     $ + 2
                      04154         bra     $ + 2
                      04155       endif
                      04156       if (OSC >= 40)
                      04157         bra     $ + 2
                      04158         bra     $ + 2
                      04159       endif
                      04160       if (OSC >= 48)
                      04161         bra     $ + 2
                      04162         bra     $ + 2
                      04163         bra     $ + 2
                      04164         bra     $ + 2
                      04165       endif
                      04166         xorwf   INDF0, F        ; Set pin back to input
                      04167         andwf   INDF1, W        ; Read pin
                      04168         bz      potdone         ; No longer high
                      04169         movf    R2, W           ; Get scale factor
                      04170         addwf   R0, F           ; Increase count by scale
                      04171         btfsc   STATUS, C       ; Check for roll to high
                      04172         incfsz  R0 + 1, F
                      04173         bra     potloop         ; Do some more
                      04174         decf    R0 + 1, F       ; Overflow so set to max
                      04175 potdone movf    R0 + 1, W       ; Get result to W
                      04176         goto    DUNN
                      04177   NOLIST
                      04178 DUNN_USED = 1
                      04179 HIGHT_USED = 1
                      04180 PAUSE_USED = 1
                      04181     endif
                      04182 
                      04183 ;****************************************************************
                      04184 ;* PULSIN     : Measure pulse length                            *
                      04185 ;*                                                              *
                      04186 ;* Input      : RM1, W = bit mask or W = pin                    *
                      04187 ;*            : RS1, RR1 = port                                 *
                      04188 ;*            : low R0 = pulse level                            *
                      04189 ;* Output     : R0 = pulse length                               *
                      04190 ;*                                                              *
                      04191 ;* Notes      : Oscillator dependent - 10us pulse time at 4MHz, *
                      04192 ;*            : 2us pulse time at 20MHz.                        *
                      04193 ;****************************************************************
                      04194 
                      04195     ifdef PULSIN_USED
                      04196   LIST
                      04197 PULSIN  call    PINR1           ; Convert pin to FSR and bit mask
                      04198   NOLIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04199 PINR1_USED = 1
                      04200 PULSINT_USED = 1
                      04201     endif
                      04202 
                      04203     ifdef PULSINT_USED
                      04204   LIST
                      04205 PULSINT movff   RS1, FSR0H      ; Point to TRIS
                      04206         movf    RR1, W
                      04207         addlw   12h
                      04208         movwf   FSR0L
                      04209         movf    RM1, W          ; Get bit mask
                      04210         iorwf   INDF0, F        ; Set pin to input
                      04211         movff   RR1, FSR0L      ; Point back to port
                      04212         clrf    R1              ; Preset state tracking
                      04213         btfss   R0, 0           ; State tracking preset for flip
                      04214         movwf   R1              ; Set state to bit mask
                      04215         rcall   STATECNT        ; Wait for idle state
                      04216         bz      pulsindone      ; If timeout then it's over
                      04217         rcall   STATECNT        ; Wait for starting edge
                      04218         bz      pulsindone      ; If timeout then it's over
                      04219         rcall   STATECNT        ; Do the count
                      04220 pulsindone goto DUNN
                      04221   NOLIST
                      04222 DUNN_USED = 1
                      04223 STATECNT_USED = 1
                      04224     endif
                      04225 
                      04226 ;****************************************************************
                      04227 ;* PULSOUT    : Output a pulse                                  *
                      04228 ;*                                                              *
                      04229 ;* Input      : RM1, W = bit mask or W = pin                    *
                      04230 ;*            : RS1, RR1 = port                                 *
                      04231 ;*            : R0 = pulse length                               *
                      04232 ;* Output     : None                                            *
                      04233 ;*                                                              *
                      04234 ;* Notes      : Oscillator dependent - 10us pulse time at 4MHz, *
                      04235 ;*            : 2us pulse time at 20MHz.                        *
                      04236 ;****************************************************************
                      04237 
                      04238     ifdef PULSOUT_USED
                      04239   LIST
                      04240 PULSOUT call    PINR1           ; Convert pin to FSR and bit mask
                      04241   NOLIST
                      04242 PINR1_USED = 1
                      04243 PULSOUTT_USED = 1
                      04244     endif
                      04245 
                      04246     ifdef PULSOUTT_USED
                      04247   LIST
                      04248 PULSOUTT movff  RS1, FSR0H      ; Point to TRIS
                      04249         movf    RR1, W
                      04250         addlw   12h
                      04251         movwf   FSR0L
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04252         comf    RM1, W          ; Get inverted bit mask
                      04253         andwf   INDF0, F        ; Set pin to output
                      04254         decf    R0, F           ; Check for 0 cycles
                      04255         clrf    WREG
                      04256         subwfb  R0 + 1, F
                      04257         subwfb  R0 + 2, F
                      04258         subwfb  R0 + 3, F
                      04259         bnc     pulsoutdone     ; Nothing to do
                      04260         movff   RR1, FSR0L      ; Point back to port
                      04261         movf    RM1, W          ; Get bit mask
                      04262         xorwf   INDF0, F        ; Flip bit to start it off
                      04263 pulsoutloop CLRWDT?NOP          ; 1 (10) Keep clearing Watchdog timer
                      04264         decf    R0, F           ; 1
                      04265         btfss   STATUS, C       ; 1 / 2
                      04266         decf    R0 + 1, F       ; 1 / 0
                      04267         btfss   STATUS, C       ; 1 / 2
                      04268         decf    R0 + 2, F       ; 1 / 0
                      04269         btfss   STATUS, C       ; 1 / 2
                      04270         decf    R0 + 3, F       ; 1 / 0
                      04271         bc      pulsoutloop     ; 2
                      04272         xorwf   INDF0, F        ; Flip bit to finish it up
                      04273 pulsoutdone goto DUNN
                      04274   NOLIST
                      04275 DUNN_USED = 1
                      04276     endif
                      04277 
                      04278 ;****************************************************************
                      04279 ;* PWM        : Output a pulse width modulated wave             *
                      04280 ;*                                                              *
                      04281 ;* Input      : RM1, W = bit mask or W = pin                    *
                      04282 ;*            : RS1, RR1 = port                                 *
                      04283 ;*            : R0 = cycles                                     *
                      04284 ;*            : low R1 = duty cycle                             *
                      04285 ;* Output     : None                                            *
                      04286 ;*                                                              *
                      04287 ;* Notes      : Oscillator dependent - 5ms cycle time at 4MHz,  *
                      04288 ;*            : 1ms cycle time at 20MHz.                        *
                      04289 ;****************************************************************
                      04290 
                      04291     ifdef PWM_USED
                      04292   LIST
                      04293 PWM     call    PINR1           ; Convert pin to FSR and bit mask
                      04294   NOLIST
                      04295 PINR1_USED = 1
                      04296 PWMT_USED = 1
                      04297     endif
                      04298 
                      04299     ifdef PWMT_USED
                      04300   LIST
                      04301 PWMT    decf    R0, F           ; Check for 0 cycles
                      04302         clrf    WREG
                      04303         subwfb  R0 + 1, F
                      04304         subwfb  R0 + 2, F
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04305         subwfb  R0 + 3, F
                      04306         bnc     pwmdone         ; Nothing to do
                      04307         clrf    R1 + 1          ; Clear accumulator
                      04308         setf    R2              ; Set loop counter
                      04309         movff   RS1, FSR0H      ; Point to TRIS
                      04310         movf    RR1, W
                      04311         addlw   12h
                      04312         movwf   FSR0L
                      04313         comf    RM1, W          ; Get inverted bit mask
                      04314         andwf   INDF0, F        ; Set pin to output
                      04315         movff   RR1, FSR0L      ; Point back to port
                      04316 pwmloop call    DUNN5           ; 5 (20) Clear watchdog and burn some time
                      04317         movf    R1, W           ; 1 Get duty cycle
                      04318         addwf   R1 + 1, F       ; 1 Add to accumulator
                      04319         movf    INDF0, W        ; 1 Grab the port
                      04320         iorwf   RM1, W          ; 1 Put in the bit
                      04321         btfss   STATUS, C       ; 1 / 2 Accumulator overflow?
                      04322         xorwf   RM1, W          ; 1 / 0 No, take out the bit
                      04323         movwf   INDF0           ; 1 Put out new data
                      04324         decf    R2, F           ; 1 256 loops per cycle
                      04325         clrf    WREG            ; 1 Count off cycles
                      04326         subwfb  R0, F           ; 1
                      04327         subwfb  R0 + 1, F       ; 1
                      04328         subwfb  R0 + 2, F       ; 1
                      04329         subwfb  R0 + 3, F       ; 1
                      04330         bc      pwmloop         ; 2
                      04331         movf    RM1, W          ; Get bit mask
                      04332 pwmdone goto    INPUTT          ; Finish up setting pin to input
                      04333   NOLIST
                      04334 DUNN_USED = 1
                      04335 INPUTT_USED = 1
                      04336     endif
                      04337 
                      04338 ;****************************************************************
                      04339 ;* RCTIME     : Measure time pin is in a state                  *
                      04340 ;*                                                              *
                      04341 ;* Input      : RM1, W = bit mask or W = pin                    *
                      04342 ;*            : RS1, RR1 = port                                 *
                      04343 ;*            : low R0 = state                                  *
                      04344 ;* Output     : R0 = time                                       *
                      04345 ;*                                                              *
                      04346 ;* Notes      : Oscillator dependent - 10us pulse time at 4MHz, *
                      04347 ;*            : 2us pulse time at 20MHz.                        *
                      04348 ;****************************************************************
                      04349 
                      04350     ifdef RCTIME_USED
                      04351   LIST
                      04352 RCTIME  call    PINR1           ; Convert pin to FSR and bit mask
                      04353   NOLIST
                      04354 PINR1_USED = 1
                      04355 RCTIMET_USED = 1
                      04356     endif
                      04357 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04358     ifdef RCTIMET_USED
                      04359   LIST
                      04360 RCTIMET movff   RS1, FSR0H      ; Point to TRIS
                      04361         movf    RR1, W
                      04362         addlw   12h
                      04363         movwf   FSR0L
                      04364         movf    RM1, W          ; Get bit mask
                      04365         iorwf   INDF0, F        ; Set pin to input
                      04366         movff   RR1, FSR0L      ; Point back to port
                      04367         clrf    R1              ; Preset state tracking
                      04368         btfss   R0, 0           ; State tracking preset for flip
                      04369         movwf   R1              ; Set state to bit mask
                      04370         rcall   STATECNT        ; Do the timing
                      04371         goto    DUNN
                      04372   NOLIST
                      04373 DUNN_USED = 1
                      04374 STATECNT_USED = 1
                      04375     endif
                      04376 
                      04377     ifdef STATECNT_USED
                      04378   LIST
                      04379 STATECNT movf   RM1, W          ; Flip state each time through here
                      04380         xorwf   R1, F
                      04381       ifdef PULSIN_MAX
                      04382           if (OSC < 20)
                      04383         movlw   low ((-(PULSIN_MAX)) + 2)       ; Start counter -PULSIN_MAX + 2
                      04384         movwf   R0
                      04385         movlw   high ((-(PULSIN_MAX)) + 2)
                      04386         movwf   R0 + 1
                      04387         movlw   upper ((-(PULSIN_MAX)) + 2)
                      04388         movwf   R0 + 2
                      04389         movlw   ((-(PULSIN_MAX)) + 2) >> 24
                      04390         movwf   R0 + 3
                      04391           else
                      04392         movlw   low ((-(PULSIN_MAX)) + 1)       ; Start counter -PULSIN_MAX + 1
                      04393         movwf   R0
                      04394         movlw   high ((-(PULSIN_MAX)) + 1)
                      04395         movwf   R0 + 1
                      04396         movlw   upper ((-(PULSIN_MAX)) + 1)
                      04397         movwf   R0 + 2
                      04398         movlw   ((-(PULSIN_MAX)) + 1) >> 24
                      04399         movwf   R0 + 3
                      04400           endif
                      04401       else
                      04402         movlw   1               ; Start counter at 1
                      04403         movwf   R0
                      04404         clrf    R0 + 1
                      04405         clrf    R0 + 2
                      04406         clrf    R0 + 3
                      04407       endif
                      04408 statecntloop movf INDF0, W      ; 1 (10) Read pin
                      04409         andwf   RM1, W          ; 1 Mask pin
                      04410         xorwf   R1, W           ; 1 Mix with desired state
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04411         bnz     statecntdone    ; 1 No longer in state
                      04412         incf    R0, F           ; 1 Increment counter
                      04413         addwfc  R0 + 1, F       ; 1 W has to be 0 to get here
                      04414         addwfc  R0 + 2, F       ; 1
                      04415         addwfc  R0 + 3, F       ; 1
                      04416         bnc     statecntloop    ; 2
                      04417         return                  ; Counter overflow (Z set)
                      04418 statecntdone
                      04419       ifdef PULSIN_MAX
                      04420         movlw   low (PULSIN_MAX)        ; Normalize count
                      04421         addwf   R0, F
                      04422         movlw   high (PULSIN_MAX)
                      04423         addwfc  R0 + 1, F
                      04424         movlw   upper (PULSIN_MAX)
                      04425         addwfc  R0 + 2, F
                      04426         movlw   (PULSIN_MAX) >> 24
                      04427         addwfc  R0 + 3, F
                      04428         bcf     STATUS, Z       ; Indicate no overflow
                      04429       endif
                      04430         return
                      04431   NOLIST
                      04432     endif
                      04433 
                      04434 ;****************************************************************
                      04435 ;* SERINDEC   : Read decimal serial input                       *
                      04436 ;*                                                              *
                      04437 ;* Input      : RS1, RR1 = port                                 *
                      04438 ;*            : RM1 = bit mask                                  *
                      04439 ;*            : RR2 = timeout low                               *
                      04440 ;*            : RM2 = timeout high                              *
                      04441 ;*            : GOP = mode                                      *
                      04442 ;* Output     : R2, W = value                                   *
                      04443 ;*                                                              *
                      04444 ;* Notes      : 16 bits                                         *
                      04445 ;****************************************************************
                      04446 
                      04447     ifdef SERINDECTO_USED
                      04448       ifdef SERINDEC_USED
                      04449   LIST
                      04450 SERINDECTO bsf   GOP, 4         ; Indicate timeout required
                      04451         btfss   GOP, 4          ; Skip next
                      04452 SERINDEC bcf    GOP, 4          ; No timeout required
                      04453   NOLIST
                      04454 SERINDECX_USED = 1
                      04455       else
                      04456   LIST
                      04457 SERINDECTO
                      04458   NOLIST
                      04459 SERINDECX_USED = 1
                      04460       endif
                      04461     else
                      04462       ifdef SERINDEC_USED
                      04463   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04464 SERINDEC
                      04465   NOLIST
                      04466 SERINDECX_USED = 1
                      04467       endif
                      04468     endif
                      04469 
                      04470     ifdef SERINDECX_USED
                      04471   LIST
                      04472         clrf    R2              ; Zero result
                      04473         clrf    R2 + 1
                      04474 serindecl0 rcall serindecget    ; Get char from serial
                      04475       ifdef SERINDECTO_USED
                      04476         btfss   STATUS, C       ; Timed out?
                      04477         return                  ; Yes
                      04478       endif
                      04479         addlw   0c6h            ; Check for non-numeric
                      04480         bc      serindecl0      ; Wait for number
                      04481         addlw   10              ; Still checking
                      04482         bnc     serindecl0      ; Wait for number
                      04483 serindecloop    movwf R1        ; Save altered char
                      04484         movlw   10              ; Multiply last * 10
                      04485         mulwf   R2              ; R2 * 10 = PRODHL
                      04486         movff   PRODL, R2       ; R2 is done
                      04487         movff   PRODH, R0
                      04488         mulwf   R2 + 1          ; R2 + 1 * 10 = PRODHL
                      04489         movf    PRODL, W
                      04490         addwf   R0, W
                      04491         movwf   R2 + 1          ; That's it for R2 + 1
                      04492         movf    R1, W           ; Get char back
                      04493         addwf   R2, F           ; Add it in
                      04494         btfsc   STATUS, C
                      04495         incf    R2 + 1, F
                      04496         rcall   serindecget     ; Get char from serial
                      04497       ifdef SERINDECTO_USED
                      04498         btfss   STATUS, C       ; Timed out?
                      04499         return                  ; Yes
                      04500       endif
                      04501         addlw   0c6h            ; Check for non-numeric
                      04502         bc      serindecdone    ; Done if not number
                      04503         addlw   10              ; Still checking
                      04504         bc      serindecloop    ; Not done yet
                      04505 serindecdone
                      04506       ifdef SERINDECTO_USED
                      04507         bsf     STATUS, C       ; Indicate not timed out (C set)
                      04508       endif
                      04509         movf    R2, W           ; Low part of result to W
                      04510         return                  ; DUNN called in SERIN
                      04511 
                      04512       ifdef SERINDECTO_USED
                      04513 SERINTO_USED = 1
                      04514       endif
                      04515       ifdef SERINDEC_USED
                      04516 SERIN_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04517       endif
                      04518 
                      04519       ifdef SERINDECTO_USED
                      04520           ifdef SERINDEC_USED
                      04521 serindecget btfss GOP, 4        ; 1 / 2 Timeout required?
                      04522         bra     SERIN           ; 2 / 0 No
                      04523           else
                      04524 serindecget                     ; Fall through to SERINTO
                      04525           endif
                      04526       else
                      04527 serindecget
                      04528           ifdef SERINTO_USED
                      04529         bra     SERIN
                      04530           endif
                      04531       endif
                      04532   NOLIST
                      04533     endif
                      04534 
                      04535 ;****************************************************************
                      04536 ;* SERIN      : Read USART style serial input                   *
                      04537 ;*                                                              *
                      04538 ;* Input      : RS1, RR1 = port                                 *
                      04539 ;*            : RM1 = bit mask                                  *
                      04540 ;*            : RR2 = timeout low                               *
                      04541 ;*            : RM2 = timeout high                              *
                      04542 ;*            : GOP = mode                                      *
                      04543 ;* Output     : W = char                                        *
                      04544 ;*                                                              *
                      04545 ;* Notes      : Carry clear for timeout.                        *
                      04546 ;****************************************************************
                      04547 
                      04548     ifdef SERINTO_USED
                      04549       if (OSC == 3)
                      04550 SERINTO_DELAY = 42
                      04551       else
                      04552 SERINTO_DELAY = (47 * (OSC)) / 4
                      04553       endif
                      04554   LIST
                      04555 SERINTO movff   RS1, FSR0H      ; Point to port for serinbit
                      04556         movff   RR1, FSR0L
                      04557         movf    RR2, W          ; Move timeout so it doesn't get wrecked
                      04558         movwf   R0
                      04559         movf    RM2, W
                      04560         movwf   R0 + 1
                      04561         clrf    R1              ; Start off inner loop counter at zero
                      04562         clrf    R1 + 1
                      04563 serintoloop CLRWDT?NOP          ; 1 (21, 29) Keep Watchdog timer clear
                      04564         rcall   serinbit        ; 14 Get a serial bit
                      04565         bnc     serinstart      ; 1 We're started
                      04566         clrf    WREG            ; 1 For subtracts
                      04567         decf    R1, F           ; 1
                      04568         subwfb  R1 + 1, F       ; 1
                      04569         bc      serintoloop     ; 2 / 1 End of inner loop
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04570         decf    R0, F           ; 1
                      04571         subwfb  R0 + 1, F       ; 1
                      04572         bnc     serindone       ; 1 Timed out (C clear)
                      04573         movlw   low (SERINTO_DELAY)     ; 1 Reset inside loop counter
                      04574         movwf   R1              ; 1
                      04575         movlw   low ((SERINTO_DELAY) >> 8)      ; 1
                      04576         movwf   R1 + 1          ; 1
                      04577         bra     serintoloop     ; 2 End of outer loop
                      04578   NOLIST
                      04579 SERINX_USED = 1
                      04580     endif
                      04581 
                      04582     ifdef SERIN_USED
                      04583   LIST
                      04584 SERIN   movff   RS1, FSR0H      ; Point to port for serinbit
                      04585         movff   RR1, FSR0L
                      04586 serinloop0 CLRWDT?              ; Keep Watchdog timer clear
                      04587         rcall   serinbit        ; Get a serial bit
                      04588         bc      serinloop0      ; Wait for start bit
                      04589   NOLIST
                      04590 SERINX_USED = 1
                      04591     endif
                      04592 
                      04593     ifdef SERINX_USED
                      04594   LIST
                      04595 serinstart rcall sersdelay      ; Wait 1/4 bit time
                      04596         movlw   8               ; 8 bits to a byte
                      04597         movwf   R1 + 1          ; Bit counter
                      04598 serinloop rcall serdelay        ; 2+ (20) Wait bit time
                      04599         rcall   serinbit        ; 14 Get a bit
                      04600         rrcf    R1, F           ; 1 Move bit into byte
                      04601         decfsz  R1 + 1, F       ; 1 / 2 More bits?
                      04602         bra     serinloop       ; 2 / 0 Yes
                      04603         rcall   serdelay        ; Delay to stop bit
                      04604       ifdef SERINTO_USED
                      04605         bsf     STATUS, C       ; Indicate not timed out (C set)
                      04606       endif
                      04607         movf    R1, W           ; Get char to W
                      04608 serindone goto  DUNN
                      04609 
                      04610 serinbit movlw  12h             ; 1 (14) Point to TRIS
                      04611         addwf   FSR0L, F        ; 1
                      04612         movf    RM1, W          ; 1 W = Bit Mask
                      04613         iorwf   INDF0, F        ; 1 Set bit to input
                      04614         movff   RR1, FSR0L      ; 2 Point back to port
                      04615         andwf   INDF0, W        ; 1 W = Current State
                      04616         btfsc   GOP,2           ; 1 / 2 Invert if 'N' Mode
                      04617         xorwf   RM1, W          ; 1 / 0
                      04618         addlw   -1              ; 1 Move bit to Carry
                      04619         return                  ; 2 + 2 Done
                      04620   NOLIST
                      04621 DUNN_USED = 1
                      04622 SERDELAY_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04623     endif
                      04624 
                      04625 ;****************************************************************
                      04626 ;* SEROUTDEC  : Send decimal serial output                      *
                      04627 ;*                                                              *
                      04628 ;* Input      : R2 = value                                      *
                      04629 ;*            : RS1, RR1 = port                                 *
                      04630 ;*            : RM1 = bit mask                                  *
                      04631 ;*            : GOP = mode                                      *
                      04632 ;* Output     : None                                            *
                      04633 ;*                                                              *
                      04634 ;* Notes      : 16 bits                                         *
                      04635 ;****************************************************************
                      04636 
                      04637     ifdef SEROUTDECB_USED
                      04638   LIST
                      04639 SEROUTDECB clrf R2 + 1          ; Zero high value
                      04640   NOLIST
                      04641 SEROUTDEC_USED = 1
                      04642     endif
                      04643 
                      04644     ifdef SEROUTDEC_USED
                      04645   LIST
                      04646 SEROUTDEC movwf R2              ; Save low value
                      04647         bsf     GOP, 7          ; Blanking on
                      04648         movlw   high 10000      ; Find 10,000s
                      04649         movwf   R1 + 1
                      04650         movlw   low 10000
                      04651         rcall   seroutdig       ; Do the work
                      04652         movlw   high 1000       ; Find 1,000s
                      04653         movwf   R1 + 1
                      04654         movlw   low 1000
                      04655         rcall   seroutdig       ; Do the work
                      04656         clrf    R1 + 1          ; Find 100s
                      04657         movlw   100
                      04658         rcall   seroutdig       ; Do the work
                      04659         clrf    R1 + 1          ; Find 10s
                      04660         movlw   10
                      04661         rcall   seroutdig       ; Do the work
                      04662         movf    R2, W           ; Get the 1s
                      04663         bra     serouta         ; Send the 1s
                      04664 
                      04665 seroutdig movwf R1              ; Save last piece
                      04666         movf    R2 + 1, W       ; Move remainder to dividend
                      04667         movwf   R0 + 1
                      04668         movf    R2, W
                      04669         movwf   R0
                      04670         clrf    R0 + 2          ; Zero top locations
                      04671         clrf    R0 + 3
                      04672         clrf    R1 + 2
                      04673         clrf    R1 + 3
                      04674         call    DIV             ; Do the math
                      04675         tstfsz  WREG            ; If zero, goto blank check
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04676         bcf     GOP, 7          ; Not zero so clear blank
                      04677         btfsc   GOP, 7          ; If blanking on, don't send
                      04678         return
                      04679 serouta addlw   '0'             ; Add ASCII offset
                      04680 ;       bra     SEROUT          ; Fall through
                      04681   NOLIST
                      04682 DIV_USED = 1
                      04683 SEROUT_USED = 1
                      04684     endif
                      04685 
                      04686 ;****************************************************************
                      04687 ;* SEROUT     : Send USART style serial output                  *
                      04688 ;*                                                              *
                      04689 ;* Input      : W = char                                        *
                      04690 ;*            : RS1, RR1 = port                                 *
                      04691 ;*            : RM1 = bit mask                                  *
                      04692 ;*            : GOP = mode                                      *
                      04693 ;* Output     : None                                            *
                      04694 ;*                                                              *
                      04695 ;* Notes      :                                                 *
                      04696 ;****************************************************************
                      04697 
                      04698     ifdef SEROUT_USED
                      04699   LIST
                      04700 SEROUT  movwf   R3              ; Data to send
                      04701         movff   RS1, FSR0H      ; Point to bank (PORT)
                      04702         movff   RS1, FSR1H      ; Point to bank (TRIS)
                      04703         movf    RR1, W          ; Point to PORT
                      04704         movwf   FSR0L
                      04705         addlw   12h             ; Point to TRIS
                      04706         movwf   FSR1L
                      04707         movlw   9               ; 1 start bit + 8 data bits
                      04708         movwf   R3 + 1
                      04709         bcf     STATUS, C       ; Start bit low
                      04710 seroutloop rcall seroutbit      ; 16+ (20) Send a bit
                      04711         rrcf    R3, F           ; 1 Move to next bit
                      04712         decfsz  R3 + 1, F       ; 1 / 2 Do next bit, if any
                      04713         bra     seroutloop      ; 2 / 0
                      04714         bsf     STATUS, C       ; 1 Stop bit high
                      04715         rcall   seroutbit       ; 16+ Send stop bit (need cycles)
                      04716       ifdef CHAR_PACING
                      04717         movlw   (CHAR_PACING) >> 8
                      04718         movwf   R0 + 1
                      04719         movlw   low (CHAR_PACING)
                      04720         call    PAUSEUS         ; Delay for character pacing
                      04721       endif
                      04722         goto    DUNN
                      04723 
                      04724 seroutbit btfss GOP, 3          ; 1 / 2 (16+) Check for TRIS mode
                      04725         bra     seroutnorm      ; 2 / 0 Go handle normal mode
                      04726 
                      04727         movf    INDF0, W        ; 1 Get PORT data
                      04728         iorwf   RM1, W          ; 1 Set bit on
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04729         btfss   GOP, 2          ; 1 / 2 Bit matches invert mode
                      04730         xorwf   RM1, W          ; 1 / 0 Set bit off
                      04731         movwf   INDF0           ; 1 Write it out
                      04732         movf    INDF1, W        ; 1 Get TRIS data
                      04733         iorwf   RM1, W          ; 1 Make bit an input
                      04734         btfss   STATUS, C       ; 1 / 2 Bit direction matches bit
                      04735         xorwf   RM1, W          ; 1 / 0 Make bit an output
                      04736         movwf   INDF1           ; 1 Write it out
                      04737         bra     serdelay        ; 2 + 2 Wait remainder of bit time
                      04738 
                      04739 seroutnorm movf  INDF0, W       ; 1 Get PORT data
                      04740         iorwf   RM1, W          ; 1 Set bit on
                      04741         btfss   STATUS, C       ; 1 / 2 Skip if bit should be on
                      04742         xorwf   RM1, W          ; 1 / 0 Set bit off
                      04743         btfsc   GOP, 2          ; 1 / 2 Invert if 'N' mode
                      04744         xorwf   RM1, W          ; 1 / 0 Flip for invert
                      04745         movwf   INDF0           ; 1 Write it out
                      04746         comf    RM1, W          ; 1 Get complemented bit mask to W
                      04747         andwf   INDF1, F        ; 1 Clear TRIS bit to set output
                      04748         bra     serdelay        ; 2 + 2 Wait remainder of bit time
                      04749   NOLIST
                      04750 DUNN_USED = 1
                      04751 SERDELAY_USED = 1
                      04752     endif
                      04753 
                      04754     ifdef SERDELAY_USED
                      04755 ; SDELAY = us/bit - ((cycles used in routine * 4) / OSC)
                      04756 ; 300 = 3333 - (136 / OSC)
                      04757 ; 1200 = 833 - (136 / OSC)
                      04758 ; 2400 = 417 - (136 / OSC)
                      04759 ; 9600 = 104 - (136 / OSC)
                      04760 
                      04761       if (OSC == 3)
                      04762 SDELAY_300 EQU 3295
                      04763 SDELAY_1200 EQU 795
                      04764 SDELAY_2400 EQU 379
                      04765 SDELAY_9600 EQU 66
                      04766       else
                      04767 SDELAY_300 = 3333 - (136 / (OSC))
                      04768 SDELAY_1200 = 833 - (136 / (OSC))
                      04769 SDELAY_2400 = 417 - (136 / (OSC))
                      04770 SDELAY_9600 = 104 - (136 / (OSC))
                      04771       endif
                      04772   LIST
                      04773       ifdef SERINX_USED
                      04774 sersdelay bsf   GOP, 6          ; Mark short delay
                      04775       endif
                      04776 serdelay rlcf   GOP, W          ; 1 (14 + 20) Get baud value x 2
                      04777         andlw   06h             ; 1 Mask to our bits
                      04778         addlw   low (sertable)  ; 1 Point to table
                      04779         movwf   TBLPTRL         ; 1 Set up table pointer low
                      04780         clrf    TBLPTRH         ; 1 Zero table pointer high
                      04781         movlw   high (sertable) ; 1 Set table pointer high
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04782         addwfc  TBLPTRH, F      ; 1
                      04783         clrf    TBLPTRU         ; 1 Zero table pointer upper
                      04784         tblrd   *+              ; 2 Get the high value
                      04785         movf    TABLAT, W       ; 1 Move it for PAUSEUS
                      04786         movwf   R0 + 1          ; 1
                      04787         tblrd   *               ; 2 Get the low value
                      04788         movf    TABLAT, W       ; 1 Move it to W
                      04789       ifndef SERINX_USED
                      04790         nop                     ; 1
                      04791         goto    PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      04792       else
                      04793         btfss   GOP, 6          ; 1
                      04794         goto    PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      04795         bcf     GOP, 6          ; Clear short delay mark
                      04796         bcf     STATUS, C       ; Divide time by 4
                      04797         rrcf    R0 + 1, F
                      04798         rrcf    WREG, W
                      04799         bcf     STATUS, C
                      04800         rrcf    R0 + 1, F
                      04801         rrcf    WREG, W
                      04802         goto    PAUSEUS         ; Do 1/4 delay
                      04803       endif
                      04804 
                      04805 sertable db     high (SDELAY_2400), low (SDELAY_2400)
                      04806         db      high (SDELAY_1200), low (SDELAY_1200)
                      04807         db      high (SDELAY_9600), low (SDELAY_9600)
                      04808         db      high (SDELAY_300), low (SDELAY_300)
                      04809   NOLIST
                      04810 PAUSEUS_USED = 1
                      04811     endif
                      04812 
                      04813 ;****************************************************************
                      04814 ;* SERIN2     : Read USART style serial input - BS2 version     *
                      04815 ;*                                                              *
                      04816 ;* Input      : R5 = baudmode                                   *
                      04817 ;*            : R6 = timeout time                               *
                      04818 ;*            : RS1, RR1 = data port                            *
                      04819 ;*            : RM1 = data bit mask                             *
                      04820 ;*            : RS2, RR2 = flow control port                    *
                      04821 ;*            : RM2 = flow control bit mask                     *
                      04822 ;* Output     : W = char                                        *
                      04823 ;*            : R4.0 = parity                                   *
                      04824 ;*                                                              *
                      04825 ;* Notes      :                                                 *
                      04826 ;****************************************************************
                      04827 
                      04828     ifdef SERIN2F_USED
                      04829   LIST
                      04830 SERIN2F movff   RS2, FSR0H      ; Get flow control port
                      04831         movff   RR2, FSR0L
                      04832         movf    RM2, W          ; W = flow control bit mask
                      04833         btfss   R5 + 1, 6       ; 'T' mode?
                      04834         call    LOWT            ; We're ready to go
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04835         btfsc   R5 + 1, 6       ; 'N' mode?
                      04836         call    HIGHT           ; Yes, now we're ready to go
                      04837         rcall   SERIN2
                      04838         movff   RS2, FSR0H      ; Get flow control port
                      04839         movff   RR2, FSR0L
                      04840         movf    RM2, W          ; W = flow control bit mask
                      04841         xorwf   INDF0, F        ; We're not ready anymore
                      04842         movf    R1, W           ; Get char again
                      04843         return
                      04844   NOLIST
                      04845 HIGHT_USED = 1
                      04846 LOWT_USED = 1
                      04847 SERIN2_USED = 1
                      04848     endif
                      04849         
                      04850     ifdef SERIN2FTO_USED
                      04851   LIST
                      04852 SERIN2FTO movff RS2, FSR0H      ; Get flow control port
                      04853         movff   RR2, FSR0L
                      04854         movf    RM2, W          ; W = flow control bit mask
                      04855         btfss   R5 + 1, 6       ; 'T' mode?
                      04856         call    LOWT            ; We're ready to go
                      04857         btfsc   R5 + 1, 6       ; 'N' mode?
                      04858         call    HIGHT           ; Yes, now we're ready to go
                      04859         rcall   SERIN2TO
                      04860         movff   RS2, FSR0H      ; Get flow control port
                      04861         movff   RR2, FSR0L
                      04862         movf    RM2, W          ; W = flow control bit mask
                      04863         xorwf   INDF0, F        ; We're not ready anymore
                      04864         movf    R1, W           ; Get char again
                      04865         return
                      04866   NOLIST
                      04867 HIGHT_USED = 1
                      04868 LOWT_USED = 1
                      04869 SERIN2TO_USED = 1
                      04870     endif
                      04871         
                      04872     ifdef SERIN2TO_USED
                      04873       if (OSC == 3)
                      04874 SERIN2TO_DELAY = 42
                      04875       else
                      04876 SERIN2TO_DELAY = (47 * (OSC)) / 4
                      04877       endif
                      04878   LIST
                      04879 SERIN2TO movff  RS1, FSR0H      ; Point to port for serin2bit
                      04880         movff   RR1, FSR0L
                      04881         movf    R6, W           ; Move timeout so it doesn't get wrecked
                      04882         movwf   R0
                      04883         movf    R6 + 1, W
                      04884         movwf   R0 + 1
                      04885         clrf    R1              ; Start off inner loop counter at zero
                      04886         clrf    R1 + 1
                      04887 serin2toloop CLRWDT?NOP         ; 1 (21, 29) Keep Watchdog timer clear
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04888         rcall   serin2bit       ; 14 Get a serial bit
                      04889         bnc     serin2start     ; 1 We're started
                      04890         clrf    WREG            ; 1 For subtracts
                      04891         decf    R1, F           ; 1
                      04892         subwfb  R1 + 1, F       ; 1
                      04893         bc      serin2toloop    ; 2 / 1 End of inner loop
                      04894         decf    R0, F           ; 1
                      04895         subwfb  R0 + 1, F       ; 1
                      04896         bnc     serin2done      ; 1 Timed out (C clear)
                      04897         movlw   low (SERIN2TO_DELAY)    ; 1 Reset inside loop counter
                      04898         movwf   R1              ; 1
                      04899         movlw   low ((SERIN2TO_DELAY) >> 8)     ; 1
                      04900         movwf   R1 + 1          ; 1
                      04901         bra     serin2toloop    ; 2 End of outer loop
                      04902   NOLIST
                      04903 SERIN2X_USED = 1
                      04904     endif
                      04905 
                      04906     ifdef SERIN2_USED
                      04907   LIST
                      04908 SERIN2  movff   RS1, FSR0H      ; Point to port for serin2bit
                      04909         movff   RR1, FSR0L
                      04910 serin2loop0 CLRWDT?             ; Keep Watchdog timer clear
                      04911         rcall   serin2bit       ; Get a serial bit
                      04912         bc      serin2loop0     ; Wait for start bit
                      04913   NOLIST
                      04914 SERIN2X_USED = 1
                      04915     endif
                      04916 
                      04917     ifdef SERIN2X_USED
                      04918   LIST
                      04919 serin2start rcall ser2sdelay    ; Wait 1/4 bit time
                      04920         clrf    R4              ; Zero parity accumulator
                      04921       ifndef SER2_BITS
                      04922         movlw   8               ; 8 bits to a byte
                      04923       else
                      04924         clrf    R1              ; Zero char
                      04925         movlw   SER2_BITS       ; SER2_BITS to a byte
                      04926       endif
                      04927         movwf   R1 + 1          ; Bit counter
                      04928 serin2loop rcall ser2delay      ; 2+ (22+) Wait bit time
                      04929         rcall   serin2bit       ; 14 Get a bit
                      04930         btfsc   STATUS, C       ; 1 / 2 Accumulate parity
                      04931         incfsz  R4, F           ; 1 (Don't alter carry, never skips)
                      04932         rrcf    R1, F           ; 1 Move bit into byte
                      04933         decfsz  R1 + 1, F       ; 1 More bits?
                      04934         bra     serin2loop      ; 2 Yes
                      04935         btfss   R5 + 1, 5       ; If no parity...
                      04936         clrf    R4              ; ...keep it even
                      04937         btfsc   R5 + 1, 5       ; If parity...
                      04938         bcf     R1, 7           ; ...clear top bit of result
                      04939       ifdef SER2_BITS
                      04940           if ((SER2_BITS) == 9)
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04941         rlcf    R1, F           ; If 9 bits, get proper 8 back
                      04942           endif
                      04943       endif
                      04944         rcall   ser2delay       ; Delay to stop bit
                      04945       ifdef SER2_ODD
                      04946         incf    R4, F           ; Make parity odd
                      04947       endif
                      04948       ifdef SER2_BITS
                      04949           if ((SER2_BITS) < 8)
                      04950         rrncf   R1, F           ; Shift data to bottom once
                      04951           endif
                      04952           if ((SER2_BITS) < 7)
                      04953         rrncf   R1, F           ; Shift data to bottom once
                      04954           endif
                      04955           if ((SER2_BITS) < 6)
                      04956         rrncf   R1, F           ; Shift data to bottom once
                      04957           endif
                      04958           if ((SER2_BITS) < 5)
                      04959         rrncf   R1, F           ; Shift data to bottom once
                      04960           endif
                      04961       endif
                      04962         bsf     STATUS, C       ; Indicate not timed out (C set)
                      04963         movf    R1, W           ; Get char to W
                      04964 serin2done return
                      04965 
                      04966 serin2bit movlw 12h             ; 1 (14) Point to TRIS
                      04967         addwf   FSR0L, F        ; 1
                      04968         movf    RM1, W          ; 1 W = Bit Mask
                      04969         iorwf   INDF0, F        ; 1 Set bit to input
                      04970         movff   RR1, FSR0L      ; 2 Point back to port
                      04971         andwf   INDF0, W        ; 1 W = Current State
                      04972         btfsc   R5 + 1, 6       ; 1 / 2 Invert if 'N' Mode
                      04973         xorwf   RM1, W          ; 1 / 0
                      04974         addlw   -1              ; 1 Move bit to Carry
                      04975         return                  ; 2 + 2 Done
                      04976   NOLIST
                      04977 SER2DELAY_USED = 1
                      04978     endif
                      04979 
                      04980 ;****************************************************************
                      04981 ;* SERIN2MOD  : Read serial input with modifiers                *
                      04982 ;*                                                              *
                      04983 ;* Input      : R2 = compare char                               *
                      04984 ;*            : R4 + 1 = digit count                            *
                      04985 ;*            : R5 = baudmode                                   *
                      04986 ;*            : R6 = timeout time                               *
                      04987 ;*            : RS1, RR1 = data port                            *
                      04988 ;*            : RM1 = data bit mask                             *
                      04989 ;*            : RS2, RR2 = flow control port                    *
                      04990 ;*            : RM2 = flow control bit mask                     *
                      04991 ;* Output     : R2, W = value                                   *
                      04992 ;*            : R4.0 = parity                                   *
                      04993 ;*                                                              *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04994 ;* Notes      :                                                 *
                      04995 ;****************************************************************
                      04996 
                      04997     ifdef ARRAYREADTO_USED
                      04998 SERIN2TO_USED = 1
                      04999     endif
                      05000     ifdef DEBUGINTO_USED
                      05001 SERIN2TO_USED = 1
                      05002     endif
                      05003     ifdef HSERINTO_USED
                      05004 SERIN2TO_USED = 1
                      05005     endif
                      05006     ifdef HSERIN2TO_USED
                      05007 SERIN2TO_USED = 1
                      05008     endif
                      05009     ifdef SERIN2SKIP_USED
                      05010   LIST
                      05011 SERIN2SKIP decf R4 + 1, F       ; More characters to skip?
                      05012         bc      serin2skip1     ; Yes
                      05013       ifdef SERIN2TO_USED
                      05014         bsf     STATUS, C       ; Maintain not timed out
                      05015       endif
                      05016         goto    DUNN            ; Nothing more to do
                      05017 serin2skip1 call JUMPMAN        ; Skip a char
                      05018       ifdef SERIN2TO_USED
                      05019         btfss   STATUS, C       ; Timed out?
                      05020         return                  ; Yes
                      05021       endif
                      05022         bra     SERIN2SKIP
                      05023   NOLIST
                      05024 DUNN_USED = 1
                      05025 JUMPMAN_USED = 1
                      05026     endif
                      05027 
                      05028     ifdef SERIN2STR_USED
                      05029   LIST
                      05030 SERIN2STR movwf FSR2L           ; Save low char pointer
                      05031 serin2strloop decf R4 + 1, F    ; More characters left?
                      05032         bc      serin2str1      ; Yes
                      05033       ifdef SERIN2TO_USED
                      05034         bsf     STATUS, C       ; Maintain not timed out
                      05035       endif
                      05036         goto    DUNN            ; Nothing more to do
                      05037 serin2str1 call JUMPMAN         ; Get a char
                      05038       ifdef SERIN2TO_USED
                      05039         btfss   STATUS, C       ; Timed out?
                      05040         return                  ; Yes
                      05041       endif
                      05042         movwf   POSTINC2        ; Store the character and move up the FSR
                      05043         bra     serin2strloop
                      05044   NOLIST
                      05045 DUNN_USED = 1
                      05046 JUMPMAN_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05047     endif
                      05048 
                      05049     ifdef SERIN2STRC_USED
                      05050   LIST
                      05051 SERIN2STRC movwf FSR2L          ; Save low char pointer
                      05052         bra     serin2strc0     ; Skip store first time
                      05053 serin2strcloop movwf POSTINC2   ; Store the character and move up the FSR
                      05054 serin2strc0 decf R4 + 1, F      ; More characters left?
                      05055         bc      serin2strc1     ; Yes
                      05056       ifdef SERIN2TO_USED
                      05057         bsf     STATUS, C       ; Maintain not timed out
                      05058       endif
                      05059         goto    DUNN            ; Nothing more to do
                      05060 serin2strc1 call JUMPMAN        ; Get a char
                      05061       ifdef SERIN2TO_USED
                      05062         btfss   STATUS, C       ; Timed out?
                      05063         return                  ; Yes
                      05064       endif
                      05065         cpfseq  R2              ; Compare to end char
                      05066         bra     serin2strcloop  ; Not end char
                      05067 serin2strczfill clrf POSTINC2   ; Fill rest of string with 0s
                      05068         decf    R4 + 1, F       ; Do them all
                      05069         bc      serin2strczfill ; More to do
                      05070       ifdef SERIN2TO_USED
                      05071         bsf     STATUS, C       ; Set not timed out
                      05072       endif
                      05073         return                  ; All set
                      05074   NOLIST
                      05075 DUNN_USED = 1
                      05076 JUMPMAN_USED = 1
                      05077     endif
                      05078 
                      05079     ifdef SERIN2WSTR_USED
                      05080   LIST
                      05081 SERIN2WSTR movwf R2             ; Save starting low char pointer
                      05082         movff   FSR2H, R2 + 1   ; Save starting high char pointer
                      05083 serin2wstrsloop movff R2, FSR2L ; Get starting low char pointer back
                      05084         movff   R2 + 1, FSR2H   ; Get starting high char pointer back
                      05085 serin2wstrloop movf INDF2, W    ; Check to see if we're done
                      05086         bnz     serin2wstr1
                      05087       ifdef SERIN2TO_USED
                      05088         bsf     STATUS, C       ; Maintain not timed out
                      05089       endif
                      05090         goto    DUNN            ; We're done
                      05091 serin2wstr1 call JUMPMAN                ; Get a char
                      05092       ifdef SERIN2TO_USED
                      05093         btfss   STATUS, C       ; Timed out?
                      05094         return                  ; Yes
                      05095       endif
                      05096         subwf   POSTINC2, W     ; Compare string char to char
                      05097         bz      serin2wstrloop  ; So far so good
                      05098         bra     serin2wstrsloop ; No good, start over
                      05099   NOLIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05100 DUNN_USED = 1
                      05101 JUMPMAN_USED = 1
                      05102     endif
                      05103 
                      05104     ifdef SERIN2WSTRN_USED
                      05105   LIST
                      05106 SERIN2WSTRN movwf R2            ; Save starting low char pointer
                      05107         movff   FSR2H, R2 + 1   ; Save starting high char pointer
                      05108 serin2wstrnsloop movff R2, FSR2L        ; Get starting low char pointer back
                      05109         movff   R2 + 1, FSR2H   ; Get starting high char pointer back
                      05110         movf    R4 + 1, W       ; Get starting count back
                      05111         movwf   R7 + 1
                      05112 serin2wstrnloop decf R7 + 1, F  ; Do them all
                      05113         bc      serin2wstrn1    ; More to do
                      05114       ifdef SERIN2TO_USED
                      05115         bsf     STATUS, C       ; Maintain not timed out
                      05116       endif
                      05117         goto    DUNN            ; Nothing more to do
                      05118 serin2wstrn1 call JUMPMAN       ; Get a char
                      05119       ifdef SERIN2TO_USED
                      05120         btfss   STATUS, C       ; Timed out?
                      05121         return                  ; Yes
                      05122       endif
                      05123         subwf   POSTINC2, W     ; Compare string char to char
                      05124         bz      serin2wstrnloop ; So far so good
                      05125         bra     serin2wstrnsloop        ; No good, start over
                      05126   NOLIST
                      05127 DUNN_USED = 1
                      05128 JUMPMAN_USED = 1
                      05129     endif
                      05130 
                      05131     ifdef SERIN2BIN_USED
                      05132   LIST
                      05133 SERIN2BIN clrf  R2              ; Zero result
                      05134         clrf    R2 + 1
                      05135         clrf    R2 + 2
                      05136         clrf    R2 + 3
                      05137         bcf     GOP, 5          ; Preset to plus
                      05138 serin2binl0 call JUMPMAN        ; Get char from serial
                      05139       ifdef SERIN2TO_USED
                      05140         btfss   STATUS, C       ; Timed out?
                      05141         return                  ; Yes
                      05142       endif
                      05143         addlw   -'-'            ; Check for minus
                      05144         btfsc   STATUS, Z
                      05145         bsf     GOP, 5          ; Mark as minus
                      05146         addlw   '-'             ; Restore char
                      05147         addlw   0ceh            ; Check for non-numeric
                      05148         bc      serin2binl0     ; Wait for number
                      05149         addlw   2               ; Still checking
                      05150         bnc     serin2binl0     ; Wait for number
                      05151 serin2binloop rrcf WREG, W      ; Get 0/1 to C
                      05152         rlcf    R2, F           ; Roll into result
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05153         rlcf    R2 + 1, F
                      05154         rlcf    R2 + 2, F
                      05155         rlcf    R2 + 3, F
                      05156         dcfsnz  R4 + 1, F       ; Count down number of digits
                      05157         bra     serin2moddone
                      05158         call    JUMPMAN         ; Get char from serial
                      05159       ifdef SERIN2TO_USED
                      05160         btfss   STATUS, C       ; Timed out?
                      05161         return                  ; Yes
                      05162       endif
                      05163         addlw   0ceh            ; Check for non-numeric
                      05164         bc      serin2moddone   ; Done if not number
                      05165         addlw   2               ; Still checking
                      05166         bnc     serin2moddone   ; Done if not number
                      05167         bra     serin2binloop   ; Not done yet
                      05168   NOLIST
                      05169 JUMPMAN_USED = 1
                      05170 SERIN2MODDONE_USED = 1
                      05171     endif
                      05172 
                      05173     ifdef SERIN2HEX_USED
                      05174   LIST
                      05175 SERIN2HEX clrf  R2              ; Zero result
                      05176         clrf    R2 + 1
                      05177         clrf    R2 + 2
                      05178         clrf    R2 + 3
                      05179         bcf     GOP, 5          ; Preset to plus
                      05180 serin2hexl0 call JUMPMAN        ; Get char from serial
                      05181       ifdef SERIN2TO_USED
                      05182         btfss   STATUS, C       ; Timed out?
                      05183         return                  ; Yes
                      05184       endif
                      05185         addlw   -'-'            ; Check for minus
                      05186         btfsc   STATUS, Z
                      05187         bsf     GOP, 5          ; Mark as minus
                      05188         addlw   '-'             ; Restore char
                      05189         addlw   0c6h            ; Check for 0-9
                      05190         bc      serin2hexl1     ; Go check for A-F
                      05191         addlw   10              ; Still checking
                      05192         bnc     serin2hexl0     ; Wait for number
                      05193         bra     serin2hexloop   ; Got 0-9
                      05194 serin2hexl1 addlw 0f3h          ; Check for A-F
                      05195         bc      serin2hexl0     ; No good
                      05196         addlw   6               ; Still checking
                      05197         bnc     serin2hexl0     ; Wait for number
                      05198         addlw   10
                      05199 serin2hexloop movwf R1          ; Save altered char
                      05200         movlw   4               ; Multiply last * 16
                      05201         movwf   R1 + 1
                      05202         swapf   R1, W           ; Move new char to top nibble of W
                      05203 serin2hexmul rlcf WREG, W       ; Put in new char 1 bit at a time
                      05204         rlcf    R2, F
                      05205         rlcf    R2 + 1, F
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05206         rlcf    R2 + 2, F
                      05207         rlcf    R2 + 3, F
                      05208         decfsz  R1 + 1, F
                      05209         bra     serin2hexmul
                      05210         dcfsnz  R4 + 1, F       ; Count down number of digits
                      05211         bra     serin2moddone
                      05212         call    JUMPMAN         ; Get char from serial
                      05213       ifdef SERIN2TO_USED
                      05214         btfss   STATUS, C       ; Timed out?
                      05215         return                  ; Yes
                      05216       endif
                      05217         addlw   0c6h            ; Check for 0-9
                      05218         bc      serin2hexl2     ; Go check for A-F
                      05219         addlw   10              ; Still checking
                      05220         bnc     serin2moddone   ; Done if not number
                      05221         bra     serin2hexloop   ; Got 0-9
                      05222 serin2hexl2 addlw 0f3h          ; Check for A-F
                      05223         bc      serin2moddone   ; Done if not number
                      05224         addlw   6               ; Still checking
                      05225         bnc     serin2moddone   ; Done if not number
                      05226         addlw   10
                      05227         bra     serin2hexloop   ; Got A-F
                      05228   NOLIST
                      05229 JUMPMAN_USED = 1
                      05230 SERIN2MODDONE_USED = 1
                      05231     endif
                      05232 
                      05233     ifdef SERIN2DEC_USED
                      05234   LIST
                      05235 SERIN2DEC clrf  R2              ; Zero result
                      05236         clrf    R2 + 1
                      05237         clrf    R2 + 2
                      05238         clrf    R2 + 3
                      05239         bcf     GOP, 5          ; Preset to plus
                      05240 serin2decl0 call JUMPMAN        ; Get first char from serial
                      05241       ifdef SERIN2TO_USED
                      05242         btfss   STATUS, C       ; Timed out?
                      05243         return                  ; Yes
                      05244       endif
                      05245         addlw   -'-'            ; Check for minus
                      05246         btfsc   STATUS, Z
                      05247         bsf     GOP, 5          ; Mark as minus
                      05248         addlw   '-'             ; Restore char
                      05249         addlw   0c6h            ; Check for non-numeric
                      05250         bc      serin2decl0     ; Wait for number
                      05251         addlw   10              ; Still checking
                      05252         bnc     serin2decl0     ; Wait for number
                      05253 serin2decloop movwf R1          ; Save altered char
                      05254         bcf     STATUS, C       ; Multiply last * 10
                      05255         rlcf    R2, W           ; Start with * 4
                      05256         movwf   R0
                      05257         rlcf    R2 + 1, W
                      05258         movwf   R0 + 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05259         rlcf    R2 + 2, W
                      05260         movwf   R0 + 2
                      05261         rlcf    R2 + 3, W
                      05262         movwf   R0 + 3
                      05263         rlcf    R0, W
                      05264         rlcf    R0 + 1, F
                      05265         rlcf    R0 + 2, F
                      05266         rlcf    R0 + 3, F       ; R0 is * 4
                      05267         addwf   R2, F           ; R2 = R2 + R0
                      05268         movf    R0 + 1, W
                      05269         addwfc  R2 + 1, F
                      05270         movf    R0 + 2, W
                      05271         addwfc  R2 + 2, F
                      05272         movf    R0 + 3, W
                      05273         addwfc  R2 + 3, F       ; That's * 5
                      05274         rlcf    R2, F           ; * 2 one more time
                      05275         rlcf    R2 + 1, F
                      05276         rlcf    R2 + 2, F
                      05277         rlcf    R2 + 3, F
                      05278         movf    R1, W           ; Get char back
                      05279         addwf   R2, F           ; Add in char
                      05280         clrf    WREG
                      05281         addwfc  R2 + 1, F
                      05282         addwfc  R2 + 2, F
                      05283         addwfc  R2 + 3, F
                      05284         dcfsnz  R4 + 1, F       ; Count down number of digits
                      05285         bra     serin2moddone
                      05286         call    JUMPMAN         ; Get next char from serial
                      05287       ifdef SERIN2TO_USED
                      05288         btfss   STATUS, C       ; Timed out?
                      05289         return                  ; Yes
                      05290       endif
                      05291         addlw   0c6h            ; Check for non-numeric
                      05292         bc      serin2moddone   ; Done if not number
                      05293         addlw   10              ; Still checking
                      05294         bc      serin2decloop   ; Not done yet
                      05295 ;       bra     serin2moddone   ; Done if not number (Fall through)
                      05296   NOLIST
                      05297 JUMPMAN_USED = 1
                      05298 SERIN2MODDONE_USED = 1
                      05299     endif
                      05300 
                      05301     ifdef SERIN2MODDONE_USED
                      05302   LIST
                      05303 serin2moddone btfss GOP, 5      ; Check for minus
                      05304         bra     serin2moddone1
                      05305         clrf    WREG            ; Clear W for subtracts
                      05306         negf    R2              ; Flip value to minus
                      05307         subfwb  R2 + 1, F
                      05308         subfwb  R2 + 2, F
                      05309         subfwb  R2 + 3, F
                      05310 serin2moddone1 movf R2, W       ; Low part of result to W
                      05311       ifdef SERIN2TO_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05312         bsf     STATUS, C       ; Indicate not timed out (C set)
                      05313       endif
                      05314         goto    DUNN
                      05315   NOLIST
                      05316 DUNN_USED = 1
                      05317     endif
                      05318 
                      05319 ;****************************************************************
                      05320 ;* SEROUT2    : Send USART style serial output - BS2 version    *
                      05321 ;*                                                              *
                      05322 ;* Input      : W = char                                        *
                      05323 ;*            : R5 = baudmode                                   *
                      05324 ;*            : R6 = timeout time                               *
                      05325 ;*            : R7 = pace in ms                                 *
                      05326 ;*            : RS1, RR1 = data port                            *
                      05327 ;*            : RM1 = data bit mask                             *
                      05328 ;*            : RS2, RR2 = flow control port                    *
                      05329 ;*            : RM2 = flow control bit mask                     *
                      05330 ;* Output     : None                                            *
                      05331 ;*                                                              *
                      05332 ;* Notes      :                                                 *
                      05333 ;****************************************************************
                      05334 
                      05335     ifdef SEROUT2TOJ_USED
                      05336   LIST
                      05337 SEROUT2TOJ movf FSR0L, W        ; Jumpman entry
                      05338   NOLIST
                      05339 SEROUT2TO_USED = 1
                      05340     endif
                      05341 
                      05342     ifdef SEROUT2TO_USED
                      05343       if (OSC == 3)
                      05344 SEROUT2TO_DELAY = 42
                      05345       else
                      05346 SEROUT2TO_DELAY = (47 * (OSC)) / 4
                      05347       endif
                      05348   LIST
                      05349 SEROUT2TO movwf R3              ; Save data to send
                      05350         movff   RS2, FSR0H      ; Point to flow control port
                      05351         movff   RR2, FSR0L
                      05352         movf    R6, W           ; Move timeout so it doesn't get wrecked
                      05353         movwf   R0
                      05354         movf    R6 + 1, W
                      05355         movwf   R0 + 1
                      05356         clrf    R1              ; Start off inner loop counter at zero
                      05357         clrf    R1 + 1
                      05358 serout2toloop CLRWDT?NOP        ; 1 (21, 29) Keep Watchdog timer clear
                      05359         rcall   serout2getfc    ; 14 Get flow control status
                      05360         bnc     serout2x        ; 1 Rett to go
                      05361         clrf    WREG            ; 1 For subtracts
                      05362         decf    R1, F           ; 1
                      05363         subwfb  R1 + 1, F       ; 1
                      05364         bc      serout2toloop   ; 2 / 1 End of inner loop
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05365         decf    R0, F           ; 1
                      05366         subwfb  R0 + 1, F       ; 1
                      05367         bnc     serout2done     ; 1 Timed out (C clear)
                      05368         movlw   low (SEROUT2TO_DELAY)   ; 1 Reset inside loop counter
                      05369         movwf   R1              ; 1
                      05370         movlw   low ((SEROUT2TO_DELAY) >> 8)    ; 1
                      05371         movwf   R1 + 1          ; 1
                      05372         bra     serout2toloop   ; 2 End of outer loop
                      05373   NOLIST
                      05374 SEROUT2GETFC_USED = 1
                      05375 SEROUT2X_USED = 1
                      05376     endif
                      05377 
                      05378     ifdef SEROUT2FJ_USED
                      05379   LIST
                      05380 SEROUT2FJ movf  FSR0L, W        ; Jumpman entry
                      05381   NOLIST
                      05382 SEROUT2F_USED = 1
                      05383     endif
                      05384 
                      05385     ifdef SEROUT2F_USED
                      05386   LIST
                      05387 SEROUT2F movwf  R3              ; Save data to send
                      05388         movff   RS2, FSR0H      ; Point to flow control port
                      05389         movff   RR2, FSR0L
                      05390 serout2floop CLRWDT?
                      05391         rcall   serout2getfc    ; Get flow control status
                      05392         bc      serout2floop    ; Not rett to go
                      05393         bra     serout2x
                      05394   NOLIST
                      05395 SEROUT2GETFC_USED = 1
                      05396 SEROUT2X_USED = 1
                      05397     endif
                      05398 
                      05399     ifdef SEROUT2J_USED
                      05400   LIST
                      05401 SEROUT2J movf   FSR0L, W        ; Jumpman entry
                      05402   NOLIST
                      05403 SEROUT2_USED = 1
                      05404     endif
                      05405 
                      05406     ifdef SEROUT2_USED
                      05407   LIST
                      05408 SEROUT2 movwf   R3              ; Data to send
                      05409   NOLIST
                      05410 SEROUT2X_USED = 1
                      05411     endif
                      05412 
                      05413     ifdef SEROUT2X_USED
                      05414   LIST
                      05415 serout2x movff  RS1, FSR0H      ; Point to bank (PORT)
                      05416         movff   RS1, FSR1H      ; Point to bank (TRIS)
                      05417         movf    RR1, W          ; Point to PORT
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05418         movwf   FSR0L
                      05419         addlw   12h             ; Point to TRIS
                      05420         movwf   FSR1L
                      05421         movlw   80h             ; Zero parity accumulator
                      05422         andwf   GOP, F
                      05423       ifndef SER2_BITS
                      05424         movlw   8               ; 1 start bit + 7 data bits
                      05425       else
                      05426         movlw   SER2_BITS       ; 1 start bit + (SER2_BITS - 1) data bits
                      05427       endif
                      05428         movwf   R3 + 1
                      05429         bcf     STATUS, C       ; Start bit low
                      05430 serout2loop btfsc STATUS, C     ; 1 / 2 (22+) Accumulate parity bits
                      05431         incfsz  GOP, F          ; 1 / 0
                      05432         rcall   serout2bit      ; 16+ Send a bit and delay bit time
                      05433         rrcf    R3, F           ; 1 Move to next bit
                      05434         decfsz  R3 + 1, F       ; 1 / 2 Do next bit, if any
                      05435         bra     serout2loop     ; 2 / 0
                      05436       ifdef SER2_ODD
                      05437         incf    GOP, F          ; 1 If odd parity bump one more time
                      05438       else
                      05439         nop                     ; 1
                      05440       endif
                      05441         btfsc   R5 + 1, 5       ; 1 / 2 Send parity?
                      05442         rrcf    GOP, W          ; 1 / 0 Get parity to carry
                      05443         rcall   serout2bit      ; 16+ Send parity or last bit and delay bit time
                      05444         call    DUNN5           ; 5
                      05445         bsf     STATUS, C       ; 1 Stop bit high
                      05446         rcall   serout2bit      ; 16+ Send stop bit and delay bit time
                      05447         movf    R7 + 1, W       ; Do pacing
                      05448         movwf   R1 + 1
                      05449         movf    R7, W
                      05450         call    PAUSEW
                      05451         bsf     STATUS, C       ; Indicate not timed out (C set)
                      05452 serout2done goto DUNN
                      05453 
                      05454 serout2bit btfss R5 + 1, 7      ; 1 / 2 (16+) Check for TRIS mode
                      05455         bra     serout2norm     ; 2 / 0 Go handle normal mode
                      05456 
                      05457         movf    INDF0, W        ; 1 Get PORT data
                      05458         iorwf   RM1, W          ; 1 Set bit on
                      05459         btfss   R5 + 1, 6       ; 1 / 2 Bit matches invert mode
                      05460         xorwf   RM1, W          ; 1 / 0 Set bit off
                      05461         movwf   INDF0           ; 1 Write it out
                      05462         movf    INDF1, W        ; 1 Get TRIS data
                      05463         iorwf   RM1, W          ; 1 Make bit an input
                      05464         btfss   STATUS, C       ; 1 / 2 Bit direction matches bit
                      05465         xorwf   RM1, W          ; 1 / 0 Make bit an output
                      05466         movwf   INDF1           ; 1 Write it out
                      05467         bra     ser2delay       ; 2 + 2 Wait remainder of bit time
                      05468 
                      05469 serout2norm movf  INDF0, W      ; 1 Get PORT data
                      05470         iorwf   RM1, W          ; 1 Set bit on
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05471         btfss   STATUS, C       ; 1 / 2 Skip if bit should be on
                      05472         xorwf   RM1, W          ; 1 / 0 Set bit off
                      05473         btfsc   R5 + 1, 6       ; 1 / 2 Invert if 'N' mode
                      05474         xorwf   RM1, W          ; 1 / 0 Flip for invert
                      05475         movwf   INDF0           ; 1 Write it out
                      05476         comf    RM1, W          ; 1 Get complemented bit mask to W
                      05477         andwf   INDF1, F        ; 1 Clear TRIS bit to set output
                      05478         bra     ser2delay       ; 2 + 2 Wait remainder of bit time
                      05479   NOLIST
                      05480 DUNN_USED = 1
                      05481 PAUSE_USED = 1
                      05482 SER2DELAY_USED = 1
                      05483     endif
                      05484 
                      05485     ifdef SEROUT2GETFC_USED
                      05486   LIST
                      05487 serout2getfc movlw 12h          ; 1 (14) Point to flow control TRIS
                      05488         addwf   FSR0L, F        ; 1
                      05489         movf    RM2, W          ; 1 W = flow control bit mask
                      05490         iorwf   INDF0, F        ; 1 Set bit to input
                      05491         movff   RR2, FSR0L      ; 2 Point back to port
                      05492         andwf   INDF0, W        ; 1 W = Current State
                      05493         btfsc   R5 + 1, 6       ; 1 / 2 Invert if 'N' Mode
                      05494         xorwf   RM2, W          ; 1 / 0
                      05495         addlw   -1              ; 1 Move bit to carry
                      05496         return                  ; 2 + 2 Z indicates result
                      05497   NOLIST
                      05498     endif
                      05499 
                      05500     ifdef SER2DELAY_USED
                      05501 ; SER2DELAY_OFFSET = 20us - ((cycles used in routine * 4 + (OSC / 2)) / OSC)
                      05502       if (OSC == 3)
                      05503 SER2DELAY_OFFSET = -12
                      05504       else
                      05505 SER2DELAY_OFFSET = 20 - ((116 + ((OSC) / 2)) / (OSC))
                      05506       endif
                      05507   LIST
                      05508       ifdef SERIN2X_USED
                      05509 ser2sdelay bsf  GOP, 6          ; Mark short delay
                      05510       endif
                      05511 ser2delay movf  R5 + 1, W       ; 1 (7 + 22) Get high baud byte
                      05512         andlw   1fh             ; 1 Mask to our bits
                      05513         addlw   low ((SER2DELAY_OFFSET) >> 8)   ; 1 Fix baud - 20us
                      05514         movwf   R0 + 1          ; 1 Save it
                      05515         movf    R5, W           ; 1 Get low baud byte
                      05516         addlw   low (SER2DELAY_OFFSET)  ; 1
                      05517         btfsc   STATUS, C       ; 1 / 2 Bump up high byte if low overflowed
                      05518         incf    R0 + 1, F       ; 1 / 0
                      05519       ifndef SERIN2X_USED
                      05520         nop                     ; 1
                      05521         goto    PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      05522       else
                      05523         btfss   GOP, 6          ; 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05524         goto    PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      05525         bcf     GOP, 6          ; Clear short delay mark
                      05526         bcf     STATUS, C       ; Divide time by 4
                      05527         rrcf    R0 + 1, F
                      05528         rrcf    WREG, W
                      05529         bcf     STATUS, C
                      05530         rrcf    R0 + 1, F
                      05531         rrcf    WREG, W
                      05532         goto    PAUSEUS         ; Do 1/4 delay
                      05533       endif
                      05534   NOLIST
                      05535 PAUSEUS_USED = 1
                      05536     endif
                      05537 
                      05538 ;****************************************************************
                      05539 ;* SEROUT2MOD : Send serial output with modifiers               *
                      05540 ;*                                                              *
                      05541 ;* Input      : R2 = value                                      *
                      05542 ;*            : R4 + 1 = digit count                            *
                      05543 ;*            : R5 = baudmode                                   *
                      05544 ;*            : R6 = timeout time                               *
                      05545 ;*            : R7 = pace in ms                                 *
                      05546 ;*            : RS1, RR1 = data port                            *
                      05547 ;*            : RM1 = data bit mask                             *
                      05548 ;*            : RS2, RR2 = flow control port                    *
                      05549 ;*            : RM2 = flow control bit mask                     *
                      05550 ;* Output     : None                                            *
                      05551 ;*                                                              *
                      05552 ;* Notes      :                                                 *
                      05553 ;****************************************************************
                      05554 
                      05555     ifdef ARRAYWRITETO_USED
                      05556 SEROUT2TO_USED = 1
                      05557     endif
                      05558     ifdef SEROUT2REP_USED
                      05559   LIST
                      05560 SEROUT2REP movwf R2             ; Save the char
                      05561 serout2reploop decf R4 + 1, F   ; Do them all
                      05562         bc      serout2rep1     ; More to do
                      05563       ifdef SEROUT2TO_USED
                      05564         bsf     STATUS, C       ; Maintain not timed out
                      05565       endif
                      05566         goto    DUNN            ; Nothing more to do
                      05567 serout2rep1 movf R2, W          ; Get the character again
                      05568         call    JUMPMAN         ; Send the char
                      05569       ifdef SEROUT2TO_USED
                      05570         btfss   STATUS, C       ; Timed out?
                      05571         return                  ; Yes
                      05572       endif
                      05573         bra     serout2reploop
                      05574   NOLIST
                      05575 DUNN_USED = 1
                      05576 JUMPMAN_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05577     endif
                      05578 
                      05579     ifdef SEROUT2STR_USED
                      05580   LIST
                      05581 SEROUT2STR movwf FSR2L          ; Set up for index
                      05582 serout2strloop movf POSTINC2, W ; Get a character
                      05583         bnz     serout2str1     ; Not null char
                      05584       ifdef SEROUT2TO_USED
                      05585         bsf     STATUS, C       ; Maintain not timed out
                      05586       endif
                      05587         goto    DUNN            ; The end
                      05588 serout2str1 call JUMPMAN        ; Send the char
                      05589       ifdef SEROUT2TO_USED
                      05590         btfss   STATUS, C       ; Timed out?
                      05591         return                  ; Yes
                      05592       endif
                      05593         bra     serout2strloop
                      05594   NOLIST
                      05595 DUNN_USED = 1
                      05596 JUMPMAN_USED = 1
                      05597     endif
                      05598 
                      05599     ifdef SEROUT2STRN_USED
                      05600   LIST
                      05601 SEROUT2STRN movwf FSR2L         ; Set up for index
                      05602 serout2strnloop decf R4 + 1, F  ; Do them all
                      05603         bc      serout2strn1    ; More to do
                      05604       ifdef SEROUT2TO_USED
                      05605         bsf     STATUS, C       ; Maintain not timed out
                      05606       endif
                      05607         goto    DUNN            ; Nothing more to do
                      05608 serout2strn1 movf POSTINC2, W   ; Get a character
                      05609         call    JUMPMAN         ; Send the char
                      05610       ifdef SEROUT2TO_USED
                      05611         btfss   STATUS, C       ; Timed out?
                      05612         return                  ; Yes
                      05613       endif
                      05614         bra     serout2strnloop
                      05615   NOLIST
                      05616 DUNN_USED = 1
                      05617 JUMPMAN_USED = 1
                      05618     endif
                      05619 
                      05620     ifdef SEROUT2IBIN_USED
                      05621   LIST
                      05622 SEROUT2IBIN movlw '%'           ; Send a '%'
                      05623         call    JUMPMAN
                      05624       ifdef SEROUT2TO_USED
                      05625         btfss   STATUS, C       ; Timed out?
                      05626         return                  ; Yes
                      05627       endif
                      05628       ifdef SEROUT2ISBIN_USED
                      05629         bra     SEROUT2BIN
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05630       else
                      05631           ifdef SEROUT2SBIN_USED
                      05632         bra     SEROUT2BIN
                      05633           endif
                      05634       endif
                      05635   NOLIST
                      05636 JUMPMAN_USED = 1
                      05637 SEROUT2BIN_USED = 1
                      05638     endif
                      05639 
                      05640     ifdef SEROUT2ISBIN_USED
                      05641   LIST
                      05642 SEROUT2ISBIN movlw '%'          ; Send a '%'
                      05643         call    JUMPMAN         ; Fall through to sign
                      05644       ifdef SEROUT2TO_USED
                      05645         btfss   STATUS, C       ; Timed out?
                      05646         return                  ; Yes
                      05647       endif
                      05648   NOLIST
                      05649 JUMPMAN_USED = 1
                      05650 SEROUT2SBIN_USED = 1
                      05651     endif
                      05652 
                      05653     ifdef SEROUT2SBIN_USED
                      05654   LIST
                      05655 SEROUT2SBIN rcall SEROUT2SIGN   ; Do sign and fall through
                      05656       ifdef SEROUT2TO_USED
                      05657         btfss   STATUS, C       ; Timed out?
                      05658         return                  ; Yes
                      05659       endif
                      05660   NOLIST
                      05661 SEROUT2BIN_USED = 1
                      05662 SEROUT2SIGN_USED = 1
                      05663     endif
                      05664 
                      05665     ifdef SEROUT2BIN_USED
                      05666   LIST
                      05667 SEROUT2BIN bcf  GOP, 7          ; Blanking off
                      05668         movf    R4 + 1, W       ; If 0 digits called for then blanking on
                      05669         btfsc   STATUS, Z
                      05670         bsf     GOP, 7          ; Blanking on
                      05671         movlw   32              ; 32 bits max to do
                      05672         movwf   R4
                      05673 serout2binloop clrf WREG        ; Start with a zero
                      05674         rlcf    R2, F           ; Roll bit to W
                      05675         rlcf    R2 + 1, F
                      05676         rlcf    R2 + 2, F
                      05677         rlcf    R2 + 3, F
                      05678         rlcf    WREG, W
                      05679         rcall   SEROUT2SEND     ; Send the char
                      05680       ifdef SEROUT2TO_USED
                      05681         btfss   STATUS, C       ; Timed out?
                      05682         return                  ; Yes
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05683       endif
                      05684         tstfsz  R4              ; Do all the bits
                      05685         bra     serout2binloop
                      05686         return
                      05687   NOLIST
                      05688 SEROUT2SEND_USED = 1
                      05689     endif
                      05690 
                      05691     ifdef SEROUT2IHEX_USED
                      05692   LIST
                      05693 SEROUT2IHEX movlw '$'           ; Send a '$'
                      05694         call    JUMPMAN
                      05695       ifdef SEROUT2TO_USED
                      05696         btfss   STATUS, C       ; Timed out?
                      05697         return                  ; Yes
                      05698       endif
                      05699       ifdef SEROUT2ISHEX_USED
                      05700         bra     SEROUT2HEX
                      05701       else
                      05702           ifdef SEROUT2SHEX_USED
                      05703         bra     SEROUT2HEX
                      05704           endif
                      05705       endif
                      05706   NOLIST
                      05707 JUMPMAN_USED = 1
                      05708 SEROUT2HEX_USED = 1
                      05709     endif
                      05710 
                      05711     ifdef SEROUT2ISHEX_USED
                      05712   LIST
                      05713 SEROUT2ISHEX movlw '$'          ; Send a '$'
                      05714         call    JUMPMAN         ; Fall through to sign
                      05715       ifdef SEROUT2TO_USED
                      05716         btfss   STATUS, C       ; Timed out?
                      05717         return                  ; Yes
                      05718       endif
                      05719   NOLIST
                      05720 JUMPMAN_USED = 1
                      05721 SEROUT2SHEX_USED = 1
                      05722     endif
                      05723 
                      05724     ifdef SEROUT2SHEX_USED
                      05725   LIST
                      05726 SEROUT2SHEX rcall SEROUT2SIGN   ; Do sign and fall through
                      05727       ifdef SEROUT2TO_USED
                      05728         btfss   STATUS, C       ; Timed out?
                      05729         return                  ; Yes
                      05730       endif
                      05731   NOLIST
                      05732 SEROUT2HEX_USED = 1
                      05733 SEROUT2SIGN_USED = 1
                      05734     endif
                      05735 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05736     ifdef SEROUT2HEX_USED
                      05737   LIST
                      05738 SEROUT2HEX bcf  GOP, 7          ; Blanking off
                      05739         movf    R4 + 1, W       ; If 0 digits called for then blanking on
                      05740         btfsc   STATUS, Z
                      05741         bsf     GOP, 7          ; Blanking on
                      05742         movlw   8               ; 8 nibbles max to do
                      05743         movwf   R4
                      05744         swapf   R2 + 3, W       ; Get first nibble
                      05745         rcall   serout2hdig
                      05746       ifdef SEROUT2TO_USED
                      05747         btfss   STATUS, C       ; Timed out?
                      05748         return                  ; Yes
                      05749       endif
                      05750         movf    R2 + 3, W       ; Get second nibble
                      05751         rcall   serout2hdig
                      05752       ifdef SEROUT2TO_USED
                      05753         btfss   STATUS, C       ; Timed out?
                      05754         return                  ; Yes
                      05755       endif
                      05756         swapf   R2 + 2, W       ; Get third nibble
                      05757         rcall   serout2hdig
                      05758       ifdef SEROUT2TO_USED
                      05759         btfss   STATUS, C       ; Timed out?
                      05760         return                  ; Yes
                      05761       endif
                      05762         movf    R2 + 2, W       ; Get fourth nibble
                      05763         rcall   serout2hdig
                      05764       ifdef SEROUT2TO_USED
                      05765         btfss   STATUS, C       ; Timed out?
                      05766         return                  ; Yes
                      05767       endif
                      05768         swapf   R2 + 1, W       ; Get fifth nibble
                      05769         rcall   serout2hdig
                      05770       ifdef SEROUT2TO_USED
                      05771         btfss   STATUS, C       ; Timed out?
                      05772         return                  ; Yes
                      05773       endif
                      05774         movf    R2 + 1, W       ; Get sixth nibble
                      05775         rcall   serout2hdig
                      05776       ifdef SEROUT2TO_USED
                      05777         btfss   STATUS, C       ; Timed out?
                      05778         return                  ; Yes
                      05779       endif
                      05780         swapf   R2, W           ; Get seventh nibble
                      05781         rcall   serout2hdig
                      05782       ifdef SEROUT2TO_USED
                      05783         btfss   STATUS, C       ; Timed out?
                      05784         return                  ; Yes
                      05785       endif
                      05786         movf    R2, W           ; Get final nibble and fall through
                      05787 
                      05788 serout2hdig andlw 0fh           ; Isolate lower nibble
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05789         addlw   -10             ; Change to 0 - F
                      05790         btfsc   STATUS, C
                      05791         addlw   7               ; Bump to A - F
                      05792         addlw   10
                      05793         bra     SEROUT2SEND     ; Send nibble
                      05794   NOLIST
                      05795 SEROUT2SEND_USED = 1
                      05796     endif
                      05797 
                      05798     ifdef SEROUT2IDEC_USED
                      05799   LIST
                      05800 SEROUT2IDEC movlw '#'           ; Send a '#'
                      05801         call    JUMPMAN
                      05802       ifdef SEROUT2TO_USED
                      05803         btfss   STATUS, C       ; Timed out?
                      05804         return                  ; Yes
                      05805       endif
                      05806       ifdef SEROUT2ISDEC_USED
                      05807         bra     SEROUT2DEC
                      05808       else
                      05809           ifdef SEROUT2SDEC_USED
                      05810         bra     SEROUT2DEC
                      05811           endif
                      05812       endif
                      05813   NOLIST
                      05814 JUMPMAN_USED = 1
                      05815 SEROUT2DEC_USED = 1
                      05816     endif
                      05817 
                      05818     ifdef SEROUT2ISDEC_USED
                      05819   LIST
                      05820 SEROUT2ISDEC movlw '#'          ; Send a '#'
                      05821         call    JUMPMAN         ; Fall through to sign
                      05822       ifdef SEROUT2TO_USED
                      05823         btfss   STATUS, C       ; Timed out?
                      05824         return                  ; Yes
                      05825       endif
                      05826   NOLIST
                      05827 JUMPMAN_USED = 1
                      05828 SEROUT2SDEC_USED = 1
                      05829     endif
                      05830 
                      05831     ifdef SEROUT2SDEC_USED
                      05832   LIST
                      05833 SEROUT2SDEC rcall SEROUT2SIGN   ; Do sign and fall through
                      05834       ifdef SEROUT2TO_USED
                      05835         btfss   STATUS, C       ; Timed out?
                      05836         return                  ; Yes
                      05837       endif
                      05838   NOLIST
                      05839 SEROUT2DEC_USED = 1
                      05840 SEROUT2SIGN_USED = 1
                      05841     endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05842 
                      05843     ifdef SEROUT2DEC_USED
                      05844   LIST
                      05845 SEROUT2DEC bcf  GOP, 7          ; Blanking off
                      05846         movf    R4 + 1, W       ; If 0 digits called for then blanking on
                      05847         btfsc   STATUS, Z
                      05848         bsf     GOP, 7          ; Yes, blanking on
                      05849         movlw   10              ; 10 digits max to do
                      05850         movwf   R4
                      05851         movlw   1000000000 >> 24        ; Find 1,000,000,000s
                      05852         movwf   R1 + 3
                      05853         movlw   upper 1000000000
                      05854         movwf   R1 + 2
                      05855         movlw   high 1000000000
                      05856         movwf   R1 + 1
                      05857         movlw   low 1000000000
                      05858         rcall   serout2ddig     ; Do the work
                      05859       ifdef SEROUT2TO_USED
                      05860         btfss   STATUS, C       ; Timed out?
                      05861         return                  ; Yes
                      05862       endif
                      05863         movlw   100000000 >> 24 ; Find 100,000,000s
                      05864         movwf   R1 + 3
                      05865         movlw   upper 100000000
                      05866         movwf   R1 + 2
                      05867         movlw   high 100000000
                      05868         movwf   R1 + 1
                      05869         movlw   low 100000000
                      05870         rcall   serout2ddig     ; Do the work
                      05871       ifdef SEROUT2TO_USED
                      05872         btfss   STATUS, C       ; Timed out?
                      05873         return                  ; Yes
                      05874       endif
                      05875         clrf    R1 + 3
                      05876         movlw   upper 10000000  ; Find 10,000,000s
                      05877         movwf   R1 + 2
                      05878         movlw   high 10000000
                      05879         movwf   R1 + 1
                      05880         movlw   low 10000000
                      05881         rcall   serout2ddig     ; Do the work
                      05882       ifdef SEROUT2TO_USED
                      05883         btfss   STATUS, C       ; Timed out?
                      05884         return                  ; Yes
                      05885       endif
                      05886         clrf    R1 + 3
                      05887         movlw   upper 1000000   ; Find 1,000,000s
                      05888         movwf   R1 + 2
                      05889         movlw   high 1000000
                      05890         movwf   R1 + 1
                      05891         movlw   low 1000000
                      05892         rcall   serout2ddig     ; Do the work
                      05893       ifdef SEROUT2TO_USED
                      05894         btfss   STATUS, C       ; Timed out?
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05895         return          ; Yes
                      05896       endif
                      05897         clrf    R1 + 3
                      05898         movlw   upper 100000    ; Find 100,000s
                      05899         movwf   R1 + 2
                      05900         movlw   high 100000
                      05901         movwf   R1 + 1
                      05902         movlw   low 100000
                      05903         rcall   serout2ddig     ; Do the work
                      05904       ifdef SEROUT2TO_USED
                      05905         btfss   STATUS, C       ; Timed out?
                      05906         return          ; Yes
                      05907       endif
                      05908         clrf    R1 + 3
                      05909         clrf    R1 + 2
                      05910         movlw   high 10000      ; Find 10,000s
                      05911         movwf   R1 + 1
                      05912         movlw   low 10000
                      05913         rcall   serout2ddig     ; Do the work
                      05914       ifdef SEROUT2TO_USED
                      05915         btfss   STATUS, C       ; Timed out?
                      05916         return          ; Yes
                      05917       endif
                      05918         clrf    R1 + 3
                      05919         clrf    R1 + 2
                      05920         movlw   high 1000       ; Find 1,000s
                      05921         movwf   R1 + 1
                      05922         movlw   low 1000
                      05923         rcall   serout2ddig     ; Do the work
                      05924       ifdef SEROUT2TO_USED
                      05925         btfss   STATUS, C       ; Timed out?
                      05926         return                  ; Yes
                      05927       endif
                      05928         clrf    R1 + 3
                      05929         clrf    R1 + 2
                      05930         clrf    R1 + 1          ; Find 100s
                      05931         movlw   100
                      05932         rcall   serout2ddig     ; Do the work
                      05933       ifdef SEROUT2TO_USED
                      05934         btfss   STATUS, C       ; Timed out?
                      05935         return                  ; Yes
                      05936       endif
                      05937         clrf    R1 + 3
                      05938         clrf    R1 + 2
                      05939         clrf    R1 + 1          ; Find 10s
                      05940         movlw   10
                      05941         rcall   serout2ddig     ; Do the work
                      05942       ifdef SEROUT2TO_USED
                      05943         btfss   STATUS, C       ; Timed out?
                      05944         return                  ; Yes
                      05945       endif
                      05946         movf    R2, W           ; Get the 1s
                      05947         bra     SEROUT2SEND     ; Send the 1s and exit
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05948 
                      05949 serout2ddig movwf R1            ; Save last piece
                      05950         movf    R2 + 3, W       ; Move remainder to dividend
                      05951         movwf   R0 + 3
                      05952         movf    R2 + 2, W
                      05953         movwf   R0 + 2
                      05954         movf    R2 + 1, W
                      05955         movwf   R0 + 1
                      05956         movf    R2, W
                      05957         movwf   R0
                      05958         call    DIV             ; Do the math
                      05959         movf    R0, W           ; Get the result
                      05960 ;       bra     SEROUT2SEND     ; Fall through
                      05961   NOLIST
                      05962 DIV_USED = 1
                      05963 SEROUT2SEND_USED = 1
                      05964     endif
                      05965 
                      05966     ifdef SEROUT2SEND_USED
                      05967   LIST
                      05968 SEROUT2SEND movwf R0            ; Save char for a moment
                      05969         dcfsnz  R4, F           ; Bump down count while we're here
                      05970         bcf     GOP, 7
                      05971         movf    R4 + 1, W       ; Get number of digits to send
                      05972         bz      serout2send1    ; If zero digits skip count compare
                      05973         subwf   R4, W           ; Send if within count
                      05974         btfsc   STATUS, C
                      05975         return                  ; Carry set for no timeout
                      05976 serout2send1 movf R0, W         ; Get char back
                      05977       ifdef SEROUT2TO_USED
                      05978         bsf     STATUS, C       ; Set carry for no timeout in case of blanking
                      05979       endif
                      05980         btfss   STATUS, Z       ; If char zero, goto blank check
                      05981         bcf     GOP, 7          ; Not zero so clear blank
                      05982         btfsc   GOP, 7          ; If blanking on, don't send
                      05983         return
                      05984         addlw   '0'             ; Add ASCII offset
                      05985         goto    JUMPMAN         ; Send it
                      05986   NOLIST
                      05987 JUMPMAN_USED = 1
                      05988     endif
                      05989 
                      05990     ifdef SEROUT2SIGN_USED
                      05991   LIST
                      05992 SEROUT2SIGN btfss R2 + 3, 7     ; Plus?
                      05993         return                  ; Yes
                      05994         clrf    WREG            ; Clear W for subtracts
                      05995         negf    R2              ; Flip value to plus
                      05996         subfwb  R2 + 1, F
                      05997         subfwb  R2 + 2, F
                      05998         subfwb  R2 + 3, F
                      05999         movlw   '-'             ; Send a '-'
                      06000         goto    JUMPMAN
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06001   NOLIST
                      06002 JUMPMAN_USED = 1
                      06003     endif
                      06004 
                      06005 ;****************************************************************
                      06006 ;* SHIFTIN    : Read synchronous serial input                   *
                      06007 ;*                                                              *
                      06008 ;* Input      : W = number of bits                              *
                      06009 ;*            : RS1, RR1 = data port                            *
                      06010 ;*            : RM1 = data bit mask                             *
                      06011 ;*            : RS2, RR2 = clock port                           *
                      06012 ;*            : RM2 = clock bit mask                            *
                      06013 ;*            : GOP = mode                                      *
                      06014 ;* Output     : R0 = result                                     *
                      06015 ;*                                                              *
                      06016 ;* Notes      :                                                 *
                      06017 ;****************************************************************
                      06018 
                      06019     ifdef SHIFTIN_USED
                      06020   LIST
                      06021 SHIFTIN8 movlw  8               ; Receive 8 bits
                      06022 SHIFTIN movwf   R3              ; Save number of bits
                      06023         movwf   R3 + 1          ; Save it again
                      06024 
                      06025         movff   RS2, FSR0H      ; Point to clock port (FSR0 for High and Low)
                      06026         movff   RR2, FSR0L
                      06027         movf    RM2, W          ; Get clock bit mask
                      06028         btfsc   GOP, 2          ; Skip if start low
                      06029         call    HIGHT           ; Start clock bit high
                      06030         btfss   GOP, 2          ; Skip if start high
                      06031         call    LOWT            ; Start clock bit low
                      06032         movff   RS2, FSR1H      ; Point to clock port (FSR1)
                      06033         movff   RR2, FSR1L
                      06034 
                      06035 ;       movff   RS1, FSR0H      ; Point to data TRIS (FSR0)
                      06036         movf    RR1, W
                      06037         addlw   12h
                      06038         movwf   FSR0L
                      06039         movf    RM1, W          ; Get data bit mask
                      06040         iorwf   INDF0           ; Set data to input
                      06041         movff   RR1, FSR0L      ; Point back to port
                      06042         clrf    R0              ; Zero result
                      06043         clrf    R0 + 1
                      06044         clrf    R0 + 2
                      06045         clrf    R0 + 3
                      06046         movf    R3, W           ; Check for 0 count
                      06047         bz      shiftindone     ; Count (and result and W) is 0
                      06048 shiftinloop btfsc GOP, 1        ; Sample post?
                      06049         rcall   shifttoggle     ; Yes
                      06050         movf    INDF0, W        ; Get pin value
                      06051         andwf   RM1, W          ; Isolate data
                      06052         addlw   -1              ; Move bit to carry
                      06053         rlcf    R0, F           ; Rotate bit into result
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06054         rlcf    R0 + 1, F
                      06055         rlcf    R0 + 2, F
                      06056         rlcf    R0 + 3, F
                      06057         btfss   GOP, 1          ; Sample pre?
                      06058         rcall   shifttoggle     ; Yes
                      06059         decfsz  R3, F           ; Do all the bits
                      06060         bra     shiftinloop
                      06061         movf    R3 + 1, W       ; Get number of bits back
                      06062         btfsc   GOP, 0          ; LSB?
                      06063         goto    REV             ; Yes, finish up by reversing bits
                      06064         movf    R0, W           ; Else, low result to W
                      06065 shiftindone goto DUNN
                      06066   NOLIST
                      06067 DUNN_USED = 1
                      06068 HIGHT_USED = 1
                      06069 LOWT_USED = 1
                      06070 REV_USED = 1
                      06071 SHIFTTOGGLE_USED = 1
                      06072     endif
                      06073 
                      06074 ;****************************************************************
                      06075 ;* SHIFTOUT   : Send synchronous serial output                  *
                      06076 ;*                                                              *
                      06077 ;* Input      : W = number of bits                              *
                      06078 ;*            : R0 = data                                       *
                      06079 ;*            : RS1, RR1 = data port                            *
                      06080 ;*            : RM1 = data bit mask                             *
                      06081 ;*            : RS2, RR2 = clock port                           *
                      06082 ;*            : RM2 = clock bit mask                            *
                      06083 ;*            : GOP = mode                                      *
                      06084 ;* Output     : None                                            *
                      06085 ;*                                                              *
                      06086 ;* Notes      :                                                 *
                      06087 ;****************************************************************
                      06088 
                      06089     ifdef SHIFTOUT_USED
                      06090   LIST
                      06091 SHIFTOUT8 movlw 8               ; Send 8 bits
                      06092 SHIFTOUT movwf  R3              ; Save number of bits
                      06093 
                      06094         movff   RS2, FSR0H      ; Point to clock port (FSR0 for High and Low)
                      06095         movff   RR2, FSR0L
                      06096         movf    RM2, W          ; Get clock bit mask
                      06097         btfsc   GOP, 2          ; Skip if start low
                      06098         call    HIGHT           ; Start clock bit high
                      06099         btfss   GOP, 2          ; Skip if start high
                      06100         call    LOWT            ; Start clock bit low
                      06101         movff   RS2, FSR1H      ; Point to clock port (FSR1)
                      06102         movff   RR2, FSR1L
                      06103 
                      06104 ;       movff   RS1, FSR0H      ; Point to data TRIS (FSR0)
                      06105         movf    RR1, W
                      06106         addlw   12h
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06107         movwf   FSR0L
                      06108         comf    RM1, W          ; Get inverted data bit mask
                      06109         andwf   INDF0, F        ; Set data to output
                      06110         movf    R3, W           ; Get count and check for 0
                      06111         bz      shiftoutdone    ; It's 0
                      06112         btfsc   GOP, 0          ; Shift MSB?
                      06113         call    REV             ; Yes, reverse bits to bottom
                      06114         movff   RR1, FSR0L      ; Point back to port
                      06115 shiftoutloop rrcf R0 + 3, F     ; Shift LSB to carry
                      06116         rrcf    R0 + 2, F
                      06117         rrcf    R0 + 1, F
                      06118         rrcf    R0, F           ; Carry has bit
                      06119         movf    INDF0, W        ; Get pin value
                      06120         iorwf   RM1, W          ; Put in 1 for data
                      06121         btfss   STATUS, C       ; 1 or 0?
                      06122         xorwf   RM1, W          ; 0, take 1 back out
                      06123         movwf   INDF0           ; Put out data
                      06124         rcall   shifttoggle     ; Toggle clock
                      06125         decfsz  R3, F           ; Do all the bits
                      06126         bra     shiftoutloop
                      06127 shiftoutdone goto DUNN
                      06128   NOLIST
                      06129 DUNN_USED = 1
                      06130 HIGHT_USED = 1
                      06131 LOWT_USED = 1
                      06132 REV_USED = 1
                      06133 SHIFTTOGGLE_USED = 1
                      06134     endif
                      06135 
                      06136     ifdef SHIFTTOGGLE_USED
                      06137   LIST
                      06138 shifttoggle movf RM2, W         ; Get clock bit mask
                      06139         xorwf   INDF1, F        ; Toggle clock
                      06140      ifdef SHIFT_PAUSEUS
                      06141         movf    R0, W           ; Save shift data
                      06142         movwf   R1
                      06143         movf    R0 + 1, W
                      06144         movwf   R1 + 1
                      06145         movlw   (SHIFT_PAUSEUS) >> 8    ; Slow down transfer
                      06146         movwf   R0 + 1
                      06147         movlw   low (SHIFT_PAUSEUS)
                      06148         call    PAUSEUS
                      06149         movf    R1, W           ; Restore shift data
                      06150         movwf   R0
                      06151         movf    R1 + 1, W
                      06152         movwf   R0 + 1
                      06153         movf    RM2, W          ; Get clock bit mask
                      06154 PAUSEUS_USED = 1
                      06155      else
                      06156         nop                     ; Slow down transfer
                      06157       if (OSC > 4)
                      06158         bra     $ + 2
                      06159       endif
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06160       if (OSC > 8)
                      06161         bra     $ + 2
                      06162       endif
                      06163       if (OSC > 12)
                      06164         bra     $ + 2
                      06165       endif
                      06166       if (OSC > 16)
                      06167         bra     $ + 2
                      06168       endif
                      06169       if (OSC > 20)
                      06170         bra     $ + 2
                      06171       endif
                      06172       if (OSC > 24)
                      06173         bra     $ + 2
                      06174         bra     $ + 2
                      06175       endif
                      06176       if (OSC > 32)
                      06177         bra     $ + 2
                      06178         bra     $ + 2
                      06179       endif
                      06180       if (OSC > 40)
                      06181         bra     $ + 2
                      06182         bra     $ + 2
                      06183       endif
                      06184       if (OSC > 48)
                      06185         bra     $ + 2
                      06186         bra     $ + 2
                      06187         bra     $ + 2
                      06188         bra     $ + 2
                      06189       endif
                      06190      endif
                      06191         xorwf   INDF1, F
                      06192         return
                      06193   NOLIST
                      06194     endif
                      06195 
                      06196 ;****************************************************************
                      06197 ;* SOUND      : Make tone or noise                              *
                      06198 ;*                                                              *
                      06199 ;* Input      : W = duration                                    *
                      06200 ;*            : low R1 = note                                   *
                      06201 ;*            : RS1, RR1 = port                                 *
                      06202 ;*            : RM1 = bit mask                                  *
                      06203 ;* Output     : None                                            *
                      06204 ;*                                                              *
                      06205 ;* Notes      : 78.74hz (1) to 10,000hz (127)                   *
                      06206 ;****************************************************************
                      06207 
                      06208     ifdef SOUND_USED
                      06209 SOUND_DELAY = 50 - (224 / (OSC))
                      06210   LIST
                      06211 SOUND   movwf   R1 + 1          ; Save duration
                      06212         movff   RS1, FSR0H      ; Point to TRIS
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06213         movf    RR1, W
                      06214         addlw   12h
                      06215         movwf   FSR0L
                      06216         comf    RM1, W          ; Get inverted bit mask
                      06217         andwf   INDF0, F        ; Set to output
                      06218         movff   RR1, FSR0L      ; Point back to port
                      06219         movf    R1 + 1, W       ; Check for zero duration
                      06220         bz      sounddone       ; No duration
                      06221         movlw   240
                      06222         movwf   R2 + 1          ; Start inner loop counter
                      06223 soundloop movf  R1, W           ; 1 (50) Get note
                      06224         iorlw   80h             ; 1 Range is 128 - 255
                      06225         movwf   R2              ; 1 Save it
                      06226 soundloop1 movlw 240            ; 1 Reset inner loops (maybe)
                      06227         decf    R2 + 1, F       ; 1 Count inner loops
                      06228         btfsc   STATUS, Z       ; 1 / 2 Inner loop done?
                      06229         movwf   R2 + 1          ; 1 / 0
                      06230         btfsc   STATUS, Z       ; 1 / 2 Inner loop done?
                      06231         decf    R1 + 1, F       ; 1 / 0
                      06232         btfsc   STATUS, Z       ; 2 Outer loop done?
                      06233 sounddone goto  DUNN
                      06234       if (OSC == 4)
                      06235         bra     $ + 2           ; 2 Burn 2
                      06236       endif
                      06237       if (OSC > 4)
                      06238         movf    R0, W           ; 1 Save value of R0 for random
                      06239         movwf   R3              ; 1
                      06240         movf    R0 + 1, W       ; 1
                      06241         movwf   R3 + 1          ; 1
                      06242         movlw   SOUND_DELAY     ; 1
                      06243         call    PAUSEUSB        ; -1 Burn rest of 50us
                      06244         movf    R3, W           ; 1 Restore value of R0 for random
                      06245         movwf   R0              ; 1
                      06246         movf    R3 + 1, W       ; 1
                      06247         movwf   R0 + 1          ; 1
                      06248 PAUSEUS_USED = 1
                      06249       endif
                      06250         call    RANDOM          ; 22 Get a random number in case it's noise
                      06251         bra     $ + 2           ; 2
                      06252         clrf    WREG            ; 1
                      06253         btfsc   R0, 0           ; 1 / 2 Put in random bit
                      06254         movf    RM1, W          ; 1 / 0 Get bit mask
                      06255         btfss   R1, 7           ; 1 / 2 Check for pure tone or random noise
                      06256         movf    RM1, W          ; 1 / 0 Tone so always put in bit
                      06257         movf    R1, F           ; 1 Check for no sound
                      06258         btfsc   STATUS, Z       ; 1 / 2
                      06259         clrf    WREG            ; 1 / 0 No sound
                      06260         incfsz  R2, F           ; 1 / 2 Count off frequency
                      06261         bra     soundloop2      ; 2 / 0 Not time yet
                      06262         xorwf   INDF0, F        ; 1 Flip output bit
                      06263         bra     soundloop       ; 2
                      06264 soundloop2 bra  $ + 2           ; 2
                      06265         nop                     ; 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06266         bra     soundloop1      ; 2
                      06267   NOLIST
                      06268 DUNN_USED = 1
                      06269 RANDOM_USED = 1
                      06270     endif
                      06271 
                      06272 ;****************************************************************
                      06273 ;* XIN        : Receive X-10 data                               *
                      06274 ;*                                                              *
                      06275 ;* Input      : RS1, RR1 = data port                            *
                      06276 ;*            : RM1 = data bit mask                             *
                      06277 ;*            : RS2, RR2 = zero crossing port                   *
                      06278 ;*            : RM2 = zero crossing bit mask                    *
                      06279 ;*            : R6 = timeout in half cycles                     *
                      06280 ;* Output     : R1 + 1 = house code                             *
                      06281 ;*            : W = key code                                    *
                      06282 ;*                                                              *
                      06283 ;* Notes      :                                                 *
                      06284 ;****************************************************************
                      06285 
                      06286     ifdef XINTO_USED
                      06287       ifdef XIN_USED
                      06288   LIST
                      06289 XINTO   bsf     GOP, 4          ; Indicate timeout required
                      06290         btfss   GOP, 4          ; Skip next
                      06291 XIN     bcf     GOP, 4          ; No timeout required
                      06292   NOLIST
                      06293 XINX_USED = 1
                      06294       else
                      06295   LIST
                      06296 XINTO
                      06297   NOLIST
                      06298 XINX_USED = 1
                      06299       endif
                      06300     else
                      06301       ifdef XIN_USED
                      06302   LIST
                      06303 XIN
                      06304   NOLIST
                      06305 XINX_USED = 1
                      06306       endif
                      06307     endif
                      06308 
                      06309     ifdef XINX_USED
                      06310   LIST
                      06311       ifdef XINTO_USED
                      06312         movf    R6, W           ; Move timeout delay to R1
                      06313         movwf   R1
                      06314         movf    R6 + 1, W
                      06315         movwf   R1 + 1
                      06316       endif
                      06317         movff   RS1, FSR0H      ; Put data port into FSR0
                      06318         movf    RR1, W
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06319         addlw   12h
                      06320         movwf   FSR0L
                      06321         movf    RM1, W          ; Get data bit mask
                      06322         iorwf   INDF0           ; Make it an input
                      06323         movff   RR1, FSR0L      ; Point back to port
                      06324 xinstartloop movlw 3            ; Set start bit counter
                      06325         movwf   R2
                      06326       ifdef XINTO_USED
                      06327           ifdef XIN_USED
                      06328         btfss   GOP, 4          ; Check for skip timeout
                      06329         bra     xinsl1
                      06330           endif
                      06331         clrf    WREG            ; Check for timeout
                      06332         decf    R1, F
                      06333         subwfb  R1 + 1, F
                      06334         bnc     xindone         ; We're timed out (C clear)
                      06335       endif
                      06336 xinsl1  rcall   xingetbit       ; Wait for next zero crossing and get bit
                      06337         bnc     xinstartloop    ; Low bit - no start
                      06338         decfsz  R2, F           ; 3 start bits?
                      06339         bra     xinsl1          ; Not yet
                      06340         rcall   xingetbit       ; Wait for next zero crossing and get bit
                      06341         bc      xinstartloop    ; High bit - no start
                      06342 
                      06343         rcall   xinrcv          ; Get 4 bits
                      06344         movwf   R1 + 1          ; Save house code
                      06345 
                      06346         rcall   xinrcv          ; Get 4 bits
                      06347         movwf   R1              ; Save key code
                      06348         rcall   xingetbit       ; Get last bit
                      06349         btfsc   STATUS, C       ; Key or command?
                      06350         bsf     R1, 4           ; Make it a command
                      06351         rcall   xznext          ; Get rid of last half cycle
                      06352         movf    R1, W           ; Get key/command to W
                      06353 
                      06354       ifdef XINTO_USED
                      06355         bsf     STATUS, C       ; Indicate not timed out (C set)
                      06356       endif
                      06357 xindone goto    DUNN
                      06358 
                      06359 ; Wait for next zero crossing + 250us and get data bit to carry
                      06360 xingetbit rcall xznext          ; Wait for next zero crossing
                      06361 
                      06362         movlw   250             ; Wait 250us
                      06363         call    PAUSEUSB
                      06364 
                      06365         movf    RM1, W          ; Get data bit mask
                      06366         andwf   INDF0, W        ; Isolate current state bit
                      06367         xorwf   RM1, W          ; Flip bit state
                      06368         addlw   -1              ; Move data bit to carry
                      06369         return
                      06370 
                      06371 xinrcv  movlw   4               ; Set bit counter
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06372         movwf   R2 + 1
                      06373 xinrcvloop rcall xingetbit      ; Wait for next zero crossing and get bit
                      06374         rrcf    R2, F           ; Roll bit into result
                      06375         rcall   xznext          ; Skip next zero crossing
                      06376         decfsz  R2 + 1, F       ; Do all the bits
                      06377         bra     xinrcvloop
                      06378         swapf   R2, W
                      06379       ifndef XINXLAT_OFF
                      06380         addlw   -4              ; Subtract 4
                      06381         btfss   WREG, 2         ; Check bit 2 state
                      06382         xorlw   2               ; Flip bit 1
                      06383       endif
                      06384         andlw   0fh             ; Isolate the lower 4
                      06385         return
                      06386   NOLIST
                      06387 DUNN_USED = 1
                      06388 PAUSEUS_USED = 1
                      06389 XZNEXT_USED = 1
                      06390     endif
                      06391 
                      06392 ;****************************************************************
                      06393 ;* XOUT       : Send X-10 data                                  *
                      06394 ;*                                                              *
                      06395 ;* Input      : W = number of cycles                            *
                      06396 ;*            : RS1, RR1 = data port                            *
                      06397 ;*            : RM1 = data bit mask                             *
                      06398 ;*            : RS2, RR2 = zero crossing port                   *
                      06399 ;*            : RM2 = zero crossing bit mask                    *
                      06400 ;*            : R5 = key/command code                           *
                      06401 ;*            : R5 + 1 = house code                             *
                      06402 ;* Output     : None                                            *
                      06403 ;*                                                              *
                      06404 ;* Notes      :                                                 *
                      06405 ;****************************************************************
                      06406 
                      06407     ifdef XOUT_USED
                      06408   LIST
                      06409 XOUT2   movlw   2               ; Default to 2 cycles
                      06410 XOUT    movwf   R2              ; Save number of cycles
                      06411         movff   RS1, FSR0H      ; Point to data port
                      06412         movff   RR1, FSR0L
                      06413         movf    RM1, W          ; Get data bit mask
                      06414         call    LOWT            ; Set data to low, output
                      06415         movff   RR1, FSR0L      ; Point back to port
                      06416 
                      06417         movlw   6               ; Wait for 3 cycles of silence
                      06418         movwf   R2 + 1
                      06419 xoutwait rcall  xznext
                      06420         decfsz  R2 + 1, F
                      06421         bra     xoutwait
                      06422 
                      06423 xoutstart rcall xout1           ; 1 Send start code
                      06424         rcall   xout1           ; 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06425         rcall   xout10          ; 10
                      06426 
                      06427         movf    R5 + 1, W       ; Get house code
                      06428       ifndef XOUTXLAT_OFF
                      06429         rcall   xoutxlat        ; Convert to X-10 code
                      06430       endif
                      06431         movwf   R3
                      06432         movlw   4               ; 4 bits in this package
                      06433         movwf   R2 + 1          ; Save in bit counter
                      06434 xouthloop rrcf  R3, F           ; Get a bit
                      06435         rcall   xoutsend
                      06436         decfsz  R2 + 1, F
                      06437         bra     xouthloop
                      06438 
                      06439         movf    R5, W           ; Get key code
                      06440       ifndef XOUTXLAT_OFF
                      06441         rcall   xoutxlat        ; Convert to X-10 code
                      06442         andlw   0fh             ; Isolate the lower 4
                      06443         btfsc   R5, 4           ; Check for command bit
                      06444         iorlw   10h             ; Put it in result
                      06445       endif
                      06446         movwf   R3
                      06447         movlw   5               ; 5 bits in this package
                      06448         movwf   R2 + 1          ; Save in bit counter
                      06449 xoutkloop rrcf  R3, F           ; Get a bit
                      06450         rcall   xoutsend
                      06451         decfsz  R2 + 1, F
                      06452         bra     xoutkloop
                      06453 
                      06454         decfsz  R2, F           ; Do number of cycles
                      06455         bra     xoutstart
                      06456         goto    DUNN
                      06457 
                      06458 xoutsend bnc     xout01          ; Bit low
                      06459 
                      06460 ; Send a 1 cycle
                      06461 xout10  rcall   xout1           ; Send the high signal
                      06462         bra     xznext          ; Wait for next zero crossing
                      06463 
                      06464 ; Send a 0 cycle
                      06465 xout01  rcall   xznext          ; Wait for next zero crossing
                      06466 ;       bra     xout1           ; Fall through
                      06467 
                      06468 ; At next zero crossing, send a one 3 times with delays
                      06469 xout1   rcall   xznext          ; Wait for next zero crossing
                      06470 
                      06471         movlw   3               ; Bit sent 3 times per cycle
                      06472         movwf   R3 + 1
                      06473 
                      06474 xout1loop movf  RM1, W          ; Get data bit mask
                      06475         iorwf   INDF0, F        ; Set the bit
                      06476 
                      06477         movlw   high 1000       ; Pause 1 ms
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06478         movwf   R0 + 1
                      06479         movlw   low 1000
                      06480         call    PAUSEUS
                      06481 
                      06482         comf    RM1, W          ; Get inverted data bit mask
                      06483         andwf   INDF0, F        ; Clear the bit
                      06484 
                      06485         dcfsnz   R3 + 1, F       ; Done 3?
                      06486         return
                      06487 
                      06488         movlw   high 1770       ; Pause another 1.778ms
                      06489         movwf   R0 + 1
                      06490         movlw   low 1770
                      06491         call    PAUSEUS
                      06492 
                      06493         bra     xout1loop       ; Do it again
                      06494 
                      06495   NOLIST
                      06496 DUNN_USED = 1
                      06497 LOWT_USED = 1
                      06498 PAUSEUS_USED = 1
                      06499 XZNEXT_USED = 1
                      06500       ifndef XOUTXLAT_OFF
                      06501 XOUTXLAT_USED = 1
                      06502       endif
                      06503     endif
                      06504 
                      06505     ifdef XOUTXLAT_USED
                      06506   LIST
                      06507 xoutxlat addlw  4               ; Add 4
                      06508         btfsc   WREG, 2         ; Check bit 2 state
                      06509         xorlw   2               ; Flip bit 1
                      06510         return                  ; That's it
                      06511   NOLIST
                      06512     endif
                      06513 
                      06514     ifdef XZNEXT_USED
                      06515   LIST
                      06516 xznext  movff   RS2, FSR1H      ; Wait for next zero crossing
                      06517         movf    RR2, W          ; Point to zero crossing TRIS
                      06518         addlw   12h
                      06519         movwf   FSR1L
                      06520         movf    RM2, W          ; Get zero crossing bit mask
                      06521         iorwf   INDF1, F        ; Set to input
                      06522         movff   RR2, FSR1L      ; Point back to port
                      06523         andwf   INDF1, W        ; Isolate current state bit
                      06524         movwf   R0              ; Save state
                      06525 
                      06526 xznloop movf    RM2, W          ; Get zero crossing bit mask
                      06527         andwf   INDF1, W        ; Isolate current state bit
                      06528         xorwf   R0, W           ; Compare to previous state
                      06529         bz      xznloop         ; Wait till different
                      06530         return
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06531   NOLIST
                      06532     endif
                      06533 
                      06534 ;****************************************************************
                      06535 ;* Low level pin routines                                       *
                      06536 ;****************************************************************
                      06537 
                      06538 ;****************************************************************
                      06539 ;* HIGH       : Set pin high, output                            *
                      06540 ;*                                                              *
                      06541 ;* Input      : W = Pin                                         *
                      06542 ;* Output     : None                                            *
                      06543 ;*                                                              *
                      06544 ;* Notes      :                                                 *
                      06545 ;****************************************************************
                      06546 
                      06547     ifdef HIGH_USED
                      06548   LIST
                      06549 HIGHP   rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06550   NOLIST
                      06551 CONVPIN_USED = 1
                      06552 HIGHT_USED = 1
                      06553     endif
                      06554 
                      06555     ifdef HIGHT_USED
                      06556   LIST
                      06557 HIGHT   iorwf   INDF0, F        ; Set bit high
                      06558         bra     OUTPUTT         ; Make sure it's an output
                      06559   NOLIST
                      06560 OUTPUTT_USED = 1
                      06561     endif
                      06562 
                      06563 ;****************************************************************
                      06564 ;* LOW        : Set pin low, output                             *
                      06565 ;*                                                              *
                      06566 ;* Input      : W = Pin                                         *
                      06567 ;* Output     : None                                            *
                      06568 ;*                                                              *
                      06569 ;* Notes      :                                                 *
                      06570 ;****************************************************************
                      06571 
                      06572     ifdef LOW_USED
                      06573   LIST
                      06574 LOWP    rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06575   NOLIST
                      06576 CONVPIN_USED = 1
                      06577 LOWT_USED = 1
                      06578     endif
                      06579 
                      06580     ifdef LOWT_USED
                      06581   LIST
                      06582 LOWT    xorlw   0ffh            ; Invert bit mask
                      06583         andwf   INDF0, F        ; Set bit low
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06584         bra     OUTPUTI         ; Make sure it's an output
                      06585   NOLIST
                      06586 OUTPUTI_USED = 1
                      06587     endif
                      06588 
                      06589 ;****************************************************************
                      06590 ;* TOGGLE     : Toggle pin's state                              *
                      06591 ;*                                                              *
                      06592 ;* Input      : W = Pin                                         *
                      06593 ;* Output     : None                                            *
                      06594 ;*                                                              *
                      06595 ;* Notes      :                                                 *
                      06596 ;****************************************************************
                      06597 
                      06598     ifdef TOGGLE_USED
                      06599   LIST
                      06600 TOGGLE  rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06601         xorwf   INDF0, F        ; Flip bit
                      06602         bra     OUTPUTT         ; Make sure it's an output
                      06603   NOLIST
                      06604 CONVPIN_USED = 1
                      06605 OUTPUTT_USED = 1
                      06606     endif
                      06607 
                      06608 ;****************************************************************
                      06609 ;* INPUT      : Set pin to input                                *
                      06610 ;*                                                              *
                      06611 ;* Input      : W = Pin                                         *
                      06612 ;* Output     : None                                            *
                      06613 ;*                                                              *
                      06614 ;* Notes      :                                                 *
                      06615 ;****************************************************************
                      06616 
                      06617     ifdef INPUT_USED
                      06618   LIST
                      06619 INPUT   rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06620   NOLIST
                      06621 CONVPIN_USED = 1
                      06622 INPUTT_USED = 1
                      06623     endif
                      06624 
                      06625     ifdef INPUTT_USED
                      06626   LIST
                      06627 INPUTT  bsf     FSR0L, 4        ; Point to TRIS register
                      06628         incf    FSR0L, F
                      06629         iorwf   PREINC0, F      ; Set bit to input
                      06630         goto    DUNN            ; Done
                      06631   NOLIST
                      06632 DUNN_USED = 1
                      06633     endif
                      06634 
                      06635 ;****************************************************************
                      06636 ;* OUTPUT     : Set pin to output                               *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06637 ;*                                                              *
                      06638 ;* Input      : W = Pin                                         *
                      06639 ;* Output     : None                                            *
                      06640 ;*                                                              *
                      06641 ;* Notes      :                                                 *
                      06642 ;****************************************************************
                      06643 
                      06644     ifdef OUTPUT_USED
                      06645   LIST
                      06646 OUTPUT  rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06647   NOLIST
                      06648 CONVPIN_USED = 1
                      06649 OUTPUTT_USED = 1
                      06650     endif
                      06651 
                      06652     ifdef OUTPUTT_USED
                      06653   LIST
                      06654 OUTPUTT xorlw   0ffh            ; Invert bit mask
                      06655   NOLIST
                      06656 OUTPUTI_USED = 1
                      06657     endif
                      06658 
                      06659     ifdef OUTPUTI_USED
                      06660   LIST
                      06661 OUTPUTI bsf     FSR0L, 4        ; Point to TRIS register
                      06662         incf    FSR0L, F
                      06663         andwf   PREINC0, F      ; Set bit to output
                      06664         goto    DUNN            ; Done
                      06665   NOLIST
                      06666 DUNN_USED = 1
                      06667     endif
                      06668 
                      06669 ;****************************************************************
                      06670 ;* REVERSE    : Reverse pin's input/output state                *
                      06671 ;*                                                              *
                      06672 ;* Input      : W = Pin                                         *
                      06673 ;* Output     : None                                            *
                      06674 ;*                                                              *
                      06675 ;* Notes      :                                                 *
                      06676 ;****************************************************************
                      06677 
                      06678     ifdef REVERSE_USED
                      06679   LIST
                      06680 REVERSE rcall   CONVPIN         ; Convert pin to FSR and bit mask
                      06681         bsf     FSR0L, 4        ; Point to TRIS register
                      06682         incf    FSR0L, F
                      06683         xorwf   PREINC0, F      ; Flip bit
                      06684         goto    DUNN            ; Done
                      06685   NOLIST
                      06686 CONVPIN_USED = 1
                      06687 DUNN_USED = 1
                      06688     endif
                      06689 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06690 ;****************************************************************
                      06691 ;* PINR1      : Set RR1, RS1 and RM1 to pin                     *
                      06692 ;*                                                              *
                      06693 ;* Input      : W = pin                                         *
                      06694 ;* Output     : RR1 = port low                                  *
                      06695 ;*            : RS1 = port high                                 *
                      06696 ;*            : RM1 = bit mask                                  *
                      06697 ;*                                                              *
                      06698 ;* Notes      :                                                 *
                      06699 ;****************************************************************
                      06700 
                      06701     ifdef PINR1_USED
                      06702   LIST
                      06703 PINR1   rcall   CONVPIN
                      06704         movwf   RM1
                      06705         movff   FSR0H, RS1
                      06706         movff   FSR0L, RR1
                      06707         goto    DUNN
                      06708   NOLIST
                      06709 CONVPIN_USED = 1
                      06710 DUNN_USED = 1
                      06711     endif
                      06712 
                      06713 ;****************************************************************
                      06714 ;* PINR2      : Set RR2, RS2 and RM2 to pin                     *
                      06715 ;*                                                              *
                      06716 ;* Input      : W = pin                                         *
                      06717 ;* Output     : RR2 = port low                                  *
                      06718 ;*            : RS2 = port high                                 *
                      06719 ;*            : RM2 = bit mask                                  *
                      06720 ;*                                                              *
                      06721 ;* Notes      :                                                 *
                      06722 ;****************************************************************
                      06723 
                      06724     ifdef PINR2_USED
                      06725   LIST
                      06726 PINR2   rcall   CONVPIN
                      06727         movwf   RM2
                      06728         movff   FSR0H, RS2
                      06729         movff   FSR0L, RR2
                      06730         goto    DUNN
                      06731   NOLIST
                      06732 CONVPIN_USED = 1
                      06733 DUNN_USED = 1
                      06734     endif
                      06735 
                      06736 ;****************************************************************
                      06737 ;* CONVPIN    : Convert pin number to FSR0 and bit mask         *
                      06738 ;*                                                              *
                      06739 ;* Input      : W = Pin (0 - 15)                                *
                      06740 ;* Output     : FSR0 = register                                 *
                      06741 ;*            : W = bit mask                                    *
                      06742 ;*                                                              *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06743 ;* Notes      : Falls through to CONVBIT.                       *
                      06744 ;****************************************************************
                      06745 
                      06746     ifdef CONVPIN_USED
                      06747   LIST
                      06748 CONVPIN movwf   R4              ; Store pin number for CONVBIT
                      06749       ifdef USE_LFSR
                      06750         lfsr    0, _PORTL
                      06751         btfsc   R4, 3           ; Pin >= 8 ?
                      06752         lfsr    0, _PORTH       ; Yes
                      06753       else
                      06754         movlw   low (_PORTL)
                      06755         btfsc   R4, 3           ; Pin >= 8 ?
                      06756         movlw   low (_PORTH)    ; Yes
                      06757         movwf   FSR0L
                      06758         movlw   high (_PORTL)
                      06759         btfsc   R4, 3           ; Pin >= 8 ?
                      06760         movlw   high (_PORTH)   ; Yes
                      06761         movwf   FSR0H           ; Fall through to CONVBIT
                      06762       endif
                      06763   NOLIST
                      06764 CONVBIT_USED = 1
                      06765     endif
                      06766 
                      06767     ifdef DCD_USED
                      06768 CONVBIT_USED = 1
                      06769     endif
                      06770 
                      06771 ;****************************************************************
                      06772 ;* CONVBIT    : Convert bit number to bit mask                  *
                      06773 ;*                                                              *
                      06774 ;* Input      : R4 = bit (0 - 7)                                *
                      06775 ;* Output     : W = bit mask                                    *
                      06776 ;*                                                              *
                      06777 ;* Notes      :                                                 *
                      06778 ;****************************************************************
                      06779 
                      06780     ifdef CONVBIT_USED
                      06781   LIST
                      06782 CONVBIT movlw   1               ; Start with 1 for 0
                      06783         btfsc   R4, 0
                      06784         rlncf   WREG, W         ; Times 2 for 1 or 3
                      06785         btfsc   R4, 1
                      06786         rlncf   WREG, W         ; Times 4 for 2 or 3
                      06787         btfsc   R4, 1
                      06788         rlncf   WREG, W
                      06789         btfsc   R4, 2
                      06790         swapf   WREG, W         ; Swap to top if 4 to 7
                      06791         return
                      06792   NOLIST
                      06793     endif
                      06794 
                      06795 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06796 ;* Non-pin routines                                             *
                      06797 ;****************************************************************
                      06798 
                      06799 ;****************************************************************
                      06800 ;* ADCIN      : Get data from ADC                               *
                      06801 ;*                                                              *
                      06802 ;* Input      : W = channel                                     *
                      06803 ;* Output     : R0 + 1, W                                       *
                      06804 ;*                                                              *
                      06805 ;* Notes      : TRIS and ADCON1 must already be set.            *
                      06806 ;****************************************************************
                      06807 
                      06808     ifdef ADCIN_USED
                      06809   LIST
                      06810 ADCIN
                      06811       ifdef ADCHS
                      06812         movwf   ADCHS           ; Set the channel
                      06813         bcf     ADCON0, ACONV   ; Set to single-shot mode
                      06814         movf    ADCON2, W       ; Set the clock source
                      06815         andlw   0f8h            ; Don't disturb any other settings
                      06816         iorlw   (ADC_CLOCK) & 7
                      06817         movwf   ADCON2
                      06818         bsf     ADCON0, ADON    ; Turn on ADC (must wait 5-10us)
                      06819       else
                      06820           if (GO_DONE == 1)
                      06821         rlcf    WREG, W         ; Move channel into proper position
                      06822         rlcf    WREG, W
                      06823         andlw   0fch            ; Mask channel
                      06824         iorlw   1               ; Turn on ADC
                      06825         iorwf   ADCON0, F       ; Set the one bits
                      06826             ifdef ADC_CHANNELS
                      06827         iorlw   080h
                      06828             else
                      06829         iorlw   0c0h
                      06830             endif
                      06831         andwf   ADCON0, F       ; Clear the zero bits
                      06832             ifdef ADCON2
                      06833         movf    ADCON2, W       ; Set the clock source
                      06834             else
                      06835         movf    ADCON1, W       ; Set the clock source
                      06836             endif
                      06837         andlw   0f8h
                      06838         iorlw   (ADC_CLOCK) & 7
                      06839             ifdef ADCON2
                      06840         movwf   ADCON2
                      06841             else
                      06842         movwf   ADCON1
                      06843             endif
                      06844           else
                      06845         rlcf    WREG, W         ; Move channel into proper position
                      06846         rlcf    WREG, W
                      06847         rlcf    WREG, W
                      06848         andlw   038h            ; Mask channel
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06849         iorlw   (((ADC_CLOCK) & 3) << 6) | 1    ; Set the clock source and turn on ADC
                      06850         movwf   ADCON0
                      06851           endif
                      06852       endif
                      06853       if ((ADC_SAMPLEUS) != 0)
                      06854         movlw   (ADC_SAMPLEUS) >> 8     ; Get sample time
                      06855         movwf   R0 + 1
                      06856         movlw   low (ADC_SAMPLEUS)
                      06857         call    PAUSEUS         ; Wait sample time
                      06858       endif
                      06859         bsf     ADCON0, GO_DONE ; Start conversion
                      06860 adcinloop btfsc ADCON0, GO_DONE ; Wait for conversion to complete
                      06861         bra     adcinloop
                      06862       if ((ADC_BITS) <= 8)
                      06863         clrf    R0 + 1
                      06864         movf    ADRESH, W       ; Get 8-bit result
                      06865       else
                      06866         movf    ADRESH, W       ; Get 16-bit result
                      06867         movwf   R0 + 1
                      06868         movf    ADRESL, W
                      06869       endif
                      06870         goto    DUNN
                      06871   NOLIST
                      06872 DUNN_USED = 1
                      06873 PAUSEUS_USED = 1
                      06874     endif
                      06875 
                      06876 ;****************************************************************
                      06877 ;* ERASECODE  : Erase flash code space block                    *
                      06878 ;*                                                              *
                      06879 ;* Input      : TBLPTRU, H, W                                   *
                      06880 ;* Output     : None                                            *
                      06881 ;*                                                              *
                      06882 ;* Notes      :                                                 *
                      06883 ;****************************************************************
                      06884 
                      06885     ifdef ERASECODE_USED
                      06886   LIST
                      06887 ERASECODE movwf TBLPTRL         ; Save address low
                      06888         movlw   94h             ; EEPGD, FREE, WREN = 1, CFGS = 0
                      06889         movwf   EECON1
                      06890         movlw   55h             ; Unlock the door
                      06891         movwf   EECON2
                      06892         movlw   0AAh
                      06893         movwf   EECON2
                      06894         bsf     EECON1, WR      ; Do the erase
                      06895         nop                     ; Needed for code write
                      06896         bcf     EECON1, WREN    ; Lock up when we're done
                      06897         goto    DUNN            ; Done
                      06898   NOLIST
                      06899 DUNN_USED = 1
                      06900     endif
                      06901 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06902 ;****************************************************************
                      06903 ;* RANDOM     : Generate random number                          *
                      06904 ;*                                                              *
                      06905 ;* Input      : R0 = seed                                       *
                      06906 ;* Output     : R0 = result                                     *
                      06907 ;*                                                              *
                      06908 ;* Notes      : 22 cycles including call and DUNN.              *
                      06909 ;****************************************************************
                      06910 
                      06911     ifdef RANDOM_USED
                      06912   LIST
                      06913 RANDOM  movf    R0 + 1, W       ; 1     Assure Seed <> 0
                      06914         iorwf   R0, W           ; 1
                      06915         btfsc   STATUS, Z       ; 1 / 2 Nudge Seed to 1
                      06916         incf    R0, F           ; 1 / 0
                      06917         movlw   80h             ; 1     Tap Bit 15
                      06918         btfsc   R0, 4           ; 1 / 2 Tap Bit 4
                      06919         xorwf   R0 + 1, F       ; 1 / 0
                      06920         btfsc   R0, 2           ; 1 / 2 Tap Bit 2
                      06921         xorwf   R0 + 1, F       ; 1 / 0
                      06922         btfsc   R0, 1           ; 1 / 2 Tap Bit 1
                      06923         xorwf   R0 + 1, F       ; 1
                      06924         rlcf    R0 + 1, W       ; 1     C = New Bit
                      06925         rlcf    R0, F           ; 1     Rotate Left
                      06926         rlcf    R0 + 1, F       ; 1
                      06927         goto    DUNN            ; 6 + 2 Done
                      06928   NOLIST
                      06929 DUNN_USED = 1
                      06930     endif
                      06931 
                      06932 ;****************************************************************
                      06933 ;* READ       : Read data from on-chip EEPROM                   *
                      06934 ;*                                                              *
                      06935 ;* Input      : EEADRH, EEADR = address                         *
                      06936 ;* Output     : W = data                                        *
                      06937 ;*                                                              *
                      06938 ;* Notes      :                                                 *
                      06939 ;****************************************************************
                      06940 
                      06941     ifdef READ_USED
                      06942   LIST
                      06943 READ    clrf    EECON1          ; Read from data memory
                      06944         bsf     EECON1, RD      ; Read the EEPROM
                      06945         movf    EEDATA, W       ; Get the data
                      06946 READINC
                      06947       ifdef EEADRH
                      06948         infsnz  EEADR, F        ; Bump up address
                      06949         incf    EEADRH, F
                      06950       else
                      06951         incf    EEADR, F        ; Bump up address
                      06952       endif
                      06953         goto    DUNN            ; Done
                      06954   NOLIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06955 DUNN_USED = 1
                      06956     endif
                      06957 
                      06958 ;****************************************************************
                      06959 ;* READCODE   : Read from code space                            *
                      06960 ;*                                                              *
                      06961 ;* Input      : TBLPTRU, H, L                                   *
                      06962 ;* Output     : W = data low                                    *
                      06963 ;*            : TABLAT = data high                              *
                      06964 ;*                                                              *
                      06965 ;* Notes      :                                                 *
                      06966 ;****************************************************************
                      06967 
                      06968     ifdef READCODEW_USED
                      06969 READCODE_USED = 1
                      06970     endif
                      06971 
                      06972     ifdef READCODE_USED
                      06973   LIST
                      06974 READCODE
                      06975       ifdef EECON1
                      06976         movlw   80h             ; EEPGD = 1, CFGS = 0
                      06977         movwf   EECON1
                      06978       endif
                      06979         tblrd*+                 ; Read a byte and increment
                      06980         movf    TABLAT, W       ; Get low byte to W
                      06981       ifdef READCODEW_USED
                      06982         tblrd*                  ; Read next byte
                      06983       endif
                      06984         goto    DUNN            ; Done
                      06985   NOLIST
                      06986 DUNN_USED = 1
                      06987     endif
                      06988 
                      06989 ;****************************************************************
                      06990 ;* WRITE      : Write data to on-chip EEPROM                    *
                      06991 ;*                                                              *
                      06992 ;* Input      : W = data                                        *
                      06993 ;*            : EEADRH, EEADR = address                         *
                      06994 ;* Output     : None                                            *
                      06995 ;*                                                              *
                      06996 ;* Notes      :                                                 *
                      06997 ;****************************************************************
                      06998 
                      06999     ifdef WRITE_USED
                      07000   LIST
                      07001 WRITEZ  clrf    WREG            ; Data is 0
                      07002 WRITE   movwf   EEDATA          ; Set the EEPROM data
                      07003         clrf    EECON1          ; Write to data memory
                      07004         bsf     EECON1, WREN
                      07005       ifdef WRITE_INT
                      07006         bcf     INTCON, GIE     ; Disable global interrupts
                      07007         btfsc   INTCON, GIE     ; See AN576
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07008         bra     $ - 4
                      07009       endif      
                      07010         movlw   55h             ; Unlock the door
                      07011         movwf   EECON2
                      07012         movlw   0AAh
                      07013         movwf   EECON2
                      07014         bsf     EECON1, WR      ; Do the write
                      07015       ifdef WRITE_INT
                      07016         bsf     INTCON, GIE     ; Enable global interrupts
                      07017       endif      
                      07018 writeloop btfsc EECON1, WR      ; Wait for the write to complete
                      07019         bra     writeloop
                      07020         bcf     EECON1, WREN    ; Lock up when we're done
                      07021       ifdef EEADRH
                      07022         infsnz  EEADR, F        ; Bump up address
                      07023         incf    EEADRH, F
                      07024       else
                      07025         incf    EEADR, F        ; Bump up address
                      07026       endif
                      07027         goto    DUNN            ; Done
                      07028   NOLIST
                      07029 DUNN_USED = 1
                      07030     endif
                      07031 
                      07032 ;****************************************************************
                      07033 ;* WRITECODE  : Write to flash code space                       *
                      07034 ;*                                                              *
                      07035 ;* Input      : TBLPTRU, H, L                                   *
                      07036 ;*            : W = data                                        *
                      07037 ;* Output     : None                                            *
                      07038 ;*                                                              *
                      07039 ;* Notes      :                                                 *
                      07040 ;****************************************************************
                      07041 
                      07042     ifdef WRITECODE_USED
                      07043   LIST
                      07044 WRITECODE movwf TABLAT          ; Write byte
                      07045         tblwt*
                      07046         incf    TBLPTRL, W      ; Check for end of block
                      07047         andlw   (BLOCK_SIZE) - 1        ; If lower bits 0 then end of block
                      07048         bnz     writecodedone   ; Not final write
                      07049         movlw   84h             ; EEPGD, WREN = 1, CFGS = 0
                      07050         movwf   EECON1
                      07051       ifdef WRITE_INT
                      07052         bcf     INTCON, GIE     ; Disable global interrupts
                      07053         btfsc   INTCON, GIE     ; See AN576
                      07054         bra     $ - 4
                      07055       endif      
                      07056         movlw   55h             ; Unlock the door
                      07057         movwf   EECON2
                      07058         movlw   0AAh
                      07059         movwf   EECON2
                      07060         bsf     EECON1, WR      ; Do the write
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07061         nop                     ; Needed for code write
                      07062       ifdef WRITE_INT
                      07063         bsf     INTCON, GIE     ; Enable global interrupts
                      07064       endif      
                      07065         bcf     EECON1, WREN    ; Lock up when we're done
                      07066 writecodedone goto DUNN         ; Done
                      07067   NOLIST
                      07068 DUNN_USED = 1
                      07069     endif
                      07070 
                      07071 ;****************************************************************
                      07072 ;* Timing routines                                              *
                      07073 ;****************************************************************
                      07074 
                      07075 ;****************************************************************
                      07076 ;* PAUSE      : Pause n milliseconds                            *
                      07077 ;*                                                              *
                      07078 ;* Input      : R1 + 1, W = milliseconds                        *
                      07079 ;* Output     : None                                            *
                      07080 ;*                                                              *
                      07081 ;* Notes      :                                                 *
                      07082 ;****************************************************************
                      07083 
                      07084     ifdef PAUSE_USED
                      07085 ; PAUSE_DELAY = 1000 - ((loop cycles * 4 + (OSC / 2)) / OSC)
                      07086       if (OSC == 3)
                      07087 PAUSE_DELAY = 988
                      07088       else
                      07089 PAUSE_DELAY = 1000 - ((40 + ((OSC) / 2)) / (OSC))
                      07090       endif
                      07091   LIST
                      07092 PAUSEB  clrf    R1 + 1
                      07093 PAUSEW  clrf    R1 + 2
                      07094         clrf    R1 + 3
                      07095 PAUSE   movwf   R1
                      07096 pauseloop clrf  WREG            ; 1 (10) Clear W for subtracts
                      07097         decf    R1, F           ; 1
                      07098         subwfb  R1 + 1, F       ; 1
                      07099         subwfb  R1 + 2, F       ; 1
                      07100         subwfb  R1 + 3, F       ; 1
                      07101         btfss   STATUS, C       ; 2
                      07102         goto    DUNN
                      07103         movlw   (PAUSE_DELAY) >> 8      ; 1
                      07104         movwf   R0 + 1          ; 1
                      07105         movlw   low (PAUSE_DELAY)       ; 1
                      07106         rcall   PAUSEUS         ; -2 (PAUSEUS gives you 2 less than you ask for)
                      07107         bra     pauseloop       ; 2
                      07108   NOLIST
                      07109 DUNN_USED = 1
                      07110 PAUSEUS_USED = 1
                      07111     endif
                      07112 
                      07113     ifdef PAUSEUS_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07114 ;****************************************************************
                      07115 ;* PAUSEUS    : Pause n microseconds at 3.58MHz                 *
                      07116 ;*                                                              *
                      07117 ;* Input      : R0 + 1, W = microseconds                        *
                      07118 ;* Output     : None                                            *
                      07119 ;*                                                              *
                      07120 ;* Notes      : minimum 20us (Somewhat uncalibrated)            *
                      07121 ;****************************************************************
                      07122 
                      07123       if (OSC == 3)
                      07124   LIST
                      07125 PAUSEUSB clrf   R0 + 1          ; 1
                      07126 PAUSEUS movwf   R0              ; 1
                      07127         movlw   -30             ; 1 Subtract overhead
                      07128         bra     pauseush        ; 2 Skip next
                      07129 pauseusloop movlw -10           ; 1 (10 / 9)
                      07130 pauseush CLRWDT?NOP             ; 1 Keep Watchdog clear
                      07131         addwf   R0, F           ; 1
                      07132         movlw   -1              ; 1
                      07133         btfss   STATUS, C       ; 1 / 2
                      07134         addwf   R0 + 1, F       ; 1
                      07135         btfsc   STATUS, C       ; 1 / 2
                      07136         bra     pauseusloop     ; 2
                      07137         return                  ; 2 + 3 (call + setup)
                      07138   NOLIST
                      07139       endif
                      07140 
                      07141 ;****************************************************************
                      07142 ;* PAUSEUS    : Pause n microseconds at 4MHz                    *
                      07143 ;*                                                              *
                      07144 ;* Input      : R0 + 1, W = microseconds                        *
                      07145 ;* Output     : None                                            *
                      07146 ;*                                                              *
                      07147 ;* Notes      : minimum 19us                                    *
                      07148 ;****************************************************************
                      07149 
                      07150       if (OSC == 4)
                      07151   LIST
                      07152 PAUSEUSB clrf   R0 + 1          ; 1
                      07153 PAUSEUS addlw   -23             ; 1 Subtract overhead
                      07154         movwf   R0              ; 1
                      07155         movlw   -4              ; 1
                      07156         bnc     pauseush        ; 1 / 2
                      07157         nop                     ; 1
                      07158 pauseusloop CLRWDT?NOP          ; 1
                      07159         addwf   R0, F           ; 1
                      07160         bc      pauseusloop     ; 1 / 2
                      07161         nop                     ; 1
                      07162 pauseush addwf  R0, F           ; 1
                      07163         decf    R0 + 1, F       ; 1
                      07164         bc      pauseusloop     ; 1 / 2
                      07165         btfsc   R0, 0           ; 1 / 2
                      07166         bra     $ + 2           ; 2 / 0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07167         btfss   R0, 1           ; 1 / 2
                      07168         bra     pauseusdone     ; 2 / 0
                      07169         bra     $ + 2           ; 0 / 2
                      07170         nop                     ; 0 / 1
                      07171 pauseusdone return              ; 2 + 3 (call + setup)
                      07172   NOLIST
                      07173       endif
                      07174 
                      07175 ;****************************************************************
                      07176 ;* PAUSEUS    : Pause n microseconds at 8MHz                    *
                      07177 ;*                                                              *
                      07178 ;* Input      : R0 + 1, W = microseconds                        *
                      07179 ;* Output     : None                                            *
                      07180 ;*                                                              *
                      07181 ;* Notes      : minimum 9us                                     *
                      07182 ;****************************************************************
                      07183 
                      07184       if (OSC == 8)
                      07185   LIST
                      07186 PAUSEUSB clrf   R0 + 1          ; 1
                      07187 PAUSEUS addlw   -11             ; 1 Subtract overhead
                      07188         movwf   R0              ; 1
                      07189         movlw   -2              ; 1
                      07190         bnc     pauseush        ; 1 / 2
                      07191         bra     $ + 2           ; 2
                      07192 pauseusloop CLRWDT?NOP          ; 1
                      07193         addwf   R0, F           ; 1
                      07194         bc      pauseusloop     ; 1 / 2
                      07195 pauseush nop                    ; 1
                      07196         addwf   R0, F           ; 1
                      07197         decf    R0 + 1, F       ; 1
                      07198         bc      pauseusloop     ; 1 / 2
                      07199         btfss   R0, 0           ; 1 / 2
                      07200         bra     pauseusdone     ; 2 / 0
                      07201         bra     $ + 2           ; 0 / 2
                      07202         nop                     ; 0 / 1
                      07203 pauseusdone return              ; 2 + 3 (call + setup)
                      07204   NOLIST
                      07205       endif
                      07206 
                      07207 ;****************************************************************
                      07208 ;* PAUSEUS    : Pause n microseconds at 10MHz                   *
                      07209 ;*                                                              *
                      07210 ;* Input      : R0 + 1, W = microseconds                        *
                      07211 ;* Output     : None                                            *
                      07212 ;*                                                              *
                      07213 ;* Notes      : minimum 7us                                     *
                      07214 ;****************************************************************
                      07215 
                      07216       if (OSC == 10)
                      07217   LIST
                      07218 PAUSEUSB clrf   R0 + 1          ; 1
                      07219 PAUSEUS addlw   -9              ; 1 Subtract overhead
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07220         movwf   R0              ; 1
                      07221         movlw   -2              ; 1
                      07222         bnc     pauseush        ; 1 / 2
                      07223         bra     $ + 2           ; 2
                      07224         bra     $ + 2           ; 2
                      07225 pauseusloop addwf R0, F         ; 1
                      07226         btfss   STATUS, C       ; 1 / 2
                      07227 pauseush decf   R0 + 1, F       ; 1 / 0
                      07228         bc      pauseusloop     ; 1 / 2
                      07229         CLRWDT?NOP              ; 1
                      07230         btfss   R0, 0           ; 1 / 2
                      07231         bra     pauseusdone     ; 2 / 0
                      07232         bra     $ + 2           ; 0 / 2
                      07233         bra     $ + 2           ; 0 / 2
                      07234 pauseusdone return              ; 2 + 3 (call + setup)
                      07235   NOLIST
                      07236       endif
                      07237 
                      07238 ;****************************************************************
                      07239 ;* PAUSEUS    : Pause n microseconds at 12MHz                   *
                      07240 ;*                                                              *
                      07241 ;* Input      : R0 + 1, W = microseconds                        *
                      07242 ;* Output     : None                                            *
                      07243 ;*                                                              *
                      07244 ;* Notes      : minimum 5us                                     *
                      07245 ;****************************************************************
                      07246 
                      07247       if (OSC == 12)
                      07248   LIST
                      07249 PAUSEUSB clrf   R0 + 1          ; 1
                      07250 PAUSEUS addlw   -6              ; 1 Subtract overhead
                      07251         movwf   R0              ; 1
                      07252         nop                     ; 1
                      07253         bnc     pauseush        ; 1 / 2
                      07254         bra     $ + 2           ; 2
                      07255 pauseusloop decf R0, F          ; 1
                      07256         bc      pauseusloop     ; 1 / 2
                      07257 pauseush decf   R0, F           ; 1
                      07258         decf    R0 + 1, F       ; 1
                      07259         bc      pauseusloop     ; 1 / 2
                      07260         CLRWDT?NOP              ; 1
                      07261         return                  ; 2 + 3 (call + setup)
                      07262   NOLIST
                      07263       endif
                      07264 
                      07265 ;****************************************************************
                      07266 ;* PAUSEUS    : Pause n microseconds at 16MHz                   *
                      07267 ;*                                                              *
                      07268 ;* Input      : R0 + 1, W = microseconds                        *
                      07269 ;* Output     : None                                            *
                      07270 ;*                                                              *
                      07271 ;* Notes      : minimum 4us                                     *
                      07272 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07273 
                      07274       if (OSC == 16)
                      07275   LIST
                      07276 PAUSEUSB clrf   R0 + 1          ; 1
                      07277 PAUSEUS addlw   -5              ; 1 Subtract overhead
                      07278         movwf   R0              ; 1
                      07279         bra     $ + 2           ; 2
                      07280         clrf    WREG            ; 1
                      07281         bra     pauseush        ; 2
                      07282 pauseusloop decf R0, F          ; 1
                      07283 pauseush subwfb R0 + 1, F       ; 1
                      07284         bc      pauseusloop     ; 1 / 2
                      07285         CLRWDT?NOP              ; 1
                      07286         return                  ; 2 + 3 (call + setup)
                      07287   NOLIST
                      07288       endif
                      07289 
                      07290 ;****************************************************************
                      07291 ;* PAUSEUS    : Pause n microseconds at 20MHz                   *
                      07292 ;*                                                              *
                      07293 ;* Input      : R0 + 1, W = microseconds                        *
                      07294 ;* Output     : None                                            *
                      07295 ;*                                                              *
                      07296 ;* Notes      : minimum 3us                                     *
                      07297 ;****************************************************************
                      07298 
                      07299       if (OSC == 20)
                      07300   LIST
                      07301 PAUSEUSB clrf   R0 + 1          ; 1
                      07302 PAUSEUS addlw   -4              ; 1 Subtract overhead
                      07303         movwf   R0              ; 1
                      07304         nop                     ; 1
                      07305         clrf    WREG            ; 1
                      07306         bra     pauseush        ; 2
                      07307 pauseusloop decf R0, F          ; 1
                      07308 pauseush CLRWDT?NOP             ; 1
                      07309         subwfb  R0 + 1, F       ; 1
                      07310         bc      pauseusloop     ; 1 / 2
                      07311         return                  ; 2 + 3 (call + setup)
                      07312   NOLIST
                      07313       endif
                      07314 
                      07315 ;****************************************************************
                      07316 ;* PAUSEUS    : Pause n microseconds at 24MHz                   *
                      07317 ;*                                                              *
                      07318 ;* Input      : R0 + 1, W = microseconds                        *
                      07319 ;* Output     : None                                            *
                      07320 ;*                                                              *
                      07321 ;* Notes      : minimum 2us                                     *
                      07322 ;****************************************************************
                      07323 
                      07324       if (OSC == 24)
                      07325   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07326 PAUSEUSB clrf   R0 + 1          ; 1
                      07327 PAUSEUS addlw   -3              ; 1 Subtract overhead
                      07328         movwf   R0              ; 1
                      07329         clrf    WREG            ; 1
                      07330 pauseusloop subwfb R0 + 1, F    ; 1
                      07331         bc      pauseusc        ; 1 / 2
                      07332         CLRWDT?NOP              ; 1
                      07333         return                  ; 2 + 3 (call + setup)
                      07334 pauseusc decf   R0, F           ; 1
                      07335         bra     pauseusloop     ; 2
                      07336   NOLIST
                      07337       endif
                      07338 
                      07339 ;****************************************************************
                      07340 ;* PAUSEUS    : Pause n microseconds at 25MHz                   *
                      07341 ;*                                                              *
                      07342 ;* Input      : R0 + 1, W = microseconds                        *
                      07343 ;* Output     : None                                            *
                      07344 ;*                                                              *
                      07345 ;* Notes      : minimum 2us                                     *
                      07346 ;****************************************************************
                      07347 
                      07348       if (OSC == 25)
                      07349   LIST
                      07350 PAUSEUSB clrf   R0 + 1          ; 1
                      07351 PAUSEUS addlw   -3              ; 1 Subtract overhead
                      07352         movwf   R0              ; 1
                      07353         movlw   -1              ; 1
                      07354         bra     pauseush        ; 2
                      07355 pauseusloop addwf R0, F         ; 1
                      07356 pauseush CLRWDT?NOP             ; 1
                      07357         btfss   STATUS, C       ; 1 / 2
                      07358         addwf   R0 + 1, F       ; 1 / 0
                      07359         btfss   STATUS, C       ; 1 / 2
                      07360         return                  ; 2 + 3 (call + setup)
                      07361         nop                     ; 1
                      07362         addwf   R0, F           ; 1
                      07363         btfss   STATUS, C       ; 1 / 2
                      07364         addwf   R0 + 1, F       ; 1 / 0
                      07365         btfss   STATUS, C       ; 1 / 2
                      07366         return                  ; 2 + 3 (call + setup)
                      07367         nop                     ; 1
                      07368         addwf   R0, F           ; 1
                      07369         btfss   STATUS, C       ; 1 / 2
                      07370         addwf   R0 + 1, F       ; 1 / 0
                      07371         btfss   STATUS, C       ; 1 / 2
                      07372         return                  ; 2 + 3 (call + setup)
                      07373         addwf   R0, F           ; 1
                      07374         btfss   STATUS, C       ; 1 / 2
                      07375         addwf   R0 + 1, F       ; 1 / 0
                      07376         btfss   STATUS, C       ; 1 / 2
                      07377         return                  ; 2 + 3 (call + setup)
                      07378         bra     pauseusloop     ; 2
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07379   NOLIST
                      07380       endif
                      07381 
                      07382 ;****************************************************************
                      07383 ;* PAUSEUS    : Pause n microseconds at 32MHz                   *
                      07384 ;*                                                              *
                      07385 ;* Input      : R0 + 1, W = microseconds                        *
                      07386 ;* Output     : None                                            *
                      07387 ;*                                                              *
                      07388 ;* Notes      : minimum 2us                                     *
                      07389 ;****************************************************************
                      07390 
                      07391       if (OSC == 32)
                      07392   LIST
                      07393 PAUSEUSB clrf   R0 + 1          ; 1
                      07394 PAUSEUS addlw   -3              ; 1 Subtract overhead
                      07395         movwf   R0              ; 1
                      07396         bra     pauseush        ; 2
                      07397 pauseusloop decf R0, F          ; 1
                      07398 pauseush CLRWDT?NOP             ; 1
                      07399         bra     $ + 2           ; 2
                      07400         clrf    WREG            ; 1
                      07401         subwfb  R0 + 1, F       ; 1
                      07402         bc      pauseusloop     ; 1 / 2
                      07403         return                  ; 2 + 3 (call + setup)
                      07404   NOLIST
                      07405       endif
                      07406 
                      07407 ;****************************************************************
                      07408 ;* PAUSEUS    : Pause n microseconds at 33MHz                   *
                      07409 ;*                                                              *
                      07410 ;* Input      : R0 + 1, W = microseconds                        *
                      07411 ;* Output     : None                                            *
                      07412 ;*                                                              *
                      07413 ;* Notes      : minimum 2us                                     *
                      07414 ;****************************************************************
                      07415 
                      07416       if (OSC == 33)
                      07417   LIST
                      07418 PAUSEUSB clrf   R0 + 1          ; 1
                      07419 PAUSEUS addlw   -3              ; 1 Subtract overhead
                      07420         movwf   R0              ; 1
                      07421         movlw   -1              ; 1
                      07422         bra     pauseush        ; 2
                      07423 pauseusloop addwf R0, F         ; 1
                      07424 pauseush CLRWDT?NOP             ; 1
                      07425         bra     $ + 2           ; 2
                      07426         btfss   STATUS, C       ; 1 / 2
                      07427         addwf   R0 + 1, F       ; 1 / 0
                      07428         btfss   STATUS, C       ; 1 / 2
                      07429         return                  ; 2 + 3 (call + setup)
                      07430         nop                     ; 1
                      07431         bra     $ + 2           ; 2
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07432         addwf   R0, F           ; 1
                      07433         btfss   STATUS, C       ; 1 / 2
                      07434         addwf   R0 + 1, F       ; 1 / 0
                      07435         btfss   STATUS, C       ; 1 / 2
                      07436         return                  ; 2 + 3 (call + setup)
                      07437         nop                     ; 1
                      07438         bra     $ + 2           ; 2
                      07439         addwf   R0, F           ; 1
                      07440         btfss   STATUS, C       ; 1 / 2
                      07441         addwf   R0 + 1, F       ; 1 / 0
                      07442         btfss   STATUS, C       ; 1 / 2
                      07443         return                  ; 2 + 3 (call + setup)
                      07444         bra     $ + 2           ; 2
                      07445         addwf   R0, F           ; 1
                      07446         btfss   STATUS, C       ; 1 / 2
                      07447         addwf   R0 + 1, F       ; 1 / 0
                      07448         btfss   STATUS, C       ; 1 / 2
                      07449         return                  ; 2 + 3 (call + setup)
                      07450         bra     pauseusloop     ; 2
                      07451   NOLIST
                      07452       endif
                      07453 
                      07454 ;****************************************************************
                      07455 ;* PAUSEUS    : Pause n microseconds at 40MHz                   *
                      07456 ;*                                                              *
                      07457 ;* Input      : R0 + 1, W = microseconds                        *
                      07458 ;* Output     : None                                            *
                      07459 ;*                                                              *
                      07460 ;* Notes      : minimum 1.1us                                   *
                      07461 ;****************************************************************
                      07462 
                      07463       if (OSC == 40)
                      07464   LIST
                      07465 PAUSEUSB clrf   R0 + 1          ; 1
                      07466 PAUSEUS addlw   -2              ; 1 Subtract overhead
                      07467         movwf   R0              ; 1
                      07468 pauseusloop clrf WREG           ; 1
                      07469         subwfb  R0 + 1, F       ; 1
                      07470         btfss   STATUS, C       ; 1 / 2
                      07471         return                  ; 2 + 3 (call + setup)
                      07472         CLRWDT?NOP              ; 1
                      07473         decf    R0, F           ; 1
                      07474         bra     $ + 2           ; 2
                      07475         bra     pauseusloop     ; 2
                      07476   NOLIST
                      07477       endif
                      07478 
                      07479 ;****************************************************************
                      07480 ;* PAUSEUS    : Pause n microseconds at 48MHz                   *
                      07481 ;*                                                              *
                      07482 ;* Input      : R0 + 1, W = microseconds                        *
                      07483 ;* Output     : None                                            *
                      07484 ;*                                                              *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07485 ;* Notes      : minimum 1us                                     *
                      07486 ;****************************************************************
                      07487 
                      07488       if (OSC == 48)
                      07489   LIST
                      07490 PAUSEUSB clrf   R0 + 1          ; 1
                      07491 PAUSEUS addlw   -2              ; 1 Subtract overhead
                      07492         movwf   R0              ; 1
                      07493 pauseusloop CLRWDT?NOP          ; 1
                      07494         clrf    WREG            ; 1
                      07495         subwfb  R0 + 1, F       ; 1
                      07496         btfss   STATUS, C       ; 1 / 2
                      07497         return                  ; 2 + 3 (call + setup)
                      07498         decf    R0, F           ; 1
                      07499         bra     $ + 2           ; 2
                      07500         bra     $ + 2           ; 2
                      07501         bra     pauseusloop     ; 2
                      07502   NOLIST
                      07503       endif
                      07504 
                      07505 ;****************************************************************
                      07506 ;* PAUSEUS    : Pause n microseconds at 64MHz                   *
                      07507 ;*                                                              *
                      07508 ;* Input      : R0 + 1, W = microseconds                        *
                      07509 ;* Output     : None                                            *
                      07510 ;*                                                              *
                      07511 ;* Notes      : minimum 1us                                     *
                      07512 ;****************************************************************
                      07513 
                      07514       if (OSC == 64)
                      07515   LIST
                      07516 PAUSEUSB clrf   R0 + 1          ; 1
                      07517 PAUSEUS addlw   -2              ; 1 Subtract overhead
                      07518         movwf   R0              ; 1
                      07519 pauseusloop CLRWDT?NOP          ; 1
                      07520         bra     $ + 2           ; 2
                      07521         bra     $ + 2           ; 2
                      07522         clrf    WREG            ; 1
                      07523         subwfb  R0 + 1, F       ; 1
                      07524         btfss   STATUS, C       ; 1 / 2
                      07525         return                  ; 2 + 3 (call + setup)
                      07526         decf    R0, F           ; 1
                      07527         bra     $ + 2           ; 2
                      07528         bra     $ + 2           ; 2
                      07529         bra     pauseusloop     ; 2
                      07530   NOLIST
                      07531       endif
                      07532     endif
                      07533 
                      07534 ;****************************************************************
                      07535 ;* SLEEP      : Sleep n seconds                                 *
                      07536 ;*                                                              *
                      07537 ;* Input      : R3 + 1, W = seconds                             *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07538 ;* Output     : None                                            *
                      07539 ;*                                                              *
                      07540 ;* Notes      : Uncalibrated, assumes 2 second WDT timeout.     *
                      07541 ;****************************************************************
                      07542 
                      07543     ifdef SLEEPB_USED
                      07544   LIST
                      07545 SLEEPB  clrf    R3 + 1
                      07546   NOLIST
                      07547 SLEEPW_USED = 1
                      07548     endif
                      07549 
                      07550     ifdef SLEEPW_USED
                      07551   LIST
                      07552 SLEEPW  clrf    R3 + 2
                      07553         clrf    R3 + 3
                      07554   NOLIST
                      07555 SLEEP_USED = 1
                      07556     endif
                      07557 
                      07558     ifdef SLEEP_USED
                      07559   LIST
                      07560 SLEEPL  movwf   R3
                      07561         incf    R3, F           ; Add one to requested time
                      07562         clrf    WREG
                      07563         addwfc  R3 + 1, F
                      07564         addwfc  R3 + 2, F
                      07565         addwfc  R3 + 3, F       ; Carry has last overflow
                      07566         rrcf    R3 + 3, F       ; Change seconds into 2 second WDT timeouts
                      07567         rrcf    R3 + 2, F
                      07568         rrcf    R3 + 1, F
                      07569         rrcf    R3, F
                      07570 ;       clrf    WREG            ; Setup for countdown (still clear from above)
                      07571 sleeploop decf  R3, F           ; Count down sleep time
                      07572         subwfb  R3 + 1, F
                      07573         subwfb  R3 + 2, F
                      07574         subwfb  R3 + 3, F
                      07575         btfss   STATUS, C
                      07576         goto    DUNN            ; Done
                      07577         sleep                   ; You're entering a deep sleep...
                      07578         bra     sleeploop       ; Check for more sleep
                      07579   NOLIST
                      07580 DUNN_USED = 1
                      07581     endif
                      07582 
                      07583 ;****************************************************************
                      07584 ;* Function routines                                            *
                      07585 ;****************************************************************
                      07586 
                      07587 ;****************************************************************
                      07588 ;* ATN        : Arctangent                                      *
                      07589 ;*                                                              *
                      07590 ;* Input      : R1 = x coordinate                               *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07591 ;*            : W = y coordinate                                *
                      07592 ;* Output     : W = angle                                       *
                      07593 ;*                                                              *
                      07594 ;* Notes      :                                                 *
                      07595 ;****************************************************************
                      07596 
                      07597     ifdef ATN_USED
                      07598   LIST
                      07599 ATN     clrf    R4              ; Clear quadrant indicators
                      07600         btfss   WREG, 7         ; Is y negative?
                      07601         bra     atny            ; No
                      07602         negf    WREG            ; Yes, flip positive
                      07603         bsf     R4, 2           ; Indicate y negative
                      07604 atny    movwf   R0 + 1          ; Save y coordinate * 256
                      07605         clrf    R0              ; Zero bottom of y
                      07606         clrf    R0 + 2          ; Zero top of y
                      07607         clrf    R0 + 3
                      07608         btfss   R1, 7           ; Is x negative?
                      07609         bra     atnx            ; No
                      07610         negf    R1              ; Yes, flip positive
                      07611         bsf     R4, 1           ; Indicate x negative
                      07612 atnx    clrf    R1 + 1          ; Zero top of x
                      07613         clrf    R1 + 2
                      07614         clrf    R1 + 3
                      07615         subwf   R1, W           ; Check for x (R1) or y (W) bigger before divide (also part of swap)
                      07616         bz      atn45           ; If equal then special case of 45 degrees
                      07617         bc      atnyx           ; x bigger so we're set to go
                      07618         addwf   R0 + 1, F       ; Swap x and y (from .MAC, uses subwf above)
                      07619         subwf   R1, F
                      07620         bsf     R4, 0           ; Indicate second half of quadrant
                      07621 atnyx   call    DIV             ; R0 = 256 * y(R0) / x(R1)
                      07622 
                      07623         swapf   R0, W           ; Bottom 4 bits are table offset
                      07624         andlw   0fh
                      07625 
                      07626         addlw   low (atntable) + 1      ; Point to one higher entry in table
                      07627         movwf   TBLPTRL         ; Set up table pointer low
                      07628         clrf    TBLPTRH         ; Zero table pointer high
                      07629         movlw   high (atntable) ; Set table pointer high
                      07630         addwfc  TBLPTRH, F
                      07631         clrf    TBLPTRU         ; Zero table pointer upper
                      07632         tblrd   *-              ; Get the high value and point to lower
                      07633         movf    TABLAT, W       ; Save high
                      07634         movwf   R2
                      07635         tblrd   *               ; Get the lower value
                      07636         movf    TABLAT, W       ; Move it to W
                      07637 
                      07638         subwf   R2, W           ; Do the interpolation
                      07639         subwf   R2, F
                      07640 
                      07641         clrf    R1
                      07642         bcf     STATUS, C
                      07643         btfsc   R0, 0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07644         addwf   R1, F
                      07645         rrcf    R1, F
                      07646 
                      07647         bcf     STATUS, C
                      07648         btfsc   R0, 1
                      07649         addwf   R1, F
                      07650         rrcf    R1, F
                      07651 
                      07652         bcf     STATUS, C
                      07653         btfsc   R0, 2
                      07654         addwf   R1, F
                      07655         rrcf    R1, F
                      07656 
                      07657         bcf     STATUS, C
                      07658         btfsc   R0, 3
                      07659         addwf   R1, F
                      07660         rrcf    R1, W
                      07661 
                      07662         addwf   R2, W
                      07663 
                      07664         rrcf    WREG, W         ; Divide by 8 for 0 - 31 brads
                      07665         rrcf    WREG, W
                      07666         rrcf    WREG, W
                      07667         andlw   1fh             ; Isolate our bits
                      07668 
                      07669         btfsc   R4, 0           ; If x and y flipped then move to second half of quadrant
                      07670         sublw   64
                      07671 
                      07672         btfsc   R4, 7           ; Skip special case (R4.7 always 0)
                      07673 atn45   movlw   32              ; Special case for 45 degrees
                      07674 
                      07675         btfsc   R4, 1           ; If x negative then move to next quadrant
                      07676         sublw   128
                      07677 
                      07678         btfsc   R4, 2           ; If y negative then flip to bottom quadrants
                      07679         sublw   0
                      07680         
                      07681         goto    DUNN
                      07682 
                      07683 atntable db     0, 20, 41, 60, 80, 99, 117, 134, 151, 167, 182, 196, 210, 222, 234, 245, 0
                      07684   NOLIST
                      07685 DIV_USED = 1
                      07686     endif
                      07687 
                      07688 ;****************************************************************
                      07689 ;* DCD        : 2n decode                                       *
                      07690 ;*                                                              *
                      07691 ;* Input      : W = 2n                                          *
                      07692 ;* Output     : R0, W                                           *
                      07693 ;*                                                              *
                      07694 ;* Notes      :                                                 *
                      07695 ;****************************************************************
                      07696 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07697     ifdef DCD_USED
                      07698   LIST
                      07699 DCD     movwf   R4              ; Store bit number for CONVBIT
                      07700         rlcf    WREG, W         ; Move byte offset (bits 3, 4) to bottom
                      07701         swapf   WREG, W
                      07702         andlw   03h             ; Mask to bottom 2 bits
                      07703         addlw   low R0          ; Set FSR0 to address of R0 + byte offset
                      07704         movwf   FSR0L
                      07705         clrf    FSR0H           ; R0 in access bank (0)
                      07706         clrf    R0              ; Clear result
                      07707         clrf    R0 + 1
                      07708         clrf    R0 + 2
                      07709         clrf    R0 + 3
                      07710         call    CONVBIT         ; Change bit number to bit in W
                      07711         movwf   INDF0           ; Store bit in proper byte
                      07712         movf    R0, W           ; Get bottom byte to W
                      07713         goto    DUNN
                      07714   NOLIST
                      07715 ;CONVBIT_USED = 1
                      07716 DUNN_USED = 1
                      07717     endif
                      07718 
                      07719 ;****************************************************************
                      07720 ;* DIG        : Return decimal digit                            *
                      07721 ;*                                                              *
                      07722 ;* Input      : W = digit number                                *
                      07723 ;*            : R0 = value                                      *
                      07724 ;* Output     : W                                               *
                      07725 ;*                                                              *
                      07726 ;* Notes      :                                                 *
                      07727 ;****************************************************************
                      07728 
                      07729     ifdef DIGS_USED
                      07730   LIST
                      07731 DIGS    btfss   R0 + 3, 7       ; Is value negative?
                      07732         bra     DIG             ; No
                      07733         movwf   R3 + 1          ; Save requested digit
                      07734         clrf    WREG            ; Clear W for subtracts
                      07735         negf    R0              ; Flip value to plus
                      07736         subfwb  R0 + 1, F
                      07737         subfwb  R0 + 2, F
                      07738         subfwb  R0 + 3, F
                      07739         bra     DIG10           ; Do DIG
                      07740   NOLIST
                      07741 DIG_USED = 1
                      07742     endif
                      07743 
                      07744     ifdef DIG_USED
                      07745   LIST
                      07746 DIG     movwf   R3 + 1          ; Save requested digit
                      07747 DIG10   movlw   10              ; Set up for divide by 10 (base 10)
                      07748 DIGANYBASE movwf R1             ; Save any other base (2 - 255)
                      07749         clrf    R1 + 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07750         clrf    R1 + 2
                      07751         clrf    R1 + 3
                      07752 digloop call    DIV             ; Do the divide
                      07753         decf    R3 + 1, F       ; Do till done
                      07754         bc      digloop
                      07755         movf    R2, W           ; Get result to W
                      07756         return                  ; DUNN called in DIV
                      07757   NOLIST
                      07758 DIV_USED = 1
                      07759     endif
                      07760 
                      07761 ;****************************************************************
                      07762 ;* HYP        : Return hypotenuse                               *
                      07763 ;*                                                              *
                      07764 ;* Input      : R1 = a                                          *
                      07765 ;*            : R5 = b                                          *
                      07766 ;* Output     : R1 + 1, W = SQR ((a * a) + (b * b))             *
                      07767 ;*                                                              *
                      07768 ;* Notes      : a and b are signed values.                      *
                      07769 ;****************************************************************
                      07770 
                      07771     ifdef HYP_USED
                      07772   LIST
                      07773 HYP     movff   R1, R3          ; Setup for a * a
                      07774         movff   R1 + 1, R3 + 1
                      07775         movff   R1 + 2, R3 + 2
                      07776         movff   R1 + 3, R3 + 3
                      07777         call    MUL             ; R2 = R1 * R3
                      07778         movf    R5, W           ; Setup for b * b
                      07779         movwf   R1
                      07780         movwf   R3
                      07781         movf    R5 + 1, W
                      07782         movwf   R1 + 1
                      07783         movwf   R3 + 1
                      07784         movf    R5 + 2, W
                      07785         movwf   R1 + 2
                      07786         movwf   R3 + 2
                      07787         movf    R5 + 3, W
                      07788         movwf   R1 + 3
                      07789         movwf   R3 + 3
                      07790         movff   R2, R5          ; Save a * a
                      07791         movff   R2 + 1, R5 + 1
                      07792         movff   R2 + 2, R5 + 2
                      07793         movff   R2 + 3, R5 + 3
                      07794         call    MUL             ; R2 = R1 * R3
                      07795         movf    R5, W           ; (a * a) + (b * b)
                      07796         addwf   R2, W
                      07797         movwf   R0
                      07798         movf    R5 + 1, W
                      07799         addwfc  R2 + 1, W
                      07800         movwf   R0 + 1
                      07801         movf    R5 + 2, W
                      07802         addwfc  R2 + 2, W
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07803         movwf   R0 + 2
                      07804         movf    R5 + 3, W
                      07805         addwfc  R2 + 3, W
                      07806         movwf   R0 + 3
                      07807         movf    R0, W
                      07808         goto    SQR             ; Finish up by taking the square root of R0, W
                      07809   NOLIST
                      07810 MUL_USED = 1
                      07811 SQR_USED = 1
                      07812     endif
                      07813 
                      07814 ;****************************************************************
                      07815 ;* MAX        : Return maximum of 2 numbers                     *
                      07816 ;*                                                              *
                      07817 ;* Input      : R0 max                                          *
                      07818 ;*              R1                                              *
                      07819 ;* Output     : R0, W = maximum                                 *
                      07820 ;*                                                              *
                      07821 ;* Notes      :                                                 *
                      07822 ;****************************************************************
                      07823 
                      07824     ifdef MAXB_USED
                      07825   LIST
                      07826 MAXB    clrf    R0 + 1
                      07827         clrf    R1 + 1
                      07828   NOLIST
                      07829 MAXW_USED = 1
                      07830     endif
                      07831 
                      07832     ifdef MAXW_USED
                      07833   LIST
                      07834 MAXW    clrf    R0 + 2
                      07835         clrf    R0 + 3
                      07836         clrf    R1 + 2
                      07837         clrf    R1 + 3
                      07838   NOLIST
                      07839 MAX_USED = 1
                      07840     endif
                      07841 
                      07842     ifdef MAX_USED
                      07843   LIST
                      07844 MAX     call    CMPLT
                      07845 
                      07846       ifdef MINB_USED
                      07847 MAXGOTO_USED = 1
                      07848       endif
                      07849       ifdef MINW_USED
                      07850 MAXGOTO_USED = 1
                      07851       endif
                      07852       ifdef MIN_USED
                      07853 MAXGOTO_USED = 1
                      07854       endif
                      07855       ifdef MAXGOTO_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07856         bra     MAXMIN
                      07857       endif
                      07858   NOLIST
                      07859 CMPLT_USED = 1
                      07860 MAXMIN_USED = 1
                      07861     endif
                      07862 
                      07863 ;****************************************************************
                      07864 ;* MIN        : Return minimum of 2 numbers                     *
                      07865 ;*                                                              *
                      07866 ;* Input      : R0 min                                          *
                      07867 ;*              R1                                              *
                      07868 ;* Output     : R0, W = minimum                                 *
                      07869 ;*                                                              *
                      07870 ;* Notes      :                                                 *
                      07871 ;****************************************************************
                      07872 
                      07873     ifdef MINB_USED
                      07874   LIST
                      07875 MINB    clrf    R0 + 1
                      07876         clrf    R1 + 1
                      07877   NOLIST
                      07878 MINW_USED = 1
                      07879     endif
                      07880 
                      07881     ifdef MINW_USED
                      07882   LIST
                      07883 MINW    clrf    R0 + 2
                      07884         clrf    R0 + 3
                      07885         clrf    R1 + 2
                      07886         clrf    R1 + 3
                      07887   NOLIST
                      07888 MIN_USED = 1
                      07889     endif
                      07890 
                      07891     ifdef MIN_USED
                      07892   LIST
                      07893 MIN     call    CMPGT
                      07894   NOLIST
                      07895 CMPGT_USED = 1
                      07896 MAXMIN_USED = 1
                      07897     endif
                      07898 
                      07899     ifdef MAXMIN_USED
                      07900   LIST
                      07901 MAXMIN  bz      maxminexit      ; No need to move R1 to R0
                      07902         movf    R1 + 3, W       ; Move R1 to R0
                      07903         movwf   R0 + 3
                      07904         movf    R1 + 2, W
                      07905         movwf   R0 + 2
                      07906         movf    R1 + 1, W
                      07907         movwf   R0 + 1
                      07908         movf    R1, W
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07909         movwf   R0
                      07910 maxminexit movf R0, W           ; Get low byte to W
                      07911         return                  ; DUNN called in CMP
                      07912   NOLIST
                      07913     endif
                      07914 
                      07915 ;****************************************************************
                      07916 ;* NCD        : Priority encode                                 *
                      07917 ;*                                                              *
                      07918 ;* Input      : R0 = 32 bit value                               *
                      07919 ;* Output     : W = bit number                                  *
                      07920 ;*                                                              *
                      07921 ;* Notes      :                                                 *
                      07922 ;****************************************************************
                      07923 
                      07924     ifdef NCDB_USED
                      07925   LIST
                      07926 NCDB    clrf    R0 + 1
                      07927   NOLIST
                      07928 NCDW_USED = 1
                      07929     endif
                      07930 
                      07931     ifdef NCDW_USED
                      07932   LIST
                      07933 NCDW    clrf    R0 + 2
                      07934         clrf    R0 + 3
                      07935   NOLIST
                      07936 NCD_USED = 1
                      07937     endif
                      07938 
                      07939     ifdef NCD_USED
                      07940   LIST
                      07941 NCD     movwf   R0
                      07942         movlw   33              ; Set result
                      07943 ncdloop addlw   -1              ; Count down result - sets C so loop will end
                      07944         rlcf    R0, F           ; Shift upper bit to carry
                      07945         rlcf    R0 + 1, F
                      07946         rlcf    R0 + 2, F
                      07947         rlcf    R0 + 3, F
                      07948         bnc     ncdloop         ; If carry set then done
                      07949         goto    DUNN
                      07950   NOLIST
                      07951 DUNN_USED = 1
                      07952     endif
                      07953 
                      07954 ;****************************************************************
                      07955 ;* REV        : Reverse bits                                    *
                      07956 ;*                                                              *
                      07957 ;* Input      : R0 = 32 bit value                               *
                      07958 ;*            : W = number of bits to reverse                   *
                      07959 ;* Output     : R0, W                                           *
                      07960 ;*                                                              *
                      07961 ;* Notes      :                                                 *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07962 ;****************************************************************
                      07963 
                      07964     ifdef REV_USED
                      07965   LIST
                      07966 REV     clrf    R1              ; Zero the intermediate result
                      07967         clrf    R1 + 1
                      07968         clrf    R1 + 2
                      07969         clrf    R1 + 3
                      07970         bra     revfirst        ; Handle 0 case
                      07971 revloop rrcf    R0 + 3, F       ; Shift right once
                      07972         rrcf    R0 + 2, F
                      07973         rrcf    R0 + 1, F
                      07974         rrcf    R0, F
                      07975         rlcf    R1, F           ; Reverse the bits into R1
                      07976         rlcf    R1 + 1, F
                      07977         rlcf    R1 + 2, F
                      07978         rlcf    R1 + 3, F
                      07979 revfirst addlw  -1
                      07980         bc      revloop         ; Done?
                      07981         movf    R1 + 3, W       ; Move result to R0
                      07982         movwf   R0 + 3
                      07983         movf    R1 + 2, W
                      07984         movwf   R0 + 2
                      07985         movf    R1 + 1, W
                      07986         movwf   R0 + 1
                      07987         movf    R1, W
                      07988         movwf   R0              ; Low part of result in W
                      07989         goto    DUNN
                      07990   NOLIST
                      07991 DUNN_USED = 1
                      07992     endif
                      07993 
                      07994 ;****************************************************************
                      07995 ;* SHIFTL     : Shift left                                      *
                      07996 ;*                                                              *
                      07997 ;* Input      : R0 = 32 bit value                               *
                      07998 ;*            : W = number of shifts                            *
                      07999 ;* Output     : R0, W                                           *
                      08000 ;*                                                              *
                      08001 ;* Notes      :                                                 *
                      08002 ;****************************************************************
                      08003 
                      08004     ifdef SHIFTL_USED
                      08005   LIST
                      08006 shiftlloop bcf  STATUS, C       ; Shift in 0 bits
                      08007         rlcf    R0, F           ; Shift left once
                      08008         rlcf    R0 + 1, F
                      08009         rlcf    R0 + 2, F
                      08010         rlcf    R0 + 3, F
                      08011 SHIFTL  addlw   -1
                      08012         bc      shiftlloop      ; Done?
                      08013         movf    R0, W           ; Move low part of result to W
                      08014         goto    DUNN
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08015   NOLIST
                      08016 DUNN_USED = 1
                      08017     endif
                      08018 
                      08019 ;****************************************************************
                      08020 ;* SHIFTR     : Shift right                                     *
                      08021 ;*                                                              *
                      08022 ;* Input      : R0 = 32 bit value                               *
                      08023 ;*            : W = number of shifts                            *
                      08024 ;* Output     : R0, W                                           *
                      08025 ;*                                                              *
                      08026 ;* Notes      :                                                 *
                      08027 ;****************************************************************
                      08028 
                      08029     ifdef SHIFTR_USED
                      08030   LIST
                      08031 shiftrloop bcf  STATUS, C       ; Shift in 0 bits
                      08032         rrcf    R0 + 3, F       ; Shift right once
                      08033         rrcf    R0 + 2, F
                      08034         rrcf    R0 + 1, F
                      08035         rrcf    R0, F
                      08036 SHIFTR  addlw   -1
                      08037         bc      shiftrloop      ; Done?
                      08038         movf    R0, W           ; Move low part of result to W
                      08039         goto    DUNN
                      08040   NOLIST
                      08041 DUNN_USED = 1
                      08042     endif
                      08043 
                      08044 ;****************************************************************
                      08045 ;* SQR        : Square root                                     *
                      08046 ;*                                                              *
                      08047 ;* Input      : R0, W = 32 bits                                 *
                      08048 ;* Output     : R1 + 1, W = 16 bits                             *
                      08049 ;*                                                              *
                      08050 ;* Notes      :                                                 *
                      08051 ;****************************************************************
                      08052 
                      08053     ifdef SQRB_USED
                      08054   LIST
                      08055 SQRB    clrf    R0 + 1
                      08056   NOLIST
                      08057 SQRW_USED = 1
                      08058     endif
                      08059 
                      08060     ifdef SQRW_USED
                      08061   LIST
                      08062 SQRW    clrf    R0 + 2
                      08063         clrf    R0 + 3
                      08064   NOLIST
                      08065 SQR_USED = 1
                      08066     endif
                      08067 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08068     ifdef SQR_USED
                      08069   LIST
                      08070 SQR     movwf   R0
                      08071 
                      08072         clrf    R1              ; Root = 0
                      08073         clrf    R1 + 1
                      08074         clrf    R1 + 2
                      08075         clrf    R1 + 3
                      08076         clrf    R2              ; Remainder = 0
                      08077         clrf    R2 + 1
                      08078         clrf    R2 + 2
                      08079         clrf    R2 + 3
                      08080 
                      08081         movlw   16              ; Iterations to 16
                      08082         movwf   R3
                      08083 
                      08084 sqrloop bsf     STATUS, C       ; Root = (root << 1) + 1
                      08085         rlcf    R1, F
                      08086         rlcf    R1 + 1, F
                      08087         rlcf    R1 + 2, F
                      08088         rlcf    R1 + 3, F
                      08089 
                      08090         rlcf    R0, F           ; Rem = (rem << 2) + (in >> 14)
                      08091         rlcf    R0 + 1, F       ; In <<= 2
                      08092         rlcf    R0 + 2, F
                      08093         rlcf    R0 + 3, F
                      08094         rlcf    R2, F
                      08095         rlcf    R2 + 1, F
                      08096         rlcf    R2 + 2, F
                      08097         rlcf    R2 + 3, F
                      08098         rlcf    R0, F
                      08099         rlcf    R0 + 1, F
                      08100         rlcf    R0 + 2, F
                      08101         rlcf    R0 + 3, F
                      08102         rlcf    R2, F
                      08103         rlcf    R2 + 1, F
                      08104         rlcf    R2 + 2, F
                      08105         rlcf    R2 + 3, F
                      08106 
                      08107         movf    R1, W           ; If root <= rem then rem = rem - root
                      08108         subwf   R2, W           ; Do subtract for if
                      08109         movf    R1 + 1, W
                      08110         subwfb  R2 + 1, W
                      08111         movf    R1 + 2, W
                      08112         subwfb  R2 + 2, W
                      08113         movf    R1 + 3, W
                      08114         subwfb  R2 + 3, W
                      08115         bnc     sqrelse         ; If not <= goto else
                      08116         movwf   R2 + 3          ; If <= store result
                      08117         movf    R1, W           ; Need to recalculate low bytes
                      08118         subwf   R2, F
                      08119         movf    R1 + 1, W
                      08120         subwfb  R2 + 1, F
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08121         movf    R1 + 2, W
                      08122         subwfb  R2 + 2, F
                      08123 
                      08124         clrf    WREG            ; Root += 1
                      08125         incf    R1, F
                      08126         addwfc  R1 + 1, F
                      08127         addwfc  R1 + 2, F
                      08128         addwfc  R1 + 3, F
                      08129         bra     sqrinc
                      08130 
                      08131 sqrelse clrf    WREG            ; Root -= 1
                      08132         decf    R1, F
                      08133         subwfb  R1 + 1, F
                      08134         subwfb  R1 + 2, F
                      08135         subwfb  R1 + 3, F
                      08136 
                      08137 sqrinc  decfsz  R3, F           ; Do all iterations
                      08138         bra     sqrloop
                      08139 
                      08140         rrcf    R1 + 2, W       ; Root >>= 1
                      08141         rrcf    R1 + 1, F
                      08142         rrcf    R1, W
                      08143         goto    DUNN
                      08144   NOLIST
                      08145 DUNN_USED = 1
                      08146     endif
                      08147 
                      08148 ;****************************************************************
                      08149 ;* Compare routines                                             *
                      08150 ;****************************************************************
                      08151 
                      08152 ;****************************************************************
                      08153 ;* CMPEQ      : Compare equal                                   *
                      08154 ;*                                                              *
                      08155 ;* Input      : R0                                              *
                      08156 ;*            : R1 + 1, W                                       *
                      08157 ;* Output     : W                                               *
                      08158 ;*                                                              *
                      08159 ;* Notes      :                                                 *
                      08160 ;****************************************************************
                      08161 
                      08162     ifdef CMPEQB_USED
                      08163   LIST
                      08164 CMPEQB  movwf   R1
                      08165         movlw   2               ; Mask for =
                      08166         bra     CMPB
                      08167   NOLIST
                      08168 CMPB_USED = 1
                      08169     endif
                      08170 
                      08171     ifdef CMPEQW_USED
                      08172   LIST
                      08173 CMPEQW  movwf   R1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08174         movlw   2               ; Mask for =
                      08175         bra     CMPW
                      08176   NOLIST
                      08177 CMPW_USED = 1
                      08178     endif
                      08179 
                      08180     ifdef CMPEQ_USED
                      08181   LIST
                      08182 CMPEQ   movwf   R1
                      08183         movlw   2               ; Mask for =
                      08184         bra     CMP
                      08185   NOLIST
                      08186 CMP_USED = 1
                      08187     endif
                      08188 
                      08189 ;****************************************************************
                      08190 ;* CMPGE      : Compare greater than or equal                   *
                      08191 ;*                                                              *
                      08192 ;* Input      : R0                                              *
                      08193 ;*            : R1 + 1, W                                       *
                      08194 ;* Output     : W                                               *
                      08195 ;*                                                              *
                      08196 ;* Notes      :                                                 *
                      08197 ;****************************************************************
                      08198 
                      08199     ifdef CMPGEB_USED
                      08200   LIST
                      08201 CMPGEB  movwf   R1
                      08202         movlw   3               ; Mask for = >
                      08203         bra     CMPB
                      08204   NOLIST
                      08205 CMPB_USED = 1
                      08206     endif
                      08207 
                      08208     ifdef CMPGEW_USED
                      08209   LIST
                      08210 CMPGEW  movwf   R1
                      08211         movlw   3               ; Mask for = >
                      08212         bra     CMPW
                      08213   NOLIST
                      08214 CMPW_USED = 1
                      08215     endif
                      08216 
                      08217     ifdef CMPGE_USED
                      08218   LIST
                      08219 CMPGE   movwf   R1
                      08220         movlw   3               ; Mask for = >
                      08221         bra     CMP
                      08222   NOLIST
                      08223 CMP_USED = 1
                      08224     endif
                      08225 
                      08226 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08227 ;* CMPGT      : Compare greater than                            *
                      08228 ;*                                                              *
                      08229 ;* Input      : R0                                              *
                      08230 ;*            : R1 + 1, W                                       *
                      08231 ;* Output     : W                                               *
                      08232 ;*                                                              *
                      08233 ;* Notes      :                                                 *
                      08234 ;****************************************************************
                      08235 
                      08236     ifdef CMPGTB_USED
                      08237   LIST
                      08238 CMPGTB  movwf   R1
                      08239         movlw   1               ; Mask for >
                      08240         bra     CMPB
                      08241   NOLIST
                      08242 CMPB_USED = 1
                      08243     endif
                      08244 
                      08245     ifdef CMPGTW_USED
                      08246   LIST
                      08247 CMPGTW  movwf   R1
                      08248         movlw   1               ; Mask for >
                      08249         bra     CMPW
                      08250   NOLIST
                      08251 CMPW_USED = 1
                      08252     endif
                      08253 
                      08254     ifdef CMPGT_USED
                      08255   LIST
                      08256 CMPGT   movwf   R1
                      08257         movlw   1               ; Mask for >
                      08258         bra     CMP
                      08259   NOLIST
                      08260 CMP_USED = 1
                      08261     endif
                      08262 
                      08263 ;****************************************************************
                      08264 ;* CMPLE      : Compare less than or equal                      *
                      08265 ;*                                                              *
                      08266 ;* Input      : R0                                              *
                      08267 ;*            : R1 + 1, W                                       *
                      08268 ;* Output     : W                                               *
                      08269 ;*                                                              *
                      08270 ;* Notes      :                                                 *
                      08271 ;****************************************************************
                      08272 
                      08273     ifdef CMPLEB_USED
                      08274   LIST
                      08275 CMPLEB  movwf   R1
                      08276         movlw   6               ; Mask for < =
                      08277         bra     CMPB
                      08278   NOLIST
                      08279 CMPB_USED = 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08280     endif
                      08281 
                      08282     ifdef CMPLEW_USED
                      08283   LIST
                      08284 CMPLEW  movwf   R1
                      08285         movlw   6               ; Mask for < =
                      08286         bra     CMPW
                      08287   NOLIST
                      08288 CMPW_USED = 1
                      08289     endif
                      08290 
                      08291     ifdef CMPLE_USED
                      08292   LIST
                      08293 CMPLE   movwf   R1
                      08294         movlw   6               ; Mask for < =
                      08295         bra     CMP
                      08296   NOLIST
                      08297 CMP_USED = 1
                      08298     endif
                      08299 
                      08300 ;****************************************************************
                      08301 ;* CMPLT      : Compare less than                               *
                      08302 ;*                                                              *
                      08303 ;* Input      : R0                                              *
                      08304 ;*            : R1 + 1, W                                       *
                      08305 ;* Output     : W                                               *
                      08306 ;*                                                              *
                      08307 ;* Notes      :                                                 *
                      08308 ;****************************************************************
                      08309 
                      08310     ifdef CMPLTB_USED
                      08311   LIST
                      08312 CMPLTB  movwf   R1
                      08313         movlw   4               ; Mask for <
                      08314         bra     CMPB
                      08315   NOLIST
                      08316 CMPB_USED = 1
                      08317     endif
                      08318 
                      08319     ifdef CMPLTW_USED
                      08320   LIST
                      08321 CMPLTW  movwf   R1
                      08322         movlw   4               ; Mask for <
                      08323         bra     CMPW
                      08324   NOLIST
                      08325 CMPW_USED = 1
                      08326     endif
                      08327 
                      08328     ifdef CMPLT_USED
                      08329   LIST
                      08330 CMPLT   movwf   R1
                      08331         movlw   4               ; Mask for <
                      08332         bra     CMP
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08333   NOLIST
                      08334 CMP_USED = 1
                      08335     endif
                      08336 
                      08337 ;****************************************************************
                      08338 ;* CMPNE      : Compare not equal                               *
                      08339 ;*                                                              *
                      08340 ;* Input      : R0                                              *
                      08341 ;*            : R1 + 1, W                                       *
                      08342 ;* Output     : W                                               *
                      08343 ;*                                                              *
                      08344 ;* Notes      :                                                 *
                      08345 ;****************************************************************
                      08346 
                      08347     ifdef CMPNEB_USED
                      08348   LIST
                      08349 CMPNEB  movwf   R1
                      08350         movlw   5               ; Mask for < >
                      08351         bra     CMPB
                      08352   NOLIST
                      08353 CMPB_USED = 1
                      08354     endif
                      08355 
                      08356     ifdef CMPNEW_USED
                      08357   LIST
                      08358 CMPNEW  movwf   R1
                      08359         movlw   5               ; Mask for < >
                      08360         bra     CMPW
                      08361   NOLIST
                      08362 CMPW_USED = 1
                      08363     endif
                      08364 
                      08365     ifdef CMPNE_USED
                      08366   LIST
                      08367 CMPNE   movwf   R1
                      08368         movlw   5               ; Mask for < >
                      08369         bra     CMP
                      08370   NOLIST
                      08371 CMP_USED = 1
                      08372     endif
                      08373 
                      08374 ;****************************************************************
                      08375 ;* CMP        : Compare                                         *
                      08376 ;*                                                              *
                      08377 ;* Input      : R0                                              *
                      08378 ;*            : R1                                              *
                      08379 ;* Output     : W  < = >                                        *
                      08380 ;*                 4 2 1                                        *
                      08381 ;* Notes      :                                                 *
                      08382 ;****************************************************************
                      08383 
                      08384     ifdef CMPB_USED
                      08385   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08386 CMPB    movwf   R4              ; Save compare state
                      08387         bra     cmpb1           ; Compare unsigned bytes
                      08388   NOLIST
                      08389 CMP_USED = 1
                      08390     endif
                      08391 
                      08392     ifdef CMPW_USED
                      08393   LIST
                      08394 CMPW    movwf   R4              ; Save compare state
                      08395         bra     cmpw1           ; Compare unsigned words
                      08396   NOLIST
                      08397 CMP_USED = 1
                      08398     endif
                      08399 
                      08400     ifdef CMP_USED
                      08401   LIST
                      08402 CMP     movwf   R4              ; Save compare state
                      08403         movf    R1 + 3, W       ; Compare signed longs
                      08404         xorwf   R0 + 3, W       ; Check signs
                      08405         bn      cmpdiff         ; Different signs
                      08406         movf    R1 + 3, W       ; Flags = MSB(R0) - MSB(R1)
                      08407         subwf   R0 + 3, W
                      08408         bnz     cmpnoteq        ; If unequal then done
                      08409         movf    R1 + 2, W
                      08410         subwf   R0 + 2, W
                      08411         bnz     cmpnoteq        ; If unequal then done
                      08412 cmpw1   movf    R1 + 1, W
                      08413         subwf   R0 + 1, W
                      08414         bnz     cmpnoteq        ; If unequal then done
                      08415 cmpb1   movf    R1, W           ; Flags = LSB(R0) - LSB(R1)
                      08416         subwf   R0, W
                      08417 cmpnoteq movlw  4               ; W = 4 if R0 < R1
                      08418         btfsc   STATUS, C
                      08419         movlw   1               ; W = 1 if R0 > R1
                      08420         btfsc   STATUS, Z
                      08421         movlw   2               ; W = 2 if R0 == R1
                      08422         andwf   R4, W           ; Mask for compare state
                      08423         btfss   STATUS, Z
                      08424         movlw   -1
                      08425         goto    DUNN
                      08426 
                      08427 cmpdiff movf    R0 + 3, W       ; Different signs so flip compare to accomodate
                      08428         subwf   R1 + 3, W       ; Flags = MSB(R1) - MSB(R0)
                      08429         bra     cmpnoteq        ; Will always be not equal
                      08430   NOLIST
                      08431 DUNN_USED = 1
                      08432     endif
                      08433 
                      08434 ;****************************************************************
                      08435 ;* Logical routines                                             *
                      08436 ;****************************************************************
                      08437 
                      08438 ;****************************************************************
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08439 ;* LAND       : Logical AND                                     *
                      08440 ;*                                                              *
                      08441 ;* Input      : W                                               *
                      08442 ;*            : R0                                              *
                      08443 ;* Output     : W                                               *
                      08444 ;*                                                              *
                      08445 ;* Notes      :                                                 *
                      08446 ;****************************************************************
                      08447 
                      08448     ifdef LAND_USED
                      08449   LIST
                      08450 LAND    tstfsz  WREG
                      08451         movlw   -1
                      08452         andwf   R0, W
                      08453         btfss   STATUS, Z
                      08454         movlw   -1
                      08455         goto    DUNN
                      08456   NOLIST
                      08457 DUNN_USED = 1
                      08458     endif
                      08459 
                      08460 ;****************************************************************
                      08461 ;* LOR        : Logical OR                                      *
                      08462 ;*                                                              *
                      08463 ;* Input      : W                                               *
                      08464 ;*            : R0                                              *
                      08465 ;* Output     : W                                               *
                      08466 ;*                                                              *
                      08467 ;* Notes      :                                                 *
                      08468 ;****************************************************************
                      08469 
                      08470     ifdef LOR_USED
                      08471   LIST
                      08472 LOR     iorwf   R0, W
                      08473         btfss   STATUS, Z
                      08474         movlw   -1
                      08475         goto    DUNN
                      08476   NOLIST
                      08477 DUNN_USED = 1
                      08478     endif
                      08479 
                      08480 ;****************************************************************
                      08481 ;* LXOR       : Logical XOR                                     *
                      08482 ;*                                                              *
                      08483 ;* Input      : W                                               *
                      08484 ;*            : R0                                              *
                      08485 ;* Output     : W                                               *
                      08486 ;*                                                              *
                      08487 ;* Notes      :                                                 *
                      08488 ;****************************************************************
                      08489 
                      08490     ifdef LXOR_USED
                      08491   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08492 LXOR    tstfsz  WREG
                      08493         movlw   -1
                      08494         tstfsz  R0
                      08495         xorlw   0ffh
                      08496         goto    DUNN
                      08497   NOLIST
                      08498 DUNN_USED = 1
                      08499     endif
                      08500 
                      08501 ;****************************************************************
                      08502 ;* LNOT       : Logical NOT                                     *
                      08503 ;*                                                              *
                      08504 ;* Input      : W                                               *
                      08505 ;* Output     : W                                               *
                      08506 ;*                                                              *
                      08507 ;* Notes      :                                                 *
                      08508 ;****************************************************************
                      08509 
                      08510     ifdef LNOT_USED
                      08511   LIST
                      08512 LNOT    tstfsz  WREG
                      08513         movlw   -1
                      08514         xorlw   0ffh            ; Flip for not
                      08515         goto    DUNN
                      08516   NOLIST
                      08517 DUNN_USED = 1
                      08518     endif
                      08519 
                      08520 ;****************************************************************
                      08521 ;* LNAND      : Logical NOT AND                                 *
                      08522 ;*                                                              *
                      08523 ;* Input      : W                                               *
                      08524 ;*            : R0                                              *
                      08525 ;* Output     : W                                               *
                      08526 ;*                                                              *
                      08527 ;* Notes      :                                                 *
                      08528 ;****************************************************************
                      08529 
                      08530     ifdef LNAND_USED
                      08531   LIST
                      08532 LNAND   tstfsz  WREG
                      08533         movlw   -1
                      08534         andwf   R0, W
                      08535         btfss   STATUS, Z
                      08536         movlw   -1
                      08537         xorlw   0ffh            ; Flip for not
                      08538         goto    DUNN
                      08539   NOLIST
                      08540 DUNN_USED = 1
                      08541     endif
                      08542 
                      08543 ;****************************************************************
                      08544 ;* LNOR       : Logical NOT OR                                  *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08545 ;*                                                              *
                      08546 ;* Input      : W                                               *
                      08547 ;*            : R0                                              *
                      08548 ;* Output     : W                                               *
                      08549 ;*                                                              *
                      08550 ;* Notes      :                                                 *
                      08551 ;****************************************************************
                      08552 
                      08553     ifdef LNOR_USED
                      08554   LIST
                      08555 LNOR    iorwf   R0, W
                      08556         btfss   STATUS, Z
                      08557         movlw   -1
                      08558         xorlw   0ffh            ; Flip for not
                      08559         goto    DUNN
                      08560   NOLIST
                      08561 DUNN_USED = 1
                      08562     endif
                      08563 
                      08564 ;****************************************************************
                      08565 ;* LNXOR      : Logical NOT XOR                                 *
                      08566 ;*                                                              *
                      08567 ;* Input      : W                                               *
                      08568 ;*            : R0                                              *
                      08569 ;* Output     : W                                               *
                      08570 ;*                                                              *
                      08571 ;* Notes      :                                                 *
                      08572 ;****************************************************************
                      08573 
                      08574     ifdef LNXOR_USED
                      08575   LIST
                      08576 LNXOR   tstfsz  WREG
                      08577         movlw   -1
                      08578         movf    R0, F
                      08579         btfsc   STATUS, Z
                      08580         xorlw   0ffh
                      08581         goto    DUNN
                      08582   NOLIST
                      08583 DUNN_USED = 1
                      08584     endif
                      08585 
                      08586 ;****************************************************************
                      08587 ;* Math routines                                                *
                      08588 ;****************************************************************
                      08589 
                      08590 ;****************************************************************
                      08591 ;* DIV        : 32 x 32 divide                                  *
                      08592 ;*                                                              *
                      08593 ;* Input      : R0 / R1                                         *
                      08594 ;* Output     : R0 = quotient                                   * 
                      08595 ;*            : R2 = remainder                                  *
                      08596 ;*                                                              *
                      08597 ;* Notes      : R2 = R0 MOD R1                                  *
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08598 ;****************************************************************
                      08599 
                      08600     ifdef DIVS_USED
                      08601   LIST
                      08602 DIVS    clrf    R3 + 3          ; Clear sign difference indicator
                      08603         btfss   R0 + 3, 7       ; Check for R0 negative
                      08604         bra     divchkr1        ; Not negative
                      08605         btg     R3 + 3, 7       ; Flip sign indicator
                      08606         clrf    WREG            ; Clear W for subtracts
                      08607         negf    R0              ; Flip value to plus
                      08608         subfwb  R0 + 1, F
                      08609         subfwb  R0 + 2, F
                      08610         subfwb  R0 + 3, F
                      08611 divchkr1 btfss  R1 + 3, 7       ; Check for R1 negative
                      08612         bra     divdo           ; Not negative
                      08613         btg     R3 + 3, 7       ; Flip sign indicator
                      08614         clrf    WREG            ; Clear W for subtracts
                      08615         negf    R1              ; Flip value to plus
                      08616         subfwb  R1 + 1, F
                      08617         subfwb  R1 + 2, F
                      08618         subfwb  R1 + 3, F
                      08619         bra     divdo           ; Skip unsigned entry
                      08620   NOLIST
                      08621 DIV_USED = 1
                      08622     endif
                      08623 
                      08624     ifdef DIV_USED
                      08625   LIST
                      08626 DIV
                      08627       ifdef DIVS_USED
                      08628         clrf    R3 + 3          ; Clear sign difference indicator       
                      08629       endif
                      08630 divdo   clrf    R2              ; Do the divide
                      08631         clrf    R2 + 1
                      08632         clrf    R2 + 2
                      08633         clrf    R2 + 3
                      08634 
                      08635         movlw   32
                      08636         movwf   R3
                      08637 
                      08638 divloop rlcf    R0 + 3, W
                      08639         rlcf    R2, F
                      08640         rlcf    R2 + 1, F
                      08641         rlcf    R2 + 2, F
                      08642         rlcf    R2 + 3, F
                      08643         movf    R1, W
                      08644         subwf   R2, F
                      08645         movf    R1 + 1, W
                      08646         subwfb  R2 + 1, F
                      08647         movf    R1 + 2, W
                      08648         subwfb  R2 + 2, F
                      08649         movf    R1 + 3, W
                      08650         subwfb  R2 + 3, F
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08651 
                      08652         bc      divok
                      08653         movf    R1, W
                      08654         addwf   R2, F
                      08655         movf    R1 + 1, W
                      08656         addwfc  R2 + 1, F
                      08657         movf    R1 + 2, W
                      08658         addwfc  R2 + 2, F
                      08659         movf    R1 + 3, W
                      08660         addwfc  R2 + 3, F
                      08661 
                      08662         bcf     STATUS, C
                      08663 
                      08664 divok   rlcf    R0, F
                      08665         rlcf    R0 + 1, F
                      08666         rlcf    R0 + 2, F
                      08667         rlcf    R0 + 3, F
                      08668 
                      08669         decfsz  R3, F
                      08670         bra     divloop
                      08671 
                      08672       ifdef DIVS_USED
                      08673         btfss   R3 + 3, 7       ; Should result be negative?
                      08674         bra     divdone         ; Not negative
                      08675         clrf    WREG            ; Clear W for subtracts
                      08676         negf    R0              ; Flip quotient to minus
                      08677         subfwb  R0 + 1, F
                      08678         subfwb  R0 + 2, F
                      08679         subfwb  R0 + 3, F
                      08680         negf    R2              ; Flip remainder to minus
                      08681         subfwb  R2 + 1, F
                      08682         subfwb  R2 + 2, F
                      08683         subfwb  R2 + 3, F
                      08684 divdone
                      08685     endif
                      08686 
                      08687         movf    R0, W           ; Get low byte to W
                      08688         goto    DUNN
                      08689   NOLIST
                      08690 DUNN_USED = 1
                      08691     endif
                      08692 
                      08693 ;****************************************************************
                      08694 ;* MUL        : 32 x 32 = 64 multiply                           *
                      08695 ;*                                                              *
                      08696 ;* Input      : R3 * R1                                         *
                      08697 ;* Output     : R2, W = low 32 bits of result                   *
                      08698 ;*            : R0 = high 32 bits of result                     *
                      08699 ;*                                                              *
                      08700 ;* Notes      :                                                 *
                      08701 ;****************************************************************
                      08702 
                      08703     ifdef MUL_USED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08704   LIST
                      08705 MUL     movf    R1, W
                      08706         mulwf   R3              ; AARGB3 * BARGB3 = PRODHL
                      08707         movff   PRODL, R2
                      08708         movff   PRODH, R2 + 1
                      08709 
                      08710         movf    R1 + 1, W
                      08711         mulwf   R3 + 1          ; AARGB2 * BARGB2 = PRODHL
                      08712         movff   PRODL, R2 + 2
                      08713         movff   PRODH, R2 + 3
                      08714 
                      08715 ;       movf    R1 + 1, W       ; W still has R1 + 1 from above
                      08716         mulwf   R3              ; AARGB2 * BARGB3 = PRODHL
                      08717         movf    PRODL, W        ; Add cross products
                      08718         addwf   R2 + 1, F
                      08719         movf    PRODH, W
                      08720         addwfc  R2 + 2, F
                      08721         clrf    WREG
                      08722         addwfc  R2 + 3, F
                      08723 
                      08724         movf    R1, W
                      08725         mulwf   R3 + 1          ; AARGB3 * BARGB2 = PRODHL
                      08726         movf    PRODL, W        ; Add cross products
                      08727         addwf   R2 + 1, F
                      08728         movf    PRODH, W
                      08729         addwfc  R2 + 2, F
                      08730         clrf    WREG
                      08731         addwfc  R2 + 3, F
                      08732 
                      08733         movf    R1 + 2, W
                      08734         mulwf   R3              ; AARGB1 * BARGB3 = PRODHL
                      08735         movf    PRODL, W        ; Add cross products
                      08736         addwf   R2 + 2, F
                      08737         movf    PRODH, W
                      08738         addwfc  R2 + 3, F
                      08739         movf    R1 + 2, W
                      08740         mulwf   R3 + 1          ; AARGB1 * BARGB2 = PRODHL
                      08741         clrf    WREG            ; Add cross products
                      08742         clrf    R0
                      08743         addwfc  R0, F
                      08744         movf    PRODL, W
                      08745         addwf   R2 + 3, F
                      08746         movf    PRODH, W
                      08747         addwfc  R0, F
                      08748 
                      08749         movf    R1, W
                      08750         mulwf   R3 + 2          ; AARGB3 * BARGB1 = PRODHL
                      08751         movf    PRODL, W        ; Add cross products
                      08752         addwf   R2 + 2, F
                      08753         movf    PRODH, W
                      08754         addwfc  R2 + 3, F
                      08755         clrf    WREG
                      08756         clrf    R0 + 1
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08757         addwfc  R0, F
                      08758         addwfc  R0 + 1, F
                      08759 
                      08760         movf    R1 + 1, W
                      08761         mulwf   R3 + 2          ; AARGB2 * BARGB1 = PRODHL
                      08762         movf    PRODL, W        ; Add cross products
                      08763         addwf   R2 + 3, F
                      08764         movf    PRODH, W
                      08765         addwfc  R0, F
                      08766         clrf    WREG
                      08767         addwfc  R0 + 1, F
                      08768 
                      08769         movf    R1 + 2, W
                      08770         mulwf   R3 + 2          ; AARGB1 * BARGB1 = PRODHL
                      08771         movf    PRODL, W        ; Add cross products
                      08772         addwf   R0, F
                      08773         movf    PRODH, W
                      08774         addwfc  R0 + 1, F
                      08775 
                      08776         movf    R1 + 3, W
                      08777         mulwf   R3 + 1          ; AARGB0 * BARGB2 = PRODHL
                      08778         movf    PRODL, W        ; Add cross products
                      08779         addwf   R0, F
                      08780         movf    PRODH, W
                      08781         addwfc  R0 + 1, F
                      08782         movf    R1 + 3, W
                      08783         mulwf   R3 + 2          ; AARGB0 * BARGB1 = PRODHL
                      08784         clrf    WREG            ; Add cross products
                      08785         clrf    R0 + 2
                      08786         addwfc  R0 + 2, F
                      08787         movf    PRODL, W
                      08788         addwf   R0 + 1, F
                      08789         movf    PRODH, W
                      08790         addwfc  R0 + 2, F
                      08791 
                      08792         movf    R1 + 3, W
                      08793         mulwf   R3              ; AARGB0 * BARGB3 = PRODHL
                      08794         movf    PRODL, W        ; Add cross products
                      08795         addwf   R2 + 3, F
                      08796         movf    PRODH, W
                      08797         addwfc  R0, F
                      08798         clrf    WREG
                      08799         addwfc  R0 + 1, F
                      08800         addwfc  R0 + 2, F
                      08801 
                      08802         movf    R1 + 3, W
                      08803         mulwf   R3 + 3          ; AARGB0 * BARGB0 = PRODHL
                      08804         movff   PRODH, R0 + 3   ; Add cross products
                      08805         movf    PRODL, W
                      08806         addwf   R0 + 2, F
                      08807         clrf    WREG
                      08808         addwfc  R0 + 3, F
                      08809 
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08810         movf    R1, W
                      08811         mulwf   R3 + 3          ; AARGB3 * BARGB0 = PRODHL
                      08812         movf    PRODL, W        ; Add cross products
                      08813         addwf   R2 + 3, F
                      08814         movf    PRODH, W
                      08815         addwfc  R0, F
                      08816         clrf    WREG
                      08817         addwfc  R0 + 1, F
                      08818         addwfc  R0 + 2, F
                      08819         addwfc  R0 + 3, F
                      08820 
                      08821         movf    R1 + 1, W
                      08822         mulwf   R3 + 3          ; AARGB2 * BARGB0 = PRODHL
                      08823         movf    PRODL, W        ; Add cross products
                      08824         addwf   R0, F
                      08825         movf    PRODH, W
                      08826         addwfc  R0 + 1, F
                      08827         clrf    WREG
                      08828         addwfc  R0 + 2, F
                      08829         addwfc  R0 + 3, F
                      08830 
                      08831         movf    R1 + 2, W
                      08832         mulwf   R3 + 3          ; AARGB1 * BARGB0 = PRODHL
                      08833         movf    PRODL, W        ; Add cross products
                      08834         addwf   R0 + 1, F
                      08835         movf    PRODH, W
                      08836         addwfc  R0 + 2, F
                      08837         clrf    WREG
                      08838         addwfc  R0 + 3, F
                      08839 
                      08840         btfss   R3 + 3, 7
                      08841         bra     mulsign
                      08842         movf    R1, W
                      08843         subwf   R0, F
                      08844         movf    R1 + 1, W
                      08845         subwfb  R0 + 1, F
                      08846         movf    R1 + 2, W
                      08847         subwfb  R0 + 2, F
                      08848         movf    R1 + 3, W
                      08849         subwfb  R0 + 3, F
                      08850 
                      08851 mulsign btfss   R1 + 3, 7
                      08852         bra     muldone
                      08853         movf    R3, W
                      08854         subwf   R0, F
                      08855         movf    R3 + 1, W
                      08856         subwfb  R0 + 1, F
                      08857         movf    R3 + 2, W
                      08858         subwfb  R0 + 2, F
                      08859         movf    R3 + 3, W
                      08860         subwfb  R0 + 3, F
                      08861 
                      08862 muldone movf    R2, W           ; Get low byte to W
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      08863         goto    DUNN
                      08864   NOLIST
                      08865 DUNN_USED = 1
                      08866     endif
                      08867 
                      08868 ;****************************************************************
                      08869 ;* JUMPMAN    : Routine to jump to address in R8                *
                      08870 ;*                                                              *
                      08871 ;* Input      : R8 = address to jump to                         *
                      08872 ;* Output     : None                                            *
                      08873 ;*                                                              *
                      08874 ;* Notes      : Only jumps in first 32K words (most jumps to library.)*
                      08875 ;*            : Stores W in FSR0L in case anyone needs it.      *
                      08876 ;****************************************************************
                      08877 
                      08878     ifdef JUMPMAN_USED
                      08879   LIST
                      08880 JUMPMAN movwf   FSR0L
                      08881         clrf    PCLATU
                      08882         movf    R8 + 1, W
                      08883         movwf   PCLATH
                      08884         movf    R8, W
                      08885         movwf   PCL
                      08886   NOLIST
                      08887     endif
                      08888 
                      08889 ;****************************************************************
                      08890 ;* DUNN       : Hit Watchdog, Banks to 0 and Return             *
                      08891 ;*                                                              *
                      08892 ;* Input      : None                                            *
                      08893 ;* Output     : None                                            *
                      08894 ;*                                                              *
                      08895 ;* Notes      : 6 clocks including Call - Doesn't mess with W.  *
                      08896 ;****************************************************************
                      08897 
                      08898     ifdef DUNN_USED
                      08899   LIST
                      08900 DUNN    movlb   0               ; 1 Reset banks to 0
                      08901 DUNN5   CLRWDT?NOP              ; 1 Hit Watchdog timer
                      08902         return                  ; 2 Done
                      08903   NOLIST
                      08904     endif
                      08905 
                      08906 ;****************************************************************
                      08907 ;* INIT       : Finish inits that won't fit between 0 & 8       *
                      08908 ;*                                                              *
                      08909 ;* Input      : None                                            *
                      08910 ;* Output     : None                                            *
                      08911 ;*                                                              *
                      08912 ;* Notes      :                                                 *
                      08913 ;****************************************************************
                      08914 
                      08915   LIST
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000004                08916 INIT
                      08952   LIST
000004                08953 main
                      00301 
                      00302 
                      00303 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00036   Z00002  #HEADER
000004                00304 Z00002
                      00305 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00063   Z00003  #CONFIG
000004                00306 Z00003
                      00307 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00584   Z00004  BANKA   $0000, $005F
000004                00308 Z00004
                      00309 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00585   Z00005  BANK0   $0060, $00FF
000004                00310 Z00005
                      00311 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00586   Z00006  BANK1   $0100, $01FF
000004                00312 Z00006
                      00313 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00587   Z00007  BANK2   $0200, $02FF
000004                00314 Z00007
                      00315 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00588   Z00008  BANK3   $0300, $03FF
000004                00316 Z00008
                      00317 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00589   Z00009  BANK4   $0400, $04FF
000004                00318 Z00009
                      00319 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00590   Z0000A  BANK5   $0500, $05FF
000004                00320 Z0000A
                      00321 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00591   Z0000B  BANK6   $0600, $06FF
000004                00322 Z0000B
                      00323 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00592   Z0000C  BANK7   $0700, $07FF
000004                00324 Z0000C
                      00325 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00593   Z0000D  BANK8   $0800, $08FF
000004                00326 Z0000D
                      00327 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00594   Z0000E  BANK9   $0900, $09FF
000004                00328 Z0000E
                      00329 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00595   Z0000F  BANK10  $0A00, $0AFF
000004                00330 Z0000F
                      00331 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00596   Z00010  BANK11  $0B00, $0BFF
000004                00332 Z00010
                      00333 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00597   Z00011  BANK12  $0C00, $0CFF
000004                00334 Z00011
                      00335 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00598   Z00012  BANK13  $0D00, $0DFF
000004                00336 Z00012
                      00337 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00599   Z00013  BANK14  $0E00, $0E40
000004                00338 Z00013
                      00339 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00601   Z00014  'EEPROM  $F00000, $F003F
                            F
000004                00340 Z00014
                      00341 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00603   Z00015      #MSG "LONG Variables
                             enabled (PBPL used)"
000004                00342 Z00015
                      00343 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00604   Z00016      LIBRARY  "PBPPI18L"
000004                00344 Z00016
                      00345 
                      00346 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00605   Z00017      INCLUDE "PBPPI18L.RA
                            M"
000004                00347 Z00017
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00348 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00608   Z00018      INCLUDE "PBPPIC18.RA
                            M"
000004                00349 Z00018
                      00350 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00609   Z00019  #ENDIF
000004                00351 Z00019
                      00352 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00610   Z0001A  DEFINE  ADC_CHANNELS 1
000004                00353 Z0001A
                      00354 ; C:\PROGRAM FILES (X86)\PBP3\DEVICES\PIC18F46K80.PBPINC        00618   Z0001B  #header
000004                00355 Z0001B
                      00356 
                      00357         END
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 153


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABAT                              00000004
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCMD                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADC_BITS                          00000008
ADC_CHANNELS                      1
ADC_CLOCK                         00000003
ADC_SAMPLEUS                      00000032
ADDEN                             00000003
ADDEN1                            00000003
ADDEN2                            00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADMSK1                            00000001
ADMSK2                            00000002
ADMSK3                            00000003
ADMSK4                            00000004
ADMSK5                            00000005
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ANCON0                            00000F5D
ANCON1                            00000F5C
ANSEL0                            00000000
ANSEL1                            00000001
ANSEL10                           00000002
ANSEL11                           00000003
ANSEL12                           00000004
ANSEL13                           00000005
ANSEL14                           00000006
ANSEL2                            00000002
ANSEL3                            00000003
ANSEL4                            00000004
ANSEL5                            00000005
ANSEL6                            00000006
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 154


SYMBOL TABLE
  LABEL                             VALUE 

ANSEL7                            00000007
ANSEL8                            00000000
ANSEL9                            00000001
B0CON                             00000E80
B0D0                              00000E86
B0D00                             00000000
B0D01                             00000001
B0D02                             00000002
B0D03                             00000003
B0D04                             00000004
B0D05                             00000005
B0D06                             00000006
B0D07                             00000007
B0D1                              00000E87
B0D10                             00000000
B0D11                             00000001
B0D12                             00000002
B0D13                             00000003
B0D14                             00000004
B0D15                             00000005
B0D16                             00000006
B0D17                             00000007
B0D2                              00000E88
B0D20                             00000000
B0D21                             00000001
B0D22                             00000002
B0D23                             00000003
B0D24                             00000004
B0D25                             00000005
B0D26                             00000006
B0D27                             00000007
B0D3                              00000E89
B0D30                             00000000
B0D31                             00000001
B0D32                             00000002
B0D33                             00000003
B0D34                             00000004
B0D35                             00000005
B0D36                             00000006
B0D37                             00000007
B0D4                              00000E8A
B0D40                             00000000
B0D41                             00000001
B0D42                             00000002
B0D43                             00000003
B0D44                             00000004
B0D45                             00000005
B0D46                             00000006
B0D47                             00000007
B0D5                              00000E8B
B0D50                             00000000
B0D51                             00000001
B0D52                             00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 155


SYMBOL TABLE
  LABEL                             VALUE 

B0D53                             00000003
B0D54                             00000004
B0D55                             00000005
B0D56                             00000006
B0D57                             00000007
B0D6                              00000E8C
B0D60                             00000000
B0D61                             00000001
B0D62                             00000002
B0D63                             00000003
B0D64                             00000004
B0D65                             00000005
B0D66                             00000006
B0D67                             00000007
B0D7                              00000E8D
B0D70                             00000000
B0D71                             00000001
B0D72                             00000002
B0D73                             00000003
B0D74                             00000004
B0D75                             00000005
B0D76                             00000006
B0D77                             00000007
B0DLC                             00000E85
B0EIDH                            00000E83
B0EIDL                            00000E84
B0IE                              00000002
B0SIDH                            00000E81
B0SIDL                            00000E82
B0TXEN                            00000002
B1CON                             00000E90
B1D0                              00000E96
B1D00                             00000000
B1D01                             00000001
B1D02                             00000002
B1D03                             00000003
B1D04                             00000004
B1D05                             00000005
B1D06                             00000006
B1D07                             00000007
B1D1                              00000E97
B1D10                             00000000
B1D11                             00000001
B1D12                             00000002
B1D13                             00000003
B1D14                             00000004
B1D15                             00000005
B1D16                             00000006
B1D17                             00000007
B1D2                              00000E98
B1D20                             00000000
B1D21                             00000001
B1D22                             00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 156


SYMBOL TABLE
  LABEL                             VALUE 

B1D23                             00000003
B1D24                             00000004
B1D25                             00000005
B1D26                             00000006
B1D27                             00000007
B1D3                              00000E99
B1D30                             00000000
B1D31                             00000001
B1D32                             00000002
B1D33                             00000003
B1D34                             00000004
B1D35                             00000005
B1D36                             00000006
B1D37                             00000007
B1D4                              00000E9A
B1D40                             00000000
B1D41                             00000001
B1D42                             00000002
B1D43                             00000003
B1D44                             00000004
B1D45                             00000005
B1D46                             00000006
B1D47                             00000007
B1D5                              00000E9B
B1D50                             00000000
B1D51                             00000001
B1D52                             00000002
B1D53                             00000003
B1D54                             00000004
B1D55                             00000005
B1D56                             00000006
B1D57                             00000007
B1D6                              00000E9C
B1D60                             00000000
B1D61                             00000001
B1D62                             00000002
B1D63                             00000003
B1D64                             00000004
B1D65                             00000005
B1D66                             00000006
B1D67                             00000007
B1D7                              00000E9D
B1D70                             00000000
B1D71                             00000001
B1D72                             00000002
B1D73                             00000003
B1D74                             00000004
B1D75                             00000005
B1D76                             00000006
B1D77                             00000007
B1DLC                             00000E95
B1EIDH                            00000E93
B1EIDL                            00000E94
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 157


SYMBOL TABLE
  LABEL                             VALUE 

B1IE                              00000003
B1SIDH                            00000E91
B1SIDL                            00000E92
B1TXEN                            00000003
B2CON                             00000EA0
B2D0                              00000EA6
B2D00                             00000000
B2D01                             00000001
B2D02                             00000002
B2D03                             00000003
B2D04                             00000004
B2D05                             00000005
B2D06                             00000006
B2D07                             00000007
B2D1                              00000EA7
B2D10                             00000000
B2D11                             00000001
B2D12                             00000002
B2D13                             00000003
B2D14                             00000004
B2D15                             00000005
B2D16                             00000006
B2D17                             00000007
B2D2                              00000EA8
B2D20                             00000000
B2D21                             00000001
B2D22                             00000002
B2D23                             00000003
B2D24                             00000004
B2D25                             00000005
B2D26                             00000006
B2D27                             00000007
B2D3                              00000EA9
B2D30                             00000000
B2D31                             00000001
B2D32                             00000002
B2D33                             00000003
B2D34                             00000004
B2D35                             00000005
B2D36                             00000006
B2D37                             00000007
B2D4                              00000EAA
B2D40                             00000000
B2D41                             00000001
B2D42                             00000002
B2D43                             00000003
B2D44                             00000004
B2D45                             00000005
B2D46                             00000006
B2D47                             00000007
B2D5                              00000EAB
B2D50                             00000000
B2D51                             00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 158


SYMBOL TABLE
  LABEL                             VALUE 

B2D52                             00000002
B2D53                             00000003
B2D54                             00000004
B2D55                             00000005
B2D56                             00000006
B2D57                             00000007
B2D6                              00000EAC
B2D60                             00000000
B2D61                             00000001
B2D62                             00000002
B2D63                             00000003
B2D64                             00000004
B2D65                             00000005
B2D66                             00000006
B2D67                             00000007
B2D7                              00000EAD
B2D70                             00000000
B2D71                             00000001
B2D72                             00000002
B2D73                             00000003
B2D74                             00000004
B2D75                             00000005
B2D76                             00000006
B2D77                             00000007
B2DLC                             00000EA5
B2EIDH                            00000EA3
B2EIDL                            00000EA4
B2IE                              00000004
B2SIDH                            00000EA1
B2SIDL                            00000EA2
B2TXEN                            00000004
B3CON                             00000EB0
B3D0                              00000EB6
B3D00                             00000000
B3D01                             00000001
B3D02                             00000002
B3D03                             00000003
B3D04                             00000004
B3D05                             00000005
B3D06                             00000006
B3D07                             00000007
B3D1                              00000EB7
B3D10                             00000000
B3D11                             00000001
B3D12                             00000002
B3D13                             00000003
B3D14                             00000004
B3D15                             00000005
B3D16                             00000006
B3D17                             00000007
B3D2                              00000EB8
B3D20                             00000000
B3D21                             00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 159


SYMBOL TABLE
  LABEL                             VALUE 

B3D22                             00000002
B3D23                             00000003
B3D24                             00000004
B3D25                             00000005
B3D26                             00000006
B3D27                             00000007
B3D3                              00000EB9
B3D30                             00000000
B3D31                             00000001
B3D32                             00000002
B3D33                             00000003
B3D34                             00000004
B3D35                             00000005
B3D36                             00000006
B3D37                             00000007
B3D4                              00000EBA
B3D40                             00000000
B3D41                             00000001
B3D42                             00000002
B3D43                             00000003
B3D44                             00000004
B3D45                             00000005
B3D46                             00000006
B3D47                             00000007
B3D5                              00000EBB
B3D50                             00000000
B3D51                             00000001
B3D52                             00000002
B3D53                             00000003
B3D54                             00000004
B3D55                             00000005
B3D56                             00000006
B3D57                             00000007
B3D6                              00000EBC
B3D60                             00000000
B3D61                             00000001
B3D62                             00000002
B3D63                             00000003
B3D64                             00000004
B3D65                             00000005
B3D66                             00000006
B3D67                             00000007
B3D7                              00000EBD
B3D70                             00000000
B3D71                             00000001
B3D72                             00000002
B3D73                             00000003
B3D74                             00000004
B3D75                             00000005
B3D76                             00000006
B3D77                             00000007
B3DLC                             00000EB5
B3EIDH                            00000EB3
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 160


SYMBOL TABLE
  LABEL                             VALUE 

B3EIDL                            00000EB4
B3IE                              00000005
B3SIDH                            00000EB1
B3SIDL                            00000EB2
B3TXEN                            00000005
B4CON                             00000EC0
B4D0                              00000EC6
B4D00                             00000000
B4D01                             00000001
B4D02                             00000002
B4D03                             00000003
B4D04                             00000004
B4D05                             00000005
B4D06                             00000006
B4D07                             00000007
B4D1                              00000EC7
B4D10                             00000000
B4D11                             00000001
B4D12                             00000002
B4D13                             00000003
B4D14                             00000004
B4D15                             00000005
B4D16                             00000006
B4D17                             00000007
B4D2                              00000EC8
B4D20                             00000000
B4D21                             00000001
B4D22                             00000002
B4D23                             00000003
B4D24                             00000004
B4D25                             00000005
B4D26                             00000006
B4D27                             00000007
B4D3                              00000EC9
B4D30                             00000000
B4D31                             00000001
B4D32                             00000002
B4D33                             00000003
B4D34                             00000004
B4D35                             00000005
B4D36                             00000006
B4D37                             00000007
B4D4                              00000ECA
B4D40                             00000000
B4D41                             00000001
B4D42                             00000002
B4D43                             00000003
B4D44                             00000004
B4D45                             00000005
B4D46                             00000006
B4D47                             00000007
B4D5                              00000ECB
B4D50                             00000000
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 161


SYMBOL TABLE
  LABEL                             VALUE 

B4D51                             00000001
B4D52                             00000002
B4D53                             00000003
B4D54                             00000004
B4D55                             00000005
B4D56                             00000006
B4D57                             00000007
B4D6                              00000ECC
B4D60                             00000000
B4D61                             00000001
B4D62                             00000002
B4D63                             00000003
B4D64                             00000004
B4D65                             00000005
B4D66                             00000006
B4D67                             00000007
B4D7                              00000ECD
B4D70                             00000000
B4D71                             00000001
B4D72                             00000002
B4D73                             00000003
B4D74                             00000004
B4D75                             00000005
B4D76                             00000006
B4D77                             00000007
B4DLC                             00000EC5
B4EIDH                            00000EC3
B4EIDL                            00000EC4
B4IE                              00000006
B4SIDH                            00000EC1
B4SIDL                            00000EC2
B4TXEN                            00000006
B5CON                             00000ED0
B5D0                              00000ED6
B5D00                             00000000
B5D01                             00000001
B5D02                             00000002
B5D03                             00000003
B5D04                             00000004
B5D05                             00000005
B5D06                             00000006
B5D07                             00000007
B5D1                              00000ED7
B5D10                             00000000
B5D11                             00000001
B5D12                             00000002
B5D13                             00000003
B5D14                             00000004
B5D15                             00000005
B5D16                             00000006
B5D17                             00000007
B5D2                              00000ED8
B5D20                             00000000
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 162


SYMBOL TABLE
  LABEL                             VALUE 

B5D21                             00000001
B5D22                             00000002
B5D23                             00000003
B5D24                             00000004
B5D25                             00000005
B5D26                             00000006
B5D27                             00000007
B5D3                              00000ED9
B5D30                             00000000
B5D31                             00000001
B5D32                             00000002
B5D33                             00000003
B5D34                             00000004
B5D35                             00000005
B5D36                             00000006
B5D37                             00000007
B5D4                              00000EDA
B5D40                             00000000
B5D41                             00000001
B5D42                             00000002
B5D43                             00000003
B5D44                             00000004
B5D45                             00000005
B5D46                             00000006
B5D47                             00000007
B5D5                              00000EDB
B5D50                             00000000
B5D51                             00000001
B5D52                             00000002
B5D53                             00000003
B5D54                             00000004
B5D55                             00000005
B5D56                             00000006
B5D57                             00000007
B5D6                              00000EDC
B5D60                             00000000
B5D61                             00000001
B5D62                             00000002
B5D63                             00000003
B5D64                             00000004
B5D65                             00000005
B5D66                             00000006
B5D67                             00000007
B5D7                              00000EDD
B5D70                             00000000
B5D71                             00000001
B5D72                             00000002
B5D73                             00000003
B5D74                             00000004
B5D75                             00000005
B5D76                             00000006
B5D77                             00000007
B5DLC                             00000ED5
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 163


SYMBOL TABLE
  LABEL                             VALUE 

B5EIDH                            00000ED3
B5EIDL                            00000ED4
B5IE                              00000007
B5SIDH                            00000ED1
B5SIDL                            00000ED2
B5TXEN                            00000007
BANK0_END                         000000FF
BANK0_START                       00000060
BANK10_END                        00000AFF
BANK10_START                      00000A00
BANK11_END                        00000BFF
BANK11_START                      00000B00
BANK12_END                        00000CFF
BANK12_START                      00000C00
BANK13_END                        00000DFF
BANK13_START                      00000D00
BANK14_END                        00000E40
BANK14_START                      00000E00
BANK1_END                         000001FF
BANK1_START                       00000100
BANK2_END                         000002FF
BANK2_START                       00000200
BANK3_END                         000003FF
BANK3_START                       00000300
BANK4_END                         000004FF
BANK4_START                       00000400
BANK5_END                         000005FF
BANK5_START                       00000500
BANK6_END                         000006FF
BANK6_START                       00000600
BANK7_END                         000007FF
BANK7_START                       00000700
BANK8_END                         000008FF
BANK8_START                       00000800
BANK9_END                         000009FF
BANK9_START                       00000900
BANKA_END                         0000005F
BANKA_START                       00000000
BANKED                            00000001
BAUDCON1                          00000FA7
BAUDCON2                          00000FB9
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGVST                             00000006
BIE0                              00000E7E
BIT?FLIP                          
BIT?GOTO                          
BIT?R1                            
BIT?R2                            
BIT?W                             
BLOCK_SIZE                        00000040
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 164


SYMBOL TABLE
  LABEL                             VALUE 

BOR                               00000000
BRG16                             00000003
BRGCON1                           00000E43
BRGCON2                           00000E44
BRGCON3                           00000E45
BRGH                              00000002
BRGH1                             00000002
BRGH2                             00000002
BRP0                              00000000
BRP1                              00000001
BRP2                              00000002
BRP3                              00000003
BRP4                              00000004
BRP5                              00000005
BSEL0                             00000E7D
BSR                               00000FE0
BUTTON_PAUSE                      0000000A
C                                 00000000
C1TSEL                            00000000
C2TSEL                            00000001
C3TSEL                            00000002
C4TSEL                            00000003
C5TSEL                            00000004
CANCAP                            00000004
CANCON                            00000F6F
CANCON_RO0                        00000F3F
CANCON_RO1                        00000F2F
CANCON_RO2                        00000F1F
CANCON_RO3                        00000F0F
CANCON_RO4                        00000EDF
CANCON_RO5                        00000ECF
CANCON_RO6                        00000EBF
CANCON_RO7                        00000EAF
CANCON_RO8                        00000E9F
CANCON_RO9                        00000E8F
CANSTAT                           00000F6E
CANSTAT_RO0                       00000F3E
CANSTAT_RO1                       00000F2E
CANSTAT_RO2                       00000F1E
CANSTAT_RO3                       00000F0E
CANSTAT_RO4                       00000EDE
CANSTAT_RO5                       00000ECE
CANSTAT_RO6                       00000EBE
CANSTAT_RO7                       00000EAE
CANSTAT_RO8                       00000E9E
CANSTAT_RO9                       00000E8E
CCH0                              00000000
CCH1                              00000001
CCP1CON                           00000FBB
CCP1IE                            00000001
CCP1IF                            00000001
CCP1IP                            00000001
CCP1M0                            00000000
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 165


SYMBOL TABLE
  LABEL                             VALUE 

CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1MD                            00000003
CCP1OD                            00000002
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000F50
CCP2IE                            00000002
CCP2IF                            00000002
CCP2IP                            00000002
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2MD                            00000004
CCP2OD                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP3CON                           00000F4D
CCP3IE                            00000000
CCP3IF                            00000000
CCP3IP                            00000000
CCP3M0                            00000000
CCP3M1                            00000001
CCP3M2                            00000002
CCP3M3                            00000003
CCP3MD                            00000005
CCP3OD                            00000004
CCP3X                             00000005
CCP3Y                             00000004
CCP4CON                           00000F4A
CCP4IE                            00000001
CCP4IF                            00000001
CCP4IP                            00000001
CCP4M0                            00000000
CCP4M1                            00000001
CCP4M2                            00000002
CCP4M3                            00000003
CCP4MD                            00000006
CCP4OD                            00000005
CCP4X                             00000005
CCP4Y                             00000004
CCP5CON                           00000F47
CCP5IE                            00000002
CCP5IF                            00000002
CCP5IP                            00000002
CCP5M0                            00000000
CCP5M1                            00000001
CCP5M2                            00000002
CCP5M3                            00000003
CCP5MD                            00000007
CCP5OD                            00000006
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 166


SYMBOL TABLE
  LABEL                             VALUE 

CCP5X                             00000005
CCP5Y                             00000004
CCPR1                             00000FBC
CCPR1H                            00000FBD
CCPR1L                            00000FBC
CCPR2                             00000F51
CCPR2H                            00000F52
CCPR2L                            00000F51
CCPR3                             00000F4E
CCPR3H                            00000F4F
CCPR3L                            00000F4E
CCPR4                             00000F4B
CCPR4H                            00000F4C
CCPR4L                            00000F4B
CCPR5                             00000F48
CCPR5H                            00000F49
CCPR5L                            00000F48
CCPTMRS                           00000F99
CFGS                              00000006
CHK?RP                            
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CHS4                              00000006
CHSN0                             00000000
CHSN1                             00000001
CHSN2                             00000002
CIOCON                            00000F70
CKE                               00000006
CKP                               00000004
CLKSEL                            00000000
CLRWDT?                           
CLRWDT?NOP                        
CM                                00000005
CM1CON                            00000F5F
CM1CON1                           00000F5F
CM2CON                            00000F5E
CM2CON1                           00000F5E
CMP1IE                            00000004
CMP1IF                            00000004
CMP1IP                            00000004
CMP1MD                            00000000
CMP1OUT                           00000006
CMP2IE                            00000005
CMP2IF                            00000005
CMP2IP                            00000005
CMP2MD                            00000001
CMP2OUT                           00000007
CMPL0                             00000006
CMPL1                             00000007
CMSTAT                            00000FB4
CMSTATUS                          00000FB4
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 167


SYMBOL TABLE
  LABEL                             VALUE 

COE                               00000006
COMSTAT                           00000F71
CON                               00000007
CPOL                              00000005
CREF                              00000002
CREN                              00000004
CREN1                             00000004
CREN2                             00000004
CSRC                              00000007
CSRC1                             00000007
CSRC2                             00000007
CTMUCONH                          00000F55
CTMUCONL                          00000F54
CTMUDS                            00000000
CTMUEN                            00000007
CTMUICON                          00000F53
CTMUIE                            00000003
CTMUIF                            00000003
CTMUIP                            00000003
CTMUMD                            00000006
CTMUSIDL                          00000005
CTTRIG                            00000000
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVR4                              00000004
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRSS                             00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DC3B0                             00000004
DC3B1                             00000005
DC4B0                             00000004
DC4B1                             00000005
DC5B0                             00000004
DC5B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEBUGIN_BIT                       00000000
DEBUGIN_MODE                      00000001
DEBUGIN_REG                       00000F81
DEBUG_BAUD                        00000960
DEBUG_BIT                         00000000
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 168


SYMBOL TABLE
  LABEL                             VALUE 

DEBUG_DELAY                       00000193
DEBUG_MODE                        00000001
DEBUG_REG                         00000F81
DLC0                              00000000
DLC1                              00000001
DLC2                              00000002
DLC3                              00000003
DONE                              00000001
D_A                               00000005
D_NOT_A                           00000005
ECANCON                           00000F72
ECANMD                            00000002
ECCP1AS                           00000FBF
ECCP1AS0                          00000004
ECCP1AS1                          00000005
ECCP1AS2                          00000006
ECCP1ASE                          00000007
ECCP1CON                          00000FBB
ECCP1DEL                          00000FBE
ECCP2CON                          00000F50
EDG1POL                           00000004
EDG1SEL0                          00000002
EDG1SEL1                          00000003
EDG1STAT                          00000000
EDG2POL                           00000007
EDG2SEL0                          00000005
EDG2SEL1                          00000006
EDG2STAT                          00000001
EDGEN                             00000003
EDGSEQEN                          00000002
EDI16                             00000000
EDI17                             00000001
EEADR                             00000F74
EEADRH                            00000F75
EECON1                            00000F7F
EECON2                            00000F7E
EEDATA                            00000F73
EEIE                              00000006
EEIF                              00000006
EEIP                              00000006
EEPGD                             00000007
EEPROM_START                      00F00000
EICODE0                           00000000
EICODE1                           00000001
EICODE1_ICODE0                    00000001
EICODE2                           00000002
EICODE2_ICODE1                    00000002
EICODE3                           00000003
EICODE3_ICODE2                    00000003
EICODE4                           00000004
EID0                              00000000
EID1                              00000001
EID10                             00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 169


SYMBOL TABLE
  LABEL                             VALUE 

EID11                             00000003
EID12                             00000004
EID13                             00000005
EID14                             00000006
EID15                             00000007
EID16                             00000000
EID17                             00000001
EID2                              00000002
EID3                              00000003
EID4                              00000004
EID5                              00000005
EID6                              00000006
EID7                              00000007
EID8                              00000000
EID9                              00000001
ENDRHI                            00000005
ERRIE                             00000005
ERRIF                             00000005
ERRIP                             00000005
EVPOL0                            00000003
EVPOL1                            00000004
EWARN                             00000000
EWIN0                             00000000
EWIN1                             00000001
EWIN2                             00000002
EWIN3                             00000003
EWIN4                             00000004
EXID                              00000003
EXIDE                             00000003
EXIDEN                            00000003
F0BP_0                            00000000
F0BP_1                            00000001
F0BP_2                            00000002
F0BP_3                            00000003
F10BP_0                           00000000
F10BP_1                           00000001
F10BP_2                           00000002
F10BP_3                           00000003
F11BP_0                           00000004
F11BP_1                           00000005
F11BP_2                           00000006
F11BP_3                           00000007
F12BP_0                           00000000
F12BP_1                           00000001
F12BP_2                           00000002
F12BP_3                           00000003
F13BP_0                           00000004
F13BP_1                           00000005
F13BP_2                           00000006
F13BP_3                           00000007
F14BP_0                           00000000
F14BP_1                           00000001
F14BP_2                           00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 170


SYMBOL TABLE
  LABEL                             VALUE 

F14BP_3                           00000003
F15BP_0                           00000004
F15BP_1                           00000005
F15BP_2                           00000006
F15BP_3                           00000007
F1BP_0                            00000004
F1BP_1                            00000005
F1BP_2                            00000006
F1BP_3                            00000007
F2BP_0                            00000000
F2BP_1                            00000001
F2BP_2                            00000002
F2BP_3                            00000003
F3BP_0                            00000004
F3BP_1                            00000005
F3BP_2                            00000006
F3BP_3                            00000007
F4BP_0                            00000000
F4BP_1                            00000001
F4BP_2                            00000002
F4BP_3                            00000003
F5BP_0                            00000004
F5BP_1                            00000005
F5BP_2                            00000006
F5BP_3                            00000007
F6BP_0                            00000000
F6BP_1                            00000001
F6BP_2                            00000002
F6BP_3                            00000003
F7BP_0                            00000004
F7BP_1                            00000005
F7BP_2                            00000006
F7BP_3                            00000007
F8BP_0                            00000000
F8BP_1                            00000001
F8BP_2                            00000002
F8BP_3                            00000003
F9BP_0                            00000004
F9BP_1                            00000005
F9BP_2                            00000006
F9BP_3                            00000007
FAST                              00000001
FERR                              00000002
FERR1                             00000002
FERR2                             00000002
FIFOWM                            00000005
FIFOWMIE                          00000000
FIFOWMIF                          00000000
FIFOWMIP                          00000000
FIL0_0                            00000000
FIL0_1                            00000001
FIL10_0                           00000004
FIL10_1                           00000005
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 171


SYMBOL TABLE
  LABEL                             VALUE 

FIL11_0                           00000006
FIL11_1                           00000007
FIL12_0                           00000000
FIL12_1                           00000001
FIL13_0                           00000002
FIL13_1                           00000003
FIL14_0                           00000004
FIL14_1                           00000005
FIL15_0                           00000006
FIL15_1                           00000007
FIL1_0                            00000002
FIL1_1                            00000003
FIL2_0                            00000004
FIL2_1                            00000005
FIL3_0                            00000006
FIL3_1                            00000007
FIL4_0                            00000000
FIL4_1                            00000001
FIL5_0                            00000002
FIL5_1                            00000003
FIL6_0                            00000004
FIL6_1                            00000005
FIL7_0                            00000006
FIL7_1                            00000007
FIL8_0                            00000000
FIL8_1                            00000001
FIL9_0                            00000002
FIL9_1                            00000003
FILHIT0                           00000000
FILHIT0_TXPRI0                    00000000
FILHIT1                           00000001
FILHIT1_TXPRI1                    00000001
FILHIT2                           00000002
FILHIT2_RTREN                     00000002
FILHIT3                           00000003
FILHIT3_TXREQ                     00000003
FILHIT4                           00000004
FILHIT4_TXERR                     00000004
FLAGS                             00000000
FLC0                              00000000
FLC1                              00000001
FLC2                              00000002
FLC3                              00000003
FLC4                              00000004
FP0                               00000000
FP1                               00000001
FP2                               00000002
FP3                               00000003
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 172


SYMBOL TABLE
  LABEL                             VALUE 

FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GOP                               00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HFIOFS                            00000002
HLVDCON                           00000FA8
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
HPWM_OVERRIDE                     1
HSER2_BAUD                        00000960
HSER2_BITS                        00000008
HSER2_RCSTA                       00000090
HSER2_SPBRG                       00000019
HSER2_TXSTA                       00000020
HSER_BAUD                         00000960
HSER_BITS                         00000008
HSER_PORT                         00000001
HSER_RCSTA                        00000090
HSER_SPBRG                        00000019
HSER_TXSTA                        00000020
I2CFIRSTFLAG                      FLAGS, 2
I2CREADFLAG                       FLAGS, 3
I2CSTOPFLAG                       FLAGS, 5
I2CSTOPSTRFLAG                    FLAGS, 6
I2CWRITEFLAG                      FLAGS, 4
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ICODE0                            00000001
ICODE1                            00000002
ICODE2                            00000003
ICODE20                           00000001
ICODE21                           00000002
IDISSEN                           00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 173


SYMBOL TABLE
  LABEL                             VALUE 

IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INIT                              00000004
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INT3E                             00000005
INT3F                             00000002
INT3IE                            00000005
INT3IF                            00000002
INT3IP                            00000001
INT3P                             00000001
INTCON                            00000FF2
INTCON1                           00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTEDG3                           00000003
INTSRC                            00000007
IOCB                              00000F5A
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IPR4                              00000FB8
IPR5                              00000F78
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRNG0                             00000000
IRNG1                             00000001
IRVST                             00000005
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 174


SYMBOL TABLE
  LABEL                             VALUE 

IRXIE                             00000007
IRXIF                             00000007
IRXIP                             00000007
ITRIM0                            00000002
ITRIM1                            00000003
ITRIM2                            00000004
ITRIM3                            00000005
ITRIM4                            00000006
ITRIM5                            00000007
JTOFF                             00000001
JTOFF_FILHIT1                     00000001
L?CALL                            
L?GOTO                            
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LCDCDFLAG                         FLAGS, 0
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 175


SYMBOL TABLE
  LABEL                             VALUE 

LCDINITFLAG                       FLAGS, 1
LCD_BITS                          00000004
LCD_COMMANDUS                     000007D0
LCD_DATAUS                        00000032
LCD_DBIT                          00000000
LCD_DREG                          00000F80
LCD_EBIT                          00000003
LCD_EREG                          00000F81
LCD_LINES                         00000002
LCD_RSBIT                         00000004
LCD_RSREG                         00000F80
LCD_RWBIT                         00000004
LCD_RWREG                         00000F80
LVDIE                             00000002
LVDIF                             00000002
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
MDSEL0                            00000006
MDSEL1                            00000007
MFIOFS                            00000001
MFIOSEL                           00000000
MOVE?AB                           
MOVE?AN                           
MOVE?ANN                          
MOVE?ANW                          
MOVE?AT                           
MOVE?AW                           
MOVE?AWN                          
MOVE?AWW                          
MOVE?BA                           
MOVE?BB                           
MOVE?BN                           
MOVE?BT                           
MOVE?BW                           
MOVE?CA                           
MOVE?CB                           
MOVE?CN                           
MOVE?CT                           
MOVE?CW                           
MOVE?NA                           
MOVE?NB                           
MOVE?NN                           
MOVE?NNA                          
MOVE?NT                           
MOVE?NW                           
MOVE?NWA                          
MOVE?TA                           
MOVE?TB                           
MOVE?TN                           
MOVE?TT                           
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 176


SYMBOL TABLE
  LABEL                             VALUE 

MOVE?TW                           
MOVE?WA                           
MOVE?WB                           
MOVE?WN                           
MOVE?WNA                          
MOVE?WT                           
MOVE?WW                           
MOVE?WWA                          
MPASMX_USED                       00000001
MSEL0                             00000E79
MSEL1                             00000E7A
MSEL2                             00000E7B
MSEL3                             00000E7C
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CM                            00000005
NOT_DONE                          00000001
NOT_FIFOEMPTY                     00000007
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_RI                            00000004
NOT_T1DONE                        00000003
NOT_T1SYNC                        00000002
NOT_T3DONE                        00000003
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OBF                               00000006
ODCON                             00000F91
OERR                              00000001
OERR1                             00000001
OERR2                             00000001
OPMODE0                           00000005
OPMODE1                           00000006
OPMODE2                           00000007
OSC                               00000004
OSCCON                            00000FD3
OSCCON2                           00000FD2
OSCFIE                            00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 177


SYMBOL TABLE
  LABEL                             VALUE 

OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSC_VALID                         00000001
OSTS                              00000003
OV                                00000003
P                                 00000004
P1DC0                             00000000
P1DC1                             00000001
P1DC2                             00000002
P1DC3                             00000003
P1DC4                             00000004
P1DC5                             00000005
P1DC6                             00000006
P1M0                              00000006
P1M1                              00000007
P1RSEN                            00000007
PADCFG1                           00000F56
PBP_HARDWAREDEF                   
PBP_PATH                          C:\PROGRAM FILES (X86)\PBP3\
PC                                00000FF9
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIE4                              00000FB6
PIE5                              00000F76
PIR                               00000F9E
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PIR4                              00000FB7
PIR5                              00000F77
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
PMD0                              00000F59
PMD1                              00000F58
PMD2                              00000F57
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 178


SYMBOL TABLE
  LABEL                             VALUE 

POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PR4                               00000FA9
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PREV_ALT                          00000000
PREV_BANK                         00000000
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEG0                            00000000
PRSEG1                            00000001
PRSEG2                            00000002
PSA                               00000003
PSPCON                            00000F46
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMD                             00000007
PSPMODE                           00000004
PSS1AC0                           00000002
PSS1AC1                           00000003
PSS1BD0                           00000000
PSS1BD1                           00000001
PSTR1CON                          00000F9C
PULSIN_MAX                        0000FFFF
PWM1CON                           00000FBE
R0                                00000012
R1                                00000016
R2                                0000001A
R3                                0000001E
R4                                00000002
R5                                00000004
R6                                00000006
R7                                00000008
R8                                0000000A
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA5                               00000005
RA6                               00000006
RA7                               00000007
RAM_BANKS                         0000000F
RAM_END                           00000E40
RAM_START                         00000000
RB0DBEN                           00000002
RB0DBEN_FILHIT2                   00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 179


SYMBOL TABLE
  LABEL                             VALUE 

RB0_B0DLC                         00000004
RB0_B1DLC                         00000004
RB0_B2DLC                         00000004
RB0_B3DLC                         00000004
RB0_B4DLC                         00000004
RB0_B5DLC                         00000004
RB0_PORTB                         00000000
RB0_RXB0DLC                       00000004
RB0_RXB1DLC                       00000004
RB1_B0DLC                         00000005
RB1_B1DLC                         00000005
RB1_B2DLC                         00000005
RB1_B3DLC                         00000005
RB1_B4DLC                         00000005
RB1_B5DLC                         00000005
RB1_PORTB                         00000001
RB1_RXB0DLC                       00000005
RB1_RXB1DLC                       00000005
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC1IE                             00000005
RC1IF                             00000005
RC1IP                             00000005
RC2                               00000002
RC2IE                             00000005
RC2IF                             00000005
RC2IP                             00000005
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 180


SYMBOL TABLE
  LABEL                             VALUE 

RCREG1                            00000FAE
RCREG2                            00000F7A
RCSTA                             00000FAB
RCSTA1                            00000FAB
RCSTA2                            00000FA6
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RDPU                              00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_WRITE                        00000002
REC0                              00000000
REC1                              00000001
REC2                              00000002
REC3                              00000003
REC4                              00000004
REC5                              00000005
REC6                              00000006
REC7                              00000007
REFOCON                           00000F9A
REGSLP                            00000007
REPU                              00000006
RESET_ORG                         00000000
RI                                00000004
RM1                               0000000C
RM2                               0000000D
RODIV0                            00000000
RODIV1                            00000001
RODIV2                            00000002
RODIV3                            00000003
ROON                              00000007
ROSEL                             00000004
ROSSLP                            00000005
RR1                               0000000E
RR2                               0000000F
RS1                               00000010
RS2                               00000011
RSEN                              00000001
RST?RP                            
RTREN                             00000002
RTRRO                             00000005
RX9                               00000006
RX91                              00000006
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 181


SYMBOL TABLE
  LABEL                             VALUE 

RX92                              00000006
RX9D                              00000000
RX9D1                             00000000
RX9D2                             00000000
RXB0CON                           00000F60
RXB0D0                            00000F66
RXB0D00                           00000000
RXB0D01                           00000001
RXB0D02                           00000002
RXB0D03                           00000003
RXB0D04                           00000004
RXB0D05                           00000005
RXB0D06                           00000006
RXB0D07                           00000007
RXB0D1                            00000F67
RXB0D10                           00000000
RXB0D11                           00000001
RXB0D12                           00000002
RXB0D13                           00000003
RXB0D14                           00000004
RXB0D15                           00000005
RXB0D16                           00000006
RXB0D17                           00000007
RXB0D2                            00000F68
RXB0D20                           00000000
RXB0D21                           00000001
RXB0D22                           00000002
RXB0D23                           00000003
RXB0D24                           00000004
RXB0D25                           00000005
RXB0D26                           00000006
RXB0D27                           00000007
RXB0D3                            00000F69
RXB0D30                           00000000
RXB0D31                           00000001
RXB0D32                           00000002
RXB0D33                           00000003
RXB0D34                           00000004
RXB0D35                           00000005
RXB0D36                           00000006
RXB0D37                           00000007
RXB0D4                            00000F6A
RXB0D40                           00000000
RXB0D41                           00000001
RXB0D42                           00000002
RXB0D43                           00000003
RXB0D44                           00000004
RXB0D45                           00000005
RXB0D46                           00000006
RXB0D47                           00000007
RXB0D5                            00000F6B
RXB0D50                           00000000
RXB0D51                           00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 182


SYMBOL TABLE
  LABEL                             VALUE 

RXB0D52                           00000002
RXB0D53                           00000003
RXB0D54                           00000004
RXB0D55                           00000005
RXB0D56                           00000006
RXB0D57                           00000007
RXB0D6                            00000F6C
RXB0D60                           00000000
RXB0D61                           00000001
RXB0D62                           00000002
RXB0D63                           00000003
RXB0D64                           00000004
RXB0D65                           00000005
RXB0D66                           00000006
RXB0D67                           00000007
RXB0D7                            00000F6D
RXB0D70                           00000000
RXB0D71                           00000001
RXB0D72                           00000002
RXB0D73                           00000003
RXB0D74                           00000004
RXB0D75                           00000005
RXB0D76                           00000006
RXB0D77                           00000007
RXB0DLC                           00000F65
RXB0EIDH                          00000F63
RXB0EIDL                          00000F64
RXB0IE                            00000000
RXB0IF                            00000000
RXB0IP                            00000000
RXB0OVFL                          00000007
RXB0SIDH                          00000F61
RXB0SIDL                          00000F62
RXB1CON                           00000F30
RXB1D0                            00000F36
RXB1D00                           00000000
RXB1D01                           00000001
RXB1D02                           00000002
RXB1D03                           00000003
RXB1D04                           00000004
RXB1D05                           00000005
RXB1D06                           00000006
RXB1D07                           00000007
RXB1D1                            00000F37
RXB1D10                           00000000
RXB1D11                           00000001
RXB1D12                           00000002
RXB1D13                           00000003
RXB1D14                           00000004
RXB1D15                           00000005
RXB1D16                           00000006
RXB1D17                           00000007
RXB1D2                            00000F38
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 183


SYMBOL TABLE
  LABEL                             VALUE 

RXB1D20                           00000000
RXB1D21                           00000001
RXB1D22                           00000002
RXB1D23                           00000003
RXB1D24                           00000004
RXB1D25                           00000005
RXB1D26                           00000006
RXB1D27                           00000007
RXB1D3                            00000F39
RXB1D30                           00000000
RXB1D31                           00000001
RXB1D32                           00000002
RXB1D33                           00000003
RXB1D34                           00000004
RXB1D35                           00000005
RXB1D36                           00000006
RXB1D37                           00000007
RXB1D4                            00000F3A
RXB1D40                           00000000
RXB1D41                           00000001
RXB1D42                           00000002
RXB1D43                           00000003
RXB1D44                           00000004
RXB1D45                           00000005
RXB1D46                           00000006
RXB1D47                           00000007
RXB1D5                            00000F3B
RXB1D50                           00000000
RXB1D51                           00000001
RXB1D52                           00000002
RXB1D53                           00000003
RXB1D54                           00000004
RXB1D55                           00000005
RXB1D56                           00000006
RXB1D57                           00000007
RXB1D6                            00000F3C
RXB1D60                           00000000
RXB1D61                           00000001
RXB1D62                           00000002
RXB1D63                           00000003
RXB1D64                           00000004
RXB1D65                           00000005
RXB1D66                           00000006
RXB1D67                           00000007
RXB1D7                            00000F3D
RXB1D70                           00000000
RXB1D71                           00000001
RXB1D72                           00000002
RXB1D73                           00000003
RXB1D74                           00000004
RXB1D75                           00000005
RXB1D76                           00000006
RXB1D77                           00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 184


SYMBOL TABLE
  LABEL                             VALUE 

RXB1DLC                           00000F35
RXB1EIDH                          00000F33
RXB1EIDL                          00000F34
RXB1IE                            00000001
RXB1IF                            00000001
RXB1IP                            00000001
RXB1OVFL                          00000006
RXB1SIDH                          00000F31
RXB1SIDL                          00000F32
RXBP                              00000003
RXBnIE                            00000001
RXBnIF                            00000001
RXBnIP                            00000001
RXDTP                             00000005
RXERRCNT                          00000E41
RXF0EIDH                          00000EE2
RXF0EIDL                          00000EE3
RXF0EN                            00000000
RXF0SIDH                          00000EE0
RXF0SIDL                          00000EE1
RXF10EIDH                         00000E5A
RXF10EIDL                         00000E5B
RXF10EN                           00000002
RXF10SIDH                         00000E58
RXF10SIDL                         00000E59
RXF11EIDH                         00000E5E
RXF11EIDL                         00000E5F
RXF11EN                           00000003
RXF11SIDH                         00000E5C
RXF11SIDL                         00000E5D
RXF12EIDH                         00000E62
RXF12EIDL                         00000E63
RXF12EN                           00000004
RXF12SIDH                         00000E60
RXF12SIDL                         00000E61
RXF13EIDH                         00000E66
RXF13EIDL                         00000E67
RXF13EN                           00000005
RXF13SIDH                         00000E64
RXF13SIDL                         00000E65
RXF14EIDH                         00000E6A
RXF14EIDL                         00000E6B
RXF14EN                           00000006
RXF14SIDH                         00000E68
RXF14SIDL                         00000E69
RXF15EIDH                         00000E6E
RXF15EIDL                         00000E6F
RXF15EN                           00000007
RXF15SIDH                         00000E6C
RXF15SIDL                         00000E6D
RXF1EIDH                          00000EE6
RXF1EIDL                          00000EE7
RXF1EN                            00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 185


SYMBOL TABLE
  LABEL                             VALUE 

RXF1SIDH                          00000EE4
RXF1SIDL                          00000EE5
RXF2EIDH                          00000EEA
RXF2EIDL                          00000EEB
RXF2EN                            00000002
RXF2SIDH                          00000EE8
RXF2SIDL                          00000EE9
RXF3EIDH                          00000EEE
RXF3EIDL                          00000EEF
RXF3EN                            00000003
RXF3SIDH                          00000EEC
RXF3SIDL                          00000EED
RXF4EIDH                          00000EF2
RXF4EIDL                          00000EF3
RXF4EN                            00000004
RXF4SIDH                          00000EF0
RXF4SIDL                          00000EF1
RXF5EIDH                          00000EF6
RXF5EIDL                          00000EF7
RXF5EN                            00000005
RXF5SIDH                          00000EF4
RXF5SIDL                          00000EF5
RXF6EIDH                          00000E4A
RXF6EIDL                          00000E4B
RXF6EN                            00000006
RXF6SIDH                          00000E48
RXF6SIDL                          00000E49
RXF7EIDH                          00000E4E
RXF7EIDL                          00000E4F
RXF7EN                            00000007
RXF7SIDH                          00000E4C
RXF7SIDL                          00000E4D
RXF8EIDH                          00000E52
RXF8EIDL                          00000E53
RXF8EN                            00000000
RXF8SIDH                          00000E50
RXF8SIDL                          00000E51
RXF9EIDH                          00000E56
RXF9EIDL                          00000E57
RXF9EN                            00000001
RXF9SIDH                          00000E54
RXF9SIDL                          00000E55
RXFBCON0                          00000E71
RXFBCON1                          00000E72
RXFBCON2                          00000E73
RXFBCON3                          00000E74
RXFBCON4                          00000E75
RXFBCON5                          00000E76
RXFBCON6                          00000E77
RXFBCON7                          00000E78
RXFCON0                           00000E46
RXFCON1                           00000E47
RXFUL                             00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 186


SYMBOL TABLE
  LABEL                             VALUE 

RXFUL_TXBIF                       00000007
RXM0                              00000005
RXM0EIDH                          00000EFA
RXM0EIDL                          00000EFB
RXM0SIDH                          00000EF8
RXM0SIDL                          00000EF9
RXM0_RTRRO                        00000005
RXM1                              00000006
RXM1EIDH                          00000EFE
RXM1EIDL                          00000EFF
RXM1SIDH                          00000EFC
RXM1SIDL                          00000EFD
RXM1_TXABT                        00000006
RXRTR                             00000006
RXRTRRO_B0CON                     00000005
RXRTRRO_B1CON                     00000005
RXRTRRO_B2CON                     00000005
RXRTRRO_B3CON                     00000005
RXRTRRO_B4CON                     00000005
RXRTRRO_B5CON                     00000005
RXRTRRO_FILHIT3                   00000003
RXRTRRO_RXB0CON                   00000003
RXRTRRO_RXB1CON                   00000003
RXRTRRO_TXLARB                    00000005
RXRTR_TXRTR                       00000006
RXWARN                            00000001
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SAM                               00000006
SBOREN                            00000006
SCS0                              00000000
SCS1                              00000001
SDFLC                             00000E70
SEG1PH0                           00000003
SEG1PH1                           00000004
SEG1PH2                           00000005
SEG2PH0                           00000000
SEG2PH1                           00000001
SEG2PH2                           00000002
SEG2PHTS                          00000007
SEN                               00000000
SENDB                             00000003
SENDB1                            00000003
SENDB2                            00000003
SID0                              00000005
SID1                              00000006
SID10                             00000007
SID2                              00000007
SID3                              00000000
SID4                              00000001
SID5                              00000002
SID6                              00000003
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 187


SYMBOL TABLE
  LABEL                             VALUE 

SID7                              00000004
SID8                              00000005
SID9                              00000006
SJW0                              00000006
SJW1                              00000007
SLRA                              00000000
SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F90
SLRD                              00000003
SLRE                              00000004
SMP                               00000007
SOSCDRV                           00000004
SOSCEN                            00000003
SOSCGO                            00000003
SOSCRUN                           00000006
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRG1                            00000FAF
SPBRG2                            00000F7B
SPBRGH                            00000F7D
SPBRGH1                           00000F7D
SPBRGH2                           00000F7C
SPEN                              00000007
SPEN1                             00000007
SPEN2                             00000007
SREN                              00000005
SREN1                             00000005
SREN2                             00000005
SRETEN                            00000004
SRR                               00000004
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMD                             00000000
SSPOD                             00000007
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 188


SYMBOL TABLE
  LABEL                             VALUE 

STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYNC1                             00000004
SYNC2                             00000004
T08BIT                            00000006
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1GCON                            00000FAA
T1GGO                             00000003
T1GGO_NOT_T1DONE                  00000003
T1GPOL                            00000006
T1GSPM                            00000004
T1GSS0                            00000000
T1GSS1                            00000001
T1GTM                             00000005
T1GVAL                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3GCON                            00000FB0
T3GGO                             00000003
T3GGO_NOT_T3DONE                  00000003
T3GPOL                            00000006
T3GSPM                            00000004
T3GSS0                            00000000
T3GSS1                            00000001
T3GTM                             00000005
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 189


SYMBOL TABLE
  LABEL                             VALUE 

T3GVAL                            00000002
T4CKPS0                           00000000
T4CKPS1                           00000001
T4CON                             00000F88
T4OUTPS0                          00000003
T4OUTPS1                          00000004
T4OUTPS2                          00000005
T4OUTPS3                          00000006
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEC0                              00000000
TEC1                              00000001
TEC2                              00000002
TEC3                              00000003
TEC4                              00000004
TEC5                              00000005
TEC6                              00000006
TEC7                              00000007
TGEN                              00000004
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0MD                            00000000
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS0                           00000006
TMR1CS1                           00000007
TMR1GE                            00000007
TMR1GIE                           00000002
TMR1GIF                           00000002
TMR1GIP                           00000002
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1MD                            00000001
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2MD                            00000002
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS0                           00000006
TMR3CS1                           00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 190


SYMBOL TABLE
  LABEL                             VALUE 

TMR3GE                            00000007
TMR3GIE                           00000000
TMR3GIF                           00000000
TMR3GIP                           00000000
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3MD                            00000003
TMR3ON                            00000000
TMR4                              00000F87
TMR4IE                            00000007
TMR4IF                            00000007
TMR4IP                            00000007
TMR4MD                            00000004
TMR4ON                            00000002
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRIGSEL0                          00000006
TRIGSEL1                          00000007
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 191


SYMBOL TABLE
  LABEL                             VALUE 

TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRMT1                             00000001
TRMT2                             00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX1IE                             00000004
TX1IF                             00000004
TX1IP                             00000004
TX2EN                             00000006
TX2IE                             00000004
TX2IF                             00000004
TX2IP                             00000004
TX2SRC                            00000007
TX8_9                             00000006
TX9                               00000006
TX91                              00000006
TX92                              00000006
TX9D                              00000000
TX9D1                             00000000
TX9D2                             00000000
TXABT                             00000006
TXB0CON                           00000F20
TXB0D0                            00000F26
TXB0D00                           00000000
TXB0D01                           00000001
TXB0D02                           00000002
TXB0D03                           00000003
TXB0D04                           00000004
TXB0D05                           00000005
TXB0D06                           00000006
TXB0D07                           00000007
TXB0D1                            00000F27
TXB0D10                           00000000
TXB0D11                           00000001
TXB0D12                           00000002
TXB0D13                           00000003
TXB0D14                           00000004
TXB0D15                           00000005
TXB0D16                           00000006
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 192


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D17                           00000007
TXB0D2                            00000F28
TXB0D20                           00000000
TXB0D21                           00000001
TXB0D22                           00000002
TXB0D23                           00000003
TXB0D24                           00000004
TXB0D25                           00000005
TXB0D26                           00000006
TXB0D27                           00000007
TXB0D3                            00000F29
TXB0D30                           00000000
TXB0D31                           00000001
TXB0D32                           00000002
TXB0D33                           00000003
TXB0D34                           00000004
TXB0D35                           00000005
TXB0D36                           00000006
TXB0D37                           00000007
TXB0D4                            00000F2A
TXB0D40                           00000000
TXB0D41                           00000001
TXB0D42                           00000002
TXB0D43                           00000003
TXB0D44                           00000004
TXB0D45                           00000005
TXB0D46                           00000006
TXB0D47                           00000007
TXB0D5                            00000F2B
TXB0D50                           00000000
TXB0D51                           00000001
TXB0D52                           00000002
TXB0D53                           00000003
TXB0D54                           00000004
TXB0D55                           00000005
TXB0D56                           00000006
TXB0D57                           00000007
TXB0D6                            00000F2C
TXB0D60                           00000000
TXB0D61                           00000001
TXB0D62                           00000002
TXB0D63                           00000003
TXB0D64                           00000004
TXB0D65                           00000005
TXB0D66                           00000006
TXB0D67                           00000007
TXB0D7                            00000F2D
TXB0D70                           00000000
TXB0D71                           00000001
TXB0D72                           00000002
TXB0D73                           00000003
TXB0D74                           00000004
TXB0D75                           00000005
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 193


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D76                           00000006
TXB0D77                           00000007
TXB0DLC                           00000F25
TXB0EIDH                          00000F23
TXB0EIDL                          00000F24
TXB0IE                            00000002
TXB0IF                            00000002
TXB0IP                            00000002
TXB0SIDH                          00000F21
TXB0SIDL                          00000F22
TXB1CON                           00000F10
TXB1D0                            00000F16
TXB1D00                           00000000
TXB1D01                           00000001
TXB1D02                           00000002
TXB1D03                           00000003
TXB1D04                           00000004
TXB1D05                           00000005
TXB1D06                           00000006
TXB1D07                           00000007
TXB1D1                            00000F17
TXB1D10                           00000000
TXB1D11                           00000001
TXB1D12                           00000002
TXB1D13                           00000003
TXB1D14                           00000004
TXB1D15                           00000005
TXB1D16                           00000006
TXB1D17                           00000007
TXB1D2                            00000F18
TXB1D20                           00000000
TXB1D21                           00000001
TXB1D22                           00000002
TXB1D23                           00000003
TXB1D24                           00000004
TXB1D25                           00000005
TXB1D26                           00000006
TXB1D27                           00000007
TXB1D3                            00000F19
TXB1D30                           00000000
TXB1D31                           00000001
TXB1D32                           00000002
TXB1D33                           00000003
TXB1D34                           00000004
TXB1D35                           00000005
TXB1D36                           00000006
TXB1D37                           00000007
TXB1D4                            00000F1A
TXB1D40                           00000000
TXB1D41                           00000001
TXB1D42                           00000002
TXB1D43                           00000003
TXB1D44                           00000004
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 194


SYMBOL TABLE
  LABEL                             VALUE 

TXB1D45                           00000005
TXB1D46                           00000006
TXB1D47                           00000007
TXB1D5                            00000F1B
TXB1D50                           00000000
TXB1D51                           00000001
TXB1D52                           00000002
TXB1D53                           00000003
TXB1D54                           00000004
TXB1D55                           00000005
TXB1D56                           00000006
TXB1D57                           00000007
TXB1D6                            00000F1C
TXB1D60                           00000000
TXB1D61                           00000001
TXB1D62                           00000002
TXB1D63                           00000003
TXB1D64                           00000004
TXB1D65                           00000005
TXB1D66                           00000006
TXB1D67                           00000007
TXB1D7                            00000F1D
TXB1D70                           00000000
TXB1D71                           00000001
TXB1D72                           00000002
TXB1D73                           00000003
TXB1D74                           00000004
TXB1D75                           00000005
TXB1D76                           00000006
TXB1D77                           00000007
TXB1DLC                           00000F15
TXB1EIDH                          00000F13
TXB1EIDL                          00000F14
TXB1IE                            00000003
TXB1IF                            00000003
TXB1IP                            00000003
TXB1SIDH                          00000F11
TXB1SIDL                          00000F12
TXB2CON                           00000F00
TXB2D0                            00000F06
TXB2D00                           00000000
TXB2D01                           00000001
TXB2D02                           00000002
TXB2D03                           00000003
TXB2D04                           00000004
TXB2D05                           00000005
TXB2D06                           00000006
TXB2D07                           00000007
TXB2D1                            00000F07
TXB2D10                           00000000
TXB2D11                           00000001
TXB2D12                           00000002
TXB2D13                           00000003
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 195


SYMBOL TABLE
  LABEL                             VALUE 

TXB2D14                           00000004
TXB2D15                           00000005
TXB2D16                           00000006
TXB2D17                           00000007
TXB2D2                            00000F08
TXB2D20                           00000000
TXB2D21                           00000001
TXB2D22                           00000002
TXB2D23                           00000003
TXB2D24                           00000004
TXB2D25                           00000005
TXB2D26                           00000006
TXB2D27                           00000007
TXB2D3                            00000F09
TXB2D30                           00000000
TXB2D31                           00000001
TXB2D32                           00000002
TXB2D33                           00000003
TXB2D34                           00000004
TXB2D35                           00000005
TXB2D36                           00000006
TXB2D37                           00000007
TXB2D4                            00000F0A
TXB2D40                           00000000
TXB2D41                           00000001
TXB2D42                           00000002
TXB2D43                           00000003
TXB2D44                           00000004
TXB2D45                           00000005
TXB2D46                           00000006
TXB2D47                           00000007
TXB2D5                            00000F0B
TXB2D50                           00000000
TXB2D51                           00000001
TXB2D52                           00000002
TXB2D53                           00000003
TXB2D54                           00000004
TXB2D55                           00000005
TXB2D56                           00000006
TXB2D57                           00000007
TXB2D6                            00000F0C
TXB2D60                           00000000
TXB2D61                           00000001
TXB2D62                           00000002
TXB2D63                           00000003
TXB2D64                           00000004
TXB2D65                           00000005
TXB2D66                           00000006
TXB2D67                           00000007
TXB2D7                            00000F0D
TXB2D70                           00000000
TXB2D71                           00000001
TXB2D72                           00000002
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 196


SYMBOL TABLE
  LABEL                             VALUE 

TXB2D73                           00000003
TXB2D74                           00000004
TXB2D75                           00000005
TXB2D76                           00000006
TXB2D77                           00000007
TXB2DLC                           00000F05
TXB2EIDH                          00000F03
TXB2EIDL                          00000F04
TXB2IE                            00000004
TXB2IF                            00000004
TXB2IP                            00000004
TXB2SIDH                          00000F01
TXB2SIDL                          00000F02
TXBIE                             00000E7F
TXBIF                             00000007
TXBO                              00000005
TXBP                              00000004
TXBnIE                            00000004
TXBnIF                            00000004
TXBnIP                            00000004
TXCKP                             00000004
TXD8                              00000000
TXEN                              00000005
TXEN1                             00000005
TXEN2                             00000005
TXERR                             00000004
TXERRCNT                          00000E42
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXLARB                            00000005
TXPRI0                            00000000
TXPRI1                            00000001
TXREG                             00000FAD
TXREG1                            00000FAD
TXREG2                            00000F79
TXREQ                             00000003
TXRTR                             00000006
TXSTA                             00000FAC
TXSTA1                            00000FAC
TXSTA2                            00000FBA
TXWARN                            00000002
U1OD                              00000000
U2OD                              00000001
UA                                00000001
UART1MD                           00000001
UART2MD                           00000002
ULPEN                             00000002
ULPLVL                            00000005
ULPSINK                           00000001
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 197


SYMBOL TABLE
  LABEL                             VALUE 

VNCFG                             00000003
W                                 00000000
WAKDIS                            00000007
WAKFIL                            00000006
WAKIE                             00000006
WAKIF                             00000006
WAKIP                             00000006
WCOL                              00000007
WDTCON                            00000FD1
WIN0                              00000001
WIN0_FP1                          00000001
WIN1                              00000002
WIN1_FP2                          00000002
WIN2                              00000003
WIN2_FP3                          00000003
WPUB                              00000F5B
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
Z                                 00000002
Z00002                            00000004
Z00003                            00000004
Z00004                            00000004
Z00005                            00000004
Z00006                            00000004
Z00007                            00000004
Z00008                            00000004
Z00009                            00000004
Z0000A                            00000004
Z0000B                            00000004
Z0000C                            00000004
Z0000D                            00000004
Z0000E                            00000004
Z0000F                            00000004
Z00010                            00000004
Z00011                            00000004
Z00012                            00000004
Z00013                            00000004
Z00014                            00000004
Z00015                            00000004
Z00016                            00000004
Z00017                            00000004
Z00018                            00000004
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 198


SYMBOL TABLE
  LABEL                             VALUE 

Z00019                            00000004
Z0001A                            00000004
Z0001B                            00000004
_ADCON0??1                        ADCON0, 001h
_ADCgo                            _ADCON0??1
_BBSIZ_BB1K_4L                    000000EF
_BBSIZ_BB2K_4L                    000000FF
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORPWR_HIGH_2L                   000000DF
_BORPWR_LOW_2L                    0000009F
_BORPWR_MEDIUM_2L                 000000BF
_BORPWR_ZPBORMV_2L                000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CANMX_PORTB_3H                   000000FF
_CANMX_PORTC_3H                   000000FE
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_CREN1                            _RCSTA1??4
_CREN2                            _RCSTA2??4
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 199


SYMBOL TABLE
  LABEL                             VALUE 

_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FERR1                            _RCSTA1??2
_FERR2                            _RCSTA2??2
_FOSC_EC1IO_1H                    000000FC
_FOSC_EC1_1H                      000000FD
_FOSC_EC2IO_1H                    000000FA
_FOSC_EC2_1H                      000000FB
_FOSC_EC3IO_1H                    000000F4
_FOSC_EC3_1H                      000000F5
_FOSC_HS1_1H                      000000F3
_FOSC_HS2_1H                      000000F2
_FOSC_INTIO1_1H                   000000F9
_FOSC_INTIO2_1H                   000000F8
_FOSC_LP_1H                       000000F0
_FOSC_RCIO_1H                     000000F7
_FOSC_RC_1H                       000000F6
_FOSC_XT_1H                       000000F1
_GIE                              _INTCON??7
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_INT0IE                           _INTCON??4
_INT0IF                           _INTCON??1
_INT1IE                           _INTCON3??3
_INT1IF                           _INTCON3??0
_INT2IE                           _INTCON3??4
_INT2IF                           _INTCON3??1
_INT3IE                           _INTCON3??5
_INT3IF                           _INTCON3??2
_INTCON2??3                       INTCON2, 003h
_INTCON2??4                       INTCON2, 004h
_INTCON2??5                       INTCON2, 005h
_INTCON2??6                       INTCON2, 006h
_INTCON2??7                       INTCON2, 007h
_INTCON3??0                       INTCON3, 000h
_INTCON3??1                       INTCON3, 001h
_INTCON3??2                       INTCON3, 002h
_INTCON3??3                       INTCON3, 003h
_INTCON3??4                       INTCON3, 004h
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 200


SYMBOL TABLE
  LABEL                             VALUE 

_INTCON3??5                       INTCON3, 005h
_INTCON??1                        INTCON, 001h
_INTCON??2                        INTCON, 002h
_INTCON??4                        INTCON, 004h
_INTCON??5                        INTCON, 005h
_INTCON??6                        INTCON, 006h
_INTCON??7                        INTCON, 007h
_INTEDG0                          _INTCON2??6
_INTEDG1                          _INTCON2??5
_INTEDG2                          _INTCON2??4
_INTEDG3                          _INTCON2??3
_INTOSCSEL_HIGH_1L                000000FF
_INTOSCSEL_LOW_1L                 000000FB
_IPEN                             _RCON??7
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MSSPMSK_MSK5_3H                  000000F7
_MSSPMSK_MSK7_3H                  000000FF
_OERR1                            _RCSTA1??1
_OERR2                            _RCSTA2??1
_PEIE                             _INTCON??6
_PIE1??5                          PIE1, 005h
_PIE3??5                          PIE3, 005h
_PIR1??5                          PIR1, 005h
_PIR3??5                          PIR3, 005h
_PLLCFG_OFF_1H                    000000EF
_PLLCFG_ON_1H                     000000FF
_PMD1??0                          PMD1, 000h
_PORTH                            00000F82
_PORTL                            00000F81
_PSA                              _T0CON??3
_PWRTEN_OFF_2L                    000000FF
_PWRTEN_ON_2L                     000000FE
_RBPU_                            _INTCON2??7
_RC1IE                            _PIE1??5
_RC1IF                            _PIR1??5
_RC2IE                            _PIE3??5
_RC2IF                            _PIR3??5
_RCON??7                          RCON, 007h
_RCSTA1??1                        RCSTA1, 001h
_RCSTA1??2                        RCSTA1, 002h
_RCSTA1??4                        RCSTA1, 004h
_RCSTA2??1                        RCSTA2, 001h
_RCSTA2??2                        RCSTA2, 002h
_RCSTA2??4                        RCSTA2, 004h
_RETEN_OFF_1L                     000000FF
_RETEN_ON_1L                      000000FE
_SOSCSEL_DIG_1L                   000000F7
_SOSCSEL_HIGH_1L                  000000FF
_SOSCSEL_LOW_1L                   000000EF
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_T08BIT                           _T0CON??6
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 201


SYMBOL TABLE
  LABEL                             VALUE 

_T0CON??0                         T0CON, 000h
_T0CON??1                         T0CON, 001h
_T0CON??2                         T0CON, 002h
_T0CON??3                         T0CON, 003h
_T0CON??4                         T0CON, 004h
_T0CON??5                         T0CON, 005h
_T0CON??6                         T0CON, 006h
_T0CON??7                         T0CON, 007h
_T0CS                             _T0CON??5
_T0SE                             _T0CON??4
_T1CKPS0                          _T1CON??4
_T1CKPS1                          _T1CON??5
_T1CON??0                         T1CON, 000h
_T1CON??1                         T1CON, 001h
_T1CON??2                         T1CON, 002h
_T1CON??3                         T1CON, 003h
_T1CON??4                         T1CON, 004h
_T1CON??5                         T1CON, 005h
_T1CON??6                         T1CON, 006h
_T1CON??7                         T1CON, 007h
_T1GCON??0                        T1GCON, 000h
_T1GCON??1                        T1GCON, 001h
_T1GCON??2                        T1GCON, 002h
_T1GCON??3                        T1GCON, 003h
_T1GCON??4                        T1GCON, 004h
_T1GCON??5                        T1GCON, 005h
_T1GCON??6                        T1GCON, 006h
_T1GCON??7                        T1GCON, 007h
_T1GGO                            _T1GCON??3
_T1GPOL                           _T1GCON??6
_T1GSPM                           _T1GCON??4
_T1GSS0                           _T1GCON??0
_T1GSS1                           _T1GCON??1
_T1GTM                            _T1GCON??5
_T1GVAL                           _T1GCON??2
_T1RD16                           _T1CON??1
_T1SOSCEN                         _T1CON??3
_T1SYNC_                          _T1CON??2
_T3CKPS0                          _T3CON??4
_T3CKPS1                          _T3CON??5
_T3CON??0                         T3CON, 000h
_T3CON??1                         T3CON, 001h
_T3CON??2                         T3CON, 002h
_T3CON??3                         T3CON, 003h
_T3CON??4                         T3CON, 004h
_T3CON??5                         T3CON, 005h
_T3CON??6                         T3CON, 006h
_T3CON??7                         T3CON, 007h
_T3GCON??0                        T3GCON, 000h
_T3GCON??1                        T3GCON, 001h
_T3GCON??2                        T3GCON, 002h
_T3GCON??3                        T3GCON, 003h
_T3GCON??4                        T3GCON, 004h
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 202


SYMBOL TABLE
  LABEL                             VALUE 

_T3GCON??5                        T3GCON, 005h
_T3GCON??6                        T3GCON, 006h
_T3GCON??7                        T3GCON, 007h
_T3GGO                            _T3GCON??3
_T3GPOL                           _T3GCON??6
_T3GSPM                           _T3GCON??4
_T3GSS0                           _T3GCON??0
_T3GSS1                           _T3GCON??1
_T3GTM                            _T3GCON??5
_T3GVAL                           _T3GCON??2
_T3RD16                           _T3CON??1
_T3SOSCEN                         _T3CON??3
_T3SYNC_                          _T3CON??2
_TMR0IE                           _INTCON??5
_TMR0IF                           _INTCON??2
_TMR0MD                           _PMD1??0
_TMR0ON                           _T0CON??7
_TMR1CS0                          _T1CON??6
_TMR1CS1                          _T1CON??7
_TMR1GE                           _T1GCON??7
_TMR1ON                           _T1CON??0
_TMR3CS0                          _T3CON??6
_TMR3CS1                          _T3CON??7
_TMR3GE                           _T3GCON??7
_TMR3ON                           _T3CON??0
_TOPS0                            _T0CON??0
_TOPS1                            _T0CON??1
_TOPS2                            _T0CON??2
_TRISH                            00000F94
_TRISL                            00000F93
_WDTEN_NOSLP_2H                   000000FD
_WDTEN_OFF_2H                     000000FC
_WDTEN_ON_2H                      000000FE
_WDTEN_SWDTDIS_2H                 000000FF
_WDTPS_1024_2H                    000000AB
_WDTPS_1048576_2H                 000000FF
_WDTPS_128_2H                     0000009F
_WDTPS_131072_2H                  000000C7
_WDTPS_16384_2H                   000000BB
_WDTPS_16_2H                      00000093
_WDTPS_1_2H                       00000083
_WDTPS_2048_2H                    000000AF
_WDTPS_256_2H                     000000A3
_WDTPS_262144_2H                  000000CB
_WDTPS_2_2H                       00000087
_WDTPS_32768_2H                   000000BF
_WDTPS_32_2H                      00000097
_WDTPS_4096_2H                    000000B3
_WDTPS_4_2H                       0000008B
_WDTPS_512_2H                     000000A7
_WDTPS_524288_2H                  000000CF
_WDTPS_64_2H                      0000009B
_WDTPS_65536_2H                   000000C3
MPASM 5.61                BITDEFINITIONS.ASM   10-26-2015  11:46:46         PAGE 203


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_8192_2H                    000000B7
_WDTPS_8_2H                       0000008F
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_1L                     000000BF
_XINST_ON_1L                      000000FF
__18F46K80                        00000001
main                              00000004


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXX------------ ---------------- ---------------- ----------------
0000 : XXXX-XX-XXXXXX-- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Bytes Used:    16
Program Memory Bytes Free: 65520


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

